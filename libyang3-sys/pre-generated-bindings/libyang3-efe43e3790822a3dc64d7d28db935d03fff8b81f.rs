/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8)
                .offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8)
                .offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8
                <= self.storage.as_ref().len()
        );
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(
        this: *const Self,
        bit_offset: usize,
        bit_width: u8,
    ) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8
                <= core::mem::size_of::<Storage>()
        );
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8
                <= self.storage.as_ref().len()
        );
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(
        this: *mut Self,
        bit_offset: usize,
        bit_width: u8,
        val: u64,
    ) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!(
            (bit_offset + (bit_width as usize)) / 8
                <= core::mem::size_of::<Storage>()
        );
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe {
                Self::raw_set_bit(this, index + bit_offset, val_bit_is_set)
            };
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const LYD_VALUE_FIXED_MEM_SIZE: u32 = 24;
pub const LYPLG_SUFFIX: &[u8; 4] = b".so\0";
pub const LYPLG_TYPE_DIR: &[u8; 29] = b"/usr/local/lib/libyang/types\0";
pub const LYPLG_EXT_DIR: &[u8; 34] = b"/usr/local/lib/libyang/extensions\0";
pub const LY_LOLOG: u32 = 1;
pub const LY_LOSTORE: u32 = 2;
pub const LY_LOSTORE_LAST: u32 = 6;
pub const LY_LDGDICT: u32 = 1;
pub const LY_LDGXPATH: u32 = 2;
pub const LY_LDGDEPSETS: u32 = 4;
pub const _ARPA_INET_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const PCRE2_CODE_UNIT_WIDTH: u32 = 8;
pub const PCRE2_MAJOR: u32 = 10;
pub const PCRE2_MINOR: u32 = 39;
pub const PCRE2_DATE: u32 = 1982;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const PCRE2_ANCHORED: u32 = 2147483648;
pub const PCRE2_NO_UTF_CHECK: u32 = 1073741824;
pub const PCRE2_ENDANCHORED: u32 = 536870912;
pub const PCRE2_ALLOW_EMPTY_CLASS: u32 = 1;
pub const PCRE2_ALT_BSUX: u32 = 2;
pub const PCRE2_AUTO_CALLOUT: u32 = 4;
pub const PCRE2_CASELESS: u32 = 8;
pub const PCRE2_DOLLAR_ENDONLY: u32 = 16;
pub const PCRE2_DOTALL: u32 = 32;
pub const PCRE2_DUPNAMES: u32 = 64;
pub const PCRE2_EXTENDED: u32 = 128;
pub const PCRE2_FIRSTLINE: u32 = 256;
pub const PCRE2_MATCH_UNSET_BACKREF: u32 = 512;
pub const PCRE2_MULTILINE: u32 = 1024;
pub const PCRE2_NEVER_UCP: u32 = 2048;
pub const PCRE2_NEVER_UTF: u32 = 4096;
pub const PCRE2_NO_AUTO_CAPTURE: u32 = 8192;
pub const PCRE2_NO_AUTO_POSSESS: u32 = 16384;
pub const PCRE2_NO_DOTSTAR_ANCHOR: u32 = 32768;
pub const PCRE2_NO_START_OPTIMIZE: u32 = 65536;
pub const PCRE2_UCP: u32 = 131072;
pub const PCRE2_UNGREEDY: u32 = 262144;
pub const PCRE2_UTF: u32 = 524288;
pub const PCRE2_NEVER_BACKSLASH_C: u32 = 1048576;
pub const PCRE2_ALT_CIRCUMFLEX: u32 = 2097152;
pub const PCRE2_ALT_VERBNAMES: u32 = 4194304;
pub const PCRE2_USE_OFFSET_LIMIT: u32 = 8388608;
pub const PCRE2_EXTENDED_MORE: u32 = 16777216;
pub const PCRE2_LITERAL: u32 = 33554432;
pub const PCRE2_MATCH_INVALID_UTF: u32 = 67108864;
pub const PCRE2_EXTRA_ALLOW_SURROGATE_ESCAPES: u32 = 1;
pub const PCRE2_EXTRA_BAD_ESCAPE_IS_LITERAL: u32 = 2;
pub const PCRE2_EXTRA_MATCH_WORD: u32 = 4;
pub const PCRE2_EXTRA_MATCH_LINE: u32 = 8;
pub const PCRE2_EXTRA_ESCAPED_CR_IS_LF: u32 = 16;
pub const PCRE2_EXTRA_ALT_BSUX: u32 = 32;
pub const PCRE2_EXTRA_ALLOW_LOOKAROUND_BSK: u32 = 64;
pub const PCRE2_JIT_COMPLETE: u32 = 1;
pub const PCRE2_JIT_PARTIAL_SOFT: u32 = 2;
pub const PCRE2_JIT_PARTIAL_HARD: u32 = 4;
pub const PCRE2_JIT_INVALID_UTF: u32 = 256;
pub const PCRE2_NOTBOL: u32 = 1;
pub const PCRE2_NOTEOL: u32 = 2;
pub const PCRE2_NOTEMPTY: u32 = 4;
pub const PCRE2_NOTEMPTY_ATSTART: u32 = 8;
pub const PCRE2_PARTIAL_SOFT: u32 = 16;
pub const PCRE2_PARTIAL_HARD: u32 = 32;
pub const PCRE2_DFA_RESTART: u32 = 64;
pub const PCRE2_DFA_SHORTEST: u32 = 128;
pub const PCRE2_SUBSTITUTE_GLOBAL: u32 = 256;
pub const PCRE2_SUBSTITUTE_EXTENDED: u32 = 512;
pub const PCRE2_SUBSTITUTE_UNSET_EMPTY: u32 = 1024;
pub const PCRE2_SUBSTITUTE_UNKNOWN_UNSET: u32 = 2048;
pub const PCRE2_SUBSTITUTE_OVERFLOW_LENGTH: u32 = 4096;
pub const PCRE2_NO_JIT: u32 = 8192;
pub const PCRE2_COPY_MATCHED_SUBJECT: u32 = 16384;
pub const PCRE2_SUBSTITUTE_LITERAL: u32 = 32768;
pub const PCRE2_SUBSTITUTE_MATCHED: u32 = 65536;
pub const PCRE2_SUBSTITUTE_REPLACEMENT_ONLY: u32 = 131072;
pub const PCRE2_CONVERT_UTF: u32 = 1;
pub const PCRE2_CONVERT_NO_UTF_CHECK: u32 = 2;
pub const PCRE2_CONVERT_POSIX_BASIC: u32 = 4;
pub const PCRE2_CONVERT_POSIX_EXTENDED: u32 = 8;
pub const PCRE2_CONVERT_GLOB: u32 = 16;
pub const PCRE2_CONVERT_GLOB_NO_WILD_SEPARATOR: u32 = 48;
pub const PCRE2_CONVERT_GLOB_NO_STARSTAR: u32 = 80;
pub const PCRE2_NEWLINE_CR: u32 = 1;
pub const PCRE2_NEWLINE_LF: u32 = 2;
pub const PCRE2_NEWLINE_CRLF: u32 = 3;
pub const PCRE2_NEWLINE_ANY: u32 = 4;
pub const PCRE2_NEWLINE_ANYCRLF: u32 = 5;
pub const PCRE2_NEWLINE_NUL: u32 = 6;
pub const PCRE2_BSR_UNICODE: u32 = 1;
pub const PCRE2_BSR_ANYCRLF: u32 = 2;
pub const PCRE2_ERROR_END_BACKSLASH: u32 = 101;
pub const PCRE2_ERROR_END_BACKSLASH_C: u32 = 102;
pub const PCRE2_ERROR_UNKNOWN_ESCAPE: u32 = 103;
pub const PCRE2_ERROR_QUANTIFIER_OUT_OF_ORDER: u32 = 104;
pub const PCRE2_ERROR_QUANTIFIER_TOO_BIG: u32 = 105;
pub const PCRE2_ERROR_MISSING_SQUARE_BRACKET: u32 = 106;
pub const PCRE2_ERROR_ESCAPE_INVALID_IN_CLASS: u32 = 107;
pub const PCRE2_ERROR_CLASS_RANGE_ORDER: u32 = 108;
pub const PCRE2_ERROR_QUANTIFIER_INVALID: u32 = 109;
pub const PCRE2_ERROR_INTERNAL_UNEXPECTED_REPEAT: u32 = 110;
pub const PCRE2_ERROR_INVALID_AFTER_PARENS_QUERY: u32 = 111;
pub const PCRE2_ERROR_POSIX_CLASS_NOT_IN_CLASS: u32 = 112;
pub const PCRE2_ERROR_POSIX_NO_SUPPORT_COLLATING: u32 = 113;
pub const PCRE2_ERROR_MISSING_CLOSING_PARENTHESIS: u32 = 114;
pub const PCRE2_ERROR_BAD_SUBPATTERN_REFERENCE: u32 = 115;
pub const PCRE2_ERROR_NULL_PATTERN: u32 = 116;
pub const PCRE2_ERROR_BAD_OPTIONS: u32 = 117;
pub const PCRE2_ERROR_MISSING_COMMENT_CLOSING: u32 = 118;
pub const PCRE2_ERROR_PARENTHESES_NEST_TOO_DEEP: u32 = 119;
pub const PCRE2_ERROR_PATTERN_TOO_LARGE: u32 = 120;
pub const PCRE2_ERROR_HEAP_FAILED: u32 = 121;
pub const PCRE2_ERROR_UNMATCHED_CLOSING_PARENTHESIS: u32 = 122;
pub const PCRE2_ERROR_INTERNAL_CODE_OVERFLOW: u32 = 123;
pub const PCRE2_ERROR_MISSING_CONDITION_CLOSING: u32 = 124;
pub const PCRE2_ERROR_LOOKBEHIND_NOT_FIXED_LENGTH: u32 = 125;
pub const PCRE2_ERROR_ZERO_RELATIVE_REFERENCE: u32 = 126;
pub const PCRE2_ERROR_TOO_MANY_CONDITION_BRANCHES: u32 = 127;
pub const PCRE2_ERROR_CONDITION_ASSERTION_EXPECTED: u32 = 128;
pub const PCRE2_ERROR_BAD_RELATIVE_REFERENCE: u32 = 129;
pub const PCRE2_ERROR_UNKNOWN_POSIX_CLASS: u32 = 130;
pub const PCRE2_ERROR_INTERNAL_STUDY_ERROR: u32 = 131;
pub const PCRE2_ERROR_UNICODE_NOT_SUPPORTED: u32 = 132;
pub const PCRE2_ERROR_PARENTHESES_STACK_CHECK: u32 = 133;
pub const PCRE2_ERROR_CODE_POINT_TOO_BIG: u32 = 134;
pub const PCRE2_ERROR_LOOKBEHIND_TOO_COMPLICATED: u32 = 135;
pub const PCRE2_ERROR_LOOKBEHIND_INVALID_BACKSLASH_C: u32 = 136;
pub const PCRE2_ERROR_UNSUPPORTED_ESCAPE_SEQUENCE: u32 = 137;
pub const PCRE2_ERROR_CALLOUT_NUMBER_TOO_BIG: u32 = 138;
pub const PCRE2_ERROR_MISSING_CALLOUT_CLOSING: u32 = 139;
pub const PCRE2_ERROR_ESCAPE_INVALID_IN_VERB: u32 = 140;
pub const PCRE2_ERROR_UNRECOGNIZED_AFTER_QUERY_P: u32 = 141;
pub const PCRE2_ERROR_MISSING_NAME_TERMINATOR: u32 = 142;
pub const PCRE2_ERROR_DUPLICATE_SUBPATTERN_NAME: u32 = 143;
pub const PCRE2_ERROR_INVALID_SUBPATTERN_NAME: u32 = 144;
pub const PCRE2_ERROR_UNICODE_PROPERTIES_UNAVAILABLE: u32 = 145;
pub const PCRE2_ERROR_MALFORMED_UNICODE_PROPERTY: u32 = 146;
pub const PCRE2_ERROR_UNKNOWN_UNICODE_PROPERTY: u32 = 147;
pub const PCRE2_ERROR_SUBPATTERN_NAME_TOO_LONG: u32 = 148;
pub const PCRE2_ERROR_TOO_MANY_NAMED_SUBPATTERNS: u32 = 149;
pub const PCRE2_ERROR_CLASS_INVALID_RANGE: u32 = 150;
pub const PCRE2_ERROR_OCTAL_BYTE_TOO_BIG: u32 = 151;
pub const PCRE2_ERROR_INTERNAL_OVERRAN_WORKSPACE: u32 = 152;
pub const PCRE2_ERROR_INTERNAL_MISSING_SUBPATTERN: u32 = 153;
pub const PCRE2_ERROR_DEFINE_TOO_MANY_BRANCHES: u32 = 154;
pub const PCRE2_ERROR_BACKSLASH_O_MISSING_BRACE: u32 = 155;
pub const PCRE2_ERROR_INTERNAL_UNKNOWN_NEWLINE: u32 = 156;
pub const PCRE2_ERROR_BACKSLASH_G_SYNTAX: u32 = 157;
pub const PCRE2_ERROR_PARENS_QUERY_R_MISSING_CLOSING: u32 = 158;
pub const PCRE2_ERROR_VERB_ARGUMENT_NOT_ALLOWED: u32 = 159;
pub const PCRE2_ERROR_VERB_UNKNOWN: u32 = 160;
pub const PCRE2_ERROR_SUBPATTERN_NUMBER_TOO_BIG: u32 = 161;
pub const PCRE2_ERROR_SUBPATTERN_NAME_EXPECTED: u32 = 162;
pub const PCRE2_ERROR_INTERNAL_PARSED_OVERFLOW: u32 = 163;
pub const PCRE2_ERROR_INVALID_OCTAL: u32 = 164;
pub const PCRE2_ERROR_SUBPATTERN_NAMES_MISMATCH: u32 = 165;
pub const PCRE2_ERROR_MARK_MISSING_ARGUMENT: u32 = 166;
pub const PCRE2_ERROR_INVALID_HEXADECIMAL: u32 = 167;
pub const PCRE2_ERROR_BACKSLASH_C_SYNTAX: u32 = 168;
pub const PCRE2_ERROR_BACKSLASH_K_SYNTAX: u32 = 169;
pub const PCRE2_ERROR_INTERNAL_BAD_CODE_LOOKBEHINDS: u32 = 170;
pub const PCRE2_ERROR_BACKSLASH_N_IN_CLASS: u32 = 171;
pub const PCRE2_ERROR_CALLOUT_STRING_TOO_LONG: u32 = 172;
pub const PCRE2_ERROR_UNICODE_DISALLOWED_CODE_POINT: u32 = 173;
pub const PCRE2_ERROR_UTF_IS_DISABLED: u32 = 174;
pub const PCRE2_ERROR_UCP_IS_DISABLED: u32 = 175;
pub const PCRE2_ERROR_VERB_NAME_TOO_LONG: u32 = 176;
pub const PCRE2_ERROR_BACKSLASH_U_CODE_POINT_TOO_BIG: u32 = 177;
pub const PCRE2_ERROR_MISSING_OCTAL_OR_HEX_DIGITS: u32 = 178;
pub const PCRE2_ERROR_VERSION_CONDITION_SYNTAX: u32 = 179;
pub const PCRE2_ERROR_INTERNAL_BAD_CODE_AUTO_POSSESS: u32 = 180;
pub const PCRE2_ERROR_CALLOUT_NO_STRING_DELIMITER: u32 = 181;
pub const PCRE2_ERROR_CALLOUT_BAD_STRING_DELIMITER: u32 = 182;
pub const PCRE2_ERROR_BACKSLASH_C_CALLER_DISABLED: u32 = 183;
pub const PCRE2_ERROR_QUERY_BARJX_NEST_TOO_DEEP: u32 = 184;
pub const PCRE2_ERROR_BACKSLASH_C_LIBRARY_DISABLED: u32 = 185;
pub const PCRE2_ERROR_PATTERN_TOO_COMPLICATED: u32 = 186;
pub const PCRE2_ERROR_LOOKBEHIND_TOO_LONG: u32 = 187;
pub const PCRE2_ERROR_PATTERN_STRING_TOO_LONG: u32 = 188;
pub const PCRE2_ERROR_INTERNAL_BAD_CODE: u32 = 189;
pub const PCRE2_ERROR_INTERNAL_BAD_CODE_IN_SKIP: u32 = 190;
pub const PCRE2_ERROR_NO_SURROGATES_IN_UTF16: u32 = 191;
pub const PCRE2_ERROR_BAD_LITERAL_OPTIONS: u32 = 192;
pub const PCRE2_ERROR_SUPPORTED_ONLY_IN_UNICODE: u32 = 193;
pub const PCRE2_ERROR_INVALID_HYPHEN_IN_OPTIONS: u32 = 194;
pub const PCRE2_ERROR_ALPHA_ASSERTION_UNKNOWN: u32 = 195;
pub const PCRE2_ERROR_SCRIPT_RUN_NOT_AVAILABLE: u32 = 196;
pub const PCRE2_ERROR_TOO_MANY_CAPTURES: u32 = 197;
pub const PCRE2_ERROR_CONDITION_ATOMIC_ASSERTION_EXPECTED: u32 = 198;
pub const PCRE2_ERROR_BACKSLASH_K_IN_LOOKAROUND: u32 = 199;
pub const PCRE2_ERROR_NOMATCH: i32 = -1;
pub const PCRE2_ERROR_PARTIAL: i32 = -2;
pub const PCRE2_ERROR_UTF8_ERR1: i32 = -3;
pub const PCRE2_ERROR_UTF8_ERR2: i32 = -4;
pub const PCRE2_ERROR_UTF8_ERR3: i32 = -5;
pub const PCRE2_ERROR_UTF8_ERR4: i32 = -6;
pub const PCRE2_ERROR_UTF8_ERR5: i32 = -7;
pub const PCRE2_ERROR_UTF8_ERR6: i32 = -8;
pub const PCRE2_ERROR_UTF8_ERR7: i32 = -9;
pub const PCRE2_ERROR_UTF8_ERR8: i32 = -10;
pub const PCRE2_ERROR_UTF8_ERR9: i32 = -11;
pub const PCRE2_ERROR_UTF8_ERR10: i32 = -12;
pub const PCRE2_ERROR_UTF8_ERR11: i32 = -13;
pub const PCRE2_ERROR_UTF8_ERR12: i32 = -14;
pub const PCRE2_ERROR_UTF8_ERR13: i32 = -15;
pub const PCRE2_ERROR_UTF8_ERR14: i32 = -16;
pub const PCRE2_ERROR_UTF8_ERR15: i32 = -17;
pub const PCRE2_ERROR_UTF8_ERR16: i32 = -18;
pub const PCRE2_ERROR_UTF8_ERR17: i32 = -19;
pub const PCRE2_ERROR_UTF8_ERR18: i32 = -20;
pub const PCRE2_ERROR_UTF8_ERR19: i32 = -21;
pub const PCRE2_ERROR_UTF8_ERR20: i32 = -22;
pub const PCRE2_ERROR_UTF8_ERR21: i32 = -23;
pub const PCRE2_ERROR_UTF16_ERR1: i32 = -24;
pub const PCRE2_ERROR_UTF16_ERR2: i32 = -25;
pub const PCRE2_ERROR_UTF16_ERR3: i32 = -26;
pub const PCRE2_ERROR_UTF32_ERR1: i32 = -27;
pub const PCRE2_ERROR_UTF32_ERR2: i32 = -28;
pub const PCRE2_ERROR_BADDATA: i32 = -29;
pub const PCRE2_ERROR_MIXEDTABLES: i32 = -30;
pub const PCRE2_ERROR_BADMAGIC: i32 = -31;
pub const PCRE2_ERROR_BADMODE: i32 = -32;
pub const PCRE2_ERROR_BADOFFSET: i32 = -33;
pub const PCRE2_ERROR_BADOPTION: i32 = -34;
pub const PCRE2_ERROR_BADREPLACEMENT: i32 = -35;
pub const PCRE2_ERROR_BADUTFOFFSET: i32 = -36;
pub const PCRE2_ERROR_CALLOUT: i32 = -37;
pub const PCRE2_ERROR_DFA_BADRESTART: i32 = -38;
pub const PCRE2_ERROR_DFA_RECURSE: i32 = -39;
pub const PCRE2_ERROR_DFA_UCOND: i32 = -40;
pub const PCRE2_ERROR_DFA_UFUNC: i32 = -41;
pub const PCRE2_ERROR_DFA_UITEM: i32 = -42;
pub const PCRE2_ERROR_DFA_WSSIZE: i32 = -43;
pub const PCRE2_ERROR_INTERNAL: i32 = -44;
pub const PCRE2_ERROR_JIT_BADOPTION: i32 = -45;
pub const PCRE2_ERROR_JIT_STACKLIMIT: i32 = -46;
pub const PCRE2_ERROR_MATCHLIMIT: i32 = -47;
pub const PCRE2_ERROR_NOMEMORY: i32 = -48;
pub const PCRE2_ERROR_NOSUBSTRING: i32 = -49;
pub const PCRE2_ERROR_NOUNIQUESUBSTRING: i32 = -50;
pub const PCRE2_ERROR_NULL: i32 = -51;
pub const PCRE2_ERROR_RECURSELOOP: i32 = -52;
pub const PCRE2_ERROR_DEPTHLIMIT: i32 = -53;
pub const PCRE2_ERROR_RECURSIONLIMIT: i32 = -53;
pub const PCRE2_ERROR_UNAVAILABLE: i32 = -54;
pub const PCRE2_ERROR_UNSET: i32 = -55;
pub const PCRE2_ERROR_BADOFFSETLIMIT: i32 = -56;
pub const PCRE2_ERROR_BADREPESCAPE: i32 = -57;
pub const PCRE2_ERROR_REPMISSINGBRACE: i32 = -58;
pub const PCRE2_ERROR_BADSUBSTITUTION: i32 = -59;
pub const PCRE2_ERROR_BADSUBSPATTERN: i32 = -60;
pub const PCRE2_ERROR_TOOMANYREPLACE: i32 = -61;
pub const PCRE2_ERROR_BADSERIALIZEDDATA: i32 = -62;
pub const PCRE2_ERROR_HEAPLIMIT: i32 = -63;
pub const PCRE2_ERROR_CONVERT_SYNTAX: i32 = -64;
pub const PCRE2_ERROR_INTERNAL_DUPMATCH: i32 = -65;
pub const PCRE2_ERROR_DFA_UINVALID_UTF: i32 = -66;
pub const PCRE2_INFO_ALLOPTIONS: u32 = 0;
pub const PCRE2_INFO_ARGOPTIONS: u32 = 1;
pub const PCRE2_INFO_BACKREFMAX: u32 = 2;
pub const PCRE2_INFO_BSR: u32 = 3;
pub const PCRE2_INFO_CAPTURECOUNT: u32 = 4;
pub const PCRE2_INFO_FIRSTCODEUNIT: u32 = 5;
pub const PCRE2_INFO_FIRSTCODETYPE: u32 = 6;
pub const PCRE2_INFO_FIRSTBITMAP: u32 = 7;
pub const PCRE2_INFO_HASCRORLF: u32 = 8;
pub const PCRE2_INFO_JCHANGED: u32 = 9;
pub const PCRE2_INFO_JITSIZE: u32 = 10;
pub const PCRE2_INFO_LASTCODEUNIT: u32 = 11;
pub const PCRE2_INFO_LASTCODETYPE: u32 = 12;
pub const PCRE2_INFO_MATCHEMPTY: u32 = 13;
pub const PCRE2_INFO_MATCHLIMIT: u32 = 14;
pub const PCRE2_INFO_MAXLOOKBEHIND: u32 = 15;
pub const PCRE2_INFO_MINLENGTH: u32 = 16;
pub const PCRE2_INFO_NAMECOUNT: u32 = 17;
pub const PCRE2_INFO_NAMEENTRYSIZE: u32 = 18;
pub const PCRE2_INFO_NAMETABLE: u32 = 19;
pub const PCRE2_INFO_NEWLINE: u32 = 20;
pub const PCRE2_INFO_DEPTHLIMIT: u32 = 21;
pub const PCRE2_INFO_RECURSIONLIMIT: u32 = 21;
pub const PCRE2_INFO_SIZE: u32 = 22;
pub const PCRE2_INFO_HASBACKSLASHC: u32 = 23;
pub const PCRE2_INFO_FRAMESIZE: u32 = 24;
pub const PCRE2_INFO_HEAPLIMIT: u32 = 25;
pub const PCRE2_INFO_EXTRAOPTIONS: u32 = 26;
pub const PCRE2_CONFIG_BSR: u32 = 0;
pub const PCRE2_CONFIG_JIT: u32 = 1;
pub const PCRE2_CONFIG_JITTARGET: u32 = 2;
pub const PCRE2_CONFIG_LINKSIZE: u32 = 3;
pub const PCRE2_CONFIG_MATCHLIMIT: u32 = 4;
pub const PCRE2_CONFIG_NEWLINE: u32 = 5;
pub const PCRE2_CONFIG_PARENSLIMIT: u32 = 6;
pub const PCRE2_CONFIG_DEPTHLIMIT: u32 = 7;
pub const PCRE2_CONFIG_RECURSIONLIMIT: u32 = 7;
pub const PCRE2_CONFIG_STACKRECURSE: u32 = 8;
pub const PCRE2_CONFIG_UNICODE: u32 = 9;
pub const PCRE2_CONFIG_UNICODE_VERSION: u32 = 10;
pub const PCRE2_CONFIG_VERSION: u32 = 11;
pub const PCRE2_CONFIG_HEAPLIMIT: u32 = 12;
pub const PCRE2_CONFIG_NEVER_BACKSLASH_C: u32 = 13;
pub const PCRE2_CONFIG_COMPILED_WIDTHS: u32 = 14;
pub const PCRE2_CONFIG_TABLES_LENGTH: u32 = 15;
pub const PCRE2_SIZE_MAX: i32 = -1;
pub const PCRE2_CALLOUT_STARTMATCH: u32 = 1;
pub const PCRE2_CALLOUT_BACKTRACK: u32 = 2;
pub const PCRE2_LOCAL_WIDTH: u32 = 8;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const LY_PRI_ARRAY_COUNT_TYPE: &[u8; 3] = b"lu\0";
pub const LY_DATA_TYPE_COUNT: u32 = 20;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const LY_REV_SIZE: u32 = 11;
pub const LYS_UNKNOWN: u32 = 0;
pub const LYS_CONTAINER: u32 = 1;
pub const LYS_CHOICE: u32 = 2;
pub const LYS_LEAF: u32 = 4;
pub const LYS_LEAFLIST: u32 = 8;
pub const LYS_LIST: u32 = 16;
pub const LYS_ANYXML: u32 = 32;
pub const LYS_ANYDATA: u32 = 96;
pub const LYS_CASE: u32 = 128;
pub const LYS_RPC: u32 = 256;
pub const LYS_ACTION: u32 = 512;
pub const LYS_NOTIF: u32 = 1024;
pub const LYS_USES: u32 = 2048;
pub const LYS_INPUT: u32 = 4096;
pub const LYS_OUTPUT: u32 = 8192;
pub const LYS_GROUPING: u32 = 16384;
pub const LYS_AUGMENT: u32 = 32768;
pub const LYS_NODETYPE_MASK: u32 = 65535;
pub const LYSP_RESTR_PATTERN_ACK: u32 = 6;
pub const LYSP_RESTR_PATTERN_NACK: u32 = 21;
pub const LYS_DEV_NOT_SUPPORTED: u32 = 1;
pub const LYS_DEV_ADD: u32 = 2;
pub const LYS_DEV_DELETE: u32 = 3;
pub const LYS_DEV_REPLACE: u32 = 4;
pub const LYS_CONFIG_W: u32 = 1;
pub const LYS_CONFIG_R: u32 = 2;
pub const LYS_CONFIG_MASK: u32 = 3;
pub const LYS_STATUS_CURR: u32 = 4;
pub const LYS_STATUS_DEPRC: u32 = 8;
pub const LYS_STATUS_OBSLT: u32 = 16;
pub const LYS_STATUS_MASK: u32 = 28;
pub const LYS_MAND_TRUE: u32 = 32;
pub const LYS_MAND_FALSE: u32 = 64;
pub const LYS_MAND_MASK: u32 = 96;
pub const LYS_PRESENCE: u32 = 128;
pub const LYS_UNIQUE: u32 = 128;
pub const LYS_KEY: u32 = 256;
pub const LYS_KEYLESS: u32 = 512;
pub const LYS_DISABLED: u32 = 256;
pub const LYS_FENABLED: u32 = 32;
pub const LYS_ORDBY_SYSTEM: u32 = 128;
pub const LYS_ORDBY_USER: u32 = 64;
pub const LYS_ORDBY_MASK: u32 = 192;
pub const LYS_YINELEM_TRUE: u32 = 128;
pub const LYS_YINELEM_FALSE: u32 = 256;
pub const LYS_YINELEM_MASK: u32 = 384;
pub const LYS_USED_GRP: u32 = 1024;
pub const LYS_SET_VALUE: u32 = 512;
pub const LYS_SET_MIN: u32 = 512;
pub const LYS_SET_MAX: u32 = 1024;
pub const LYS_SET_BASE: u32 = 1;
pub const LYS_SET_BIT: u32 = 2;
pub const LYS_SET_ENUM: u32 = 4;
pub const LYS_SET_FRDIGITS: u32 = 8;
pub const LYS_SET_LENGTH: u32 = 16;
pub const LYS_SET_PATH: u32 = 32;
pub const LYS_SET_PATTERN: u32 = 64;
pub const LYS_SET_RANGE: u32 = 128;
pub const LYS_SET_TYPE: u32 = 256;
pub const LYS_SET_REQINST: u32 = 512;
pub const LYS_SET_DFLT: u32 = 512;
pub const LYS_SET_UNITS: u32 = 1024;
pub const LYS_SET_CONFIG: u32 = 2048;
pub const LYS_SINGLEQUOTED: u32 = 256;
pub const LYS_DOUBLEQUOTED: u32 = 512;
pub const LYS_YIN_ATTR: u32 = 1024;
pub const LYS_YIN_ARGUMENT: u32 = 2048;
pub const LYS_INTERNAL: u32 = 4096;
pub const LYS_IS_ENUM: u32 = 512;
pub const LYS_IS_INPUT: u32 = 4096;
pub const LYS_IS_OUTPUT: u32 = 8192;
pub const LYS_IS_NOTIF: u32 = 16384;
pub const LYS_FLAGS_COMPILED_MASK: u32 = 255;
pub const LYS_IFF_NOT: u32 = 0;
pub const LYS_IFF_AND: u32 = 1;
pub const LYS_IFF_OR: u32 = 2;
pub const LYS_IFF_F: u32 = 3;
pub const LYS_NODE_HASH_COUNT: u32 = 4;
pub const LYS_FIND_XP_SCHEMA: u32 = 8;
pub const LYS_FIND_XP_OUTPUT: u32 = 16;
pub const LYS_FIND_NO_MATCH_ERROR: u32 = 64;
pub const LYS_FIND_SCHEMAMOUNT: u32 = 512;
pub const LYS_MOD_LATEST_REV: u32 = 1;
pub const LYS_MOD_LATEST_SEARCHDIRS: u32 = 2;
pub const LYS_MOD_IMPORTED_REV: u32 = 4;
pub const LYS_MOD_LATEST_IMPCLB: u32 = 8;
pub const LYS_GETNEXT_WITHCHOICE: u32 = 1;
pub const LYS_GETNEXT_NOCHOICE: u32 = 2;
pub const LYS_GETNEXT_WITHCASE: u32 = 4;
pub const LYS_GETNEXT_INTONPCONT: u32 = 8;
pub const LYS_GETNEXT_OUTPUT: u32 = 16;
pub const LYS_GETNEXT_WITHSCHEMAMOUNT: u32 = 32;
pub const LYD_NODE_INNER: u32 = 1809;
pub const LYD_NODE_TERM: u32 = 12;
pub const LYD_NODE_ANY: u32 = 96;
pub const LYD_DEFAULT: u32 = 1;
pub const LYD_WHEN_TRUE: u32 = 2;
pub const LYD_NEW: u32 = 4;
pub const LYD_EXT: u32 = 8;
pub const LYD_HT_MIN_ITEMS: u32 = 4;
pub const LYD_VALHINT_STRING: u32 = 1;
pub const LYD_VALHINT_DECNUM: u32 = 2;
pub const LYD_VALHINT_OCTNUM: u32 = 4;
pub const LYD_VALHINT_HEXNUM: u32 = 8;
pub const LYD_VALHINT_NUM64: u32 = 16;
pub const LYD_VALHINT_BOOLEAN: u32 = 32;
pub const LYD_VALHINT_EMPTY: u32 = 64;
pub const LYD_VALHINT_STRING_DATATYPES: u32 = 128;
pub const LYD_NODEHINT_LIST: u32 = 128;
pub const LYD_NODEHINT_LEAFLIST: u32 = 256;
pub const LYD_NODEHINT_CONTAINER: u32 = 512;
pub const LYD_HINT_DATA: u32 = 1011;
pub const LYD_HINT_SCHEMA: u32 = 1023;
pub const LYD_NEW_VAL_OUTPUT: u32 = 1;
pub const LYD_NEW_VAL_STORE_ONLY: u32 = 2;
pub const LYD_NEW_VAL_BIN: u32 = 4;
pub const LYD_NEW_VAL_CANON: u32 = 8;
pub const LYD_NEW_META_CLEAR_DFLT: u32 = 16;
pub const LYD_NEW_PATH_UPDATE: u32 = 32;
pub const LYD_NEW_PATH_OPAQ: u32 = 64;
pub const LYD_NEW_PATH_WITH_OPAQ: u32 = 128;
pub const LYD_NEW_ANY_USE_VALUE: u32 = 256;
pub const LYD_IMPLICIT_NO_STATE: u32 = 1;
pub const LYD_IMPLICIT_NO_CONFIG: u32 = 2;
pub const LYD_IMPLICIT_OUTPUT: u32 = 4;
pub const LYD_IMPLICIT_NO_DEFAULTS: u32 = 8;
pub const LYD_COMPARE_FULL_RECURSION: u32 = 1;
pub const LYD_COMPARE_DEFAULTS: u32 = 2;
pub const LYD_COMPARE_OPAQ: u32 = 4;
pub const LYD_DUP_RECURSIVE: u32 = 1;
pub const LYD_DUP_NO_META: u32 = 2;
pub const LYD_DUP_WITH_PARENTS: u32 = 4;
pub const LYD_DUP_WITH_FLAGS: u32 = 8;
pub const LYD_DUP_NO_EXT: u32 = 16;
pub const LYD_DUP_WITH_PRIV: u32 = 32;
pub const LYD_DUP_NO_LYDS: u32 = 64;
pub const LYD_MERGE_DESTRUCT: u32 = 1;
pub const LYD_MERGE_DEFAULTS: u32 = 2;
pub const LYD_MERGE_WITH_FLAGS: u32 = 4;
pub const LYD_DIFF_DEFAULTS: u32 = 1;
pub const LYD_DIFF_META: u32 = 2;
pub const LYD_DIFF_MERGE_DEFAULTS: u32 = 1;
pub const LY_CTX_ALL_IMPLEMENTED: u32 = 1;
pub const LY_CTX_REF_IMPLEMENTED: u32 = 2;
pub const LY_CTX_NO_YANGLIBRARY: u32 = 4;
pub const LY_CTX_DISABLE_SEARCHDIRS: u32 = 8;
pub const LY_CTX_DISABLE_SEARCHDIR_CWD: u32 = 16;
pub const LY_CTX_PREFER_SEARCHDIRS: u32 = 32;
pub const LY_CTX_SET_PRIV_PARSED: u32 = 64;
pub const LY_CTX_EXPLICIT_COMPILE: u32 = 128;
pub const LY_CTX_ENABLE_IMP_FEATURES: u32 = 256;
pub const LY_CTX_LEAFREF_EXTENDED: u32 = 512;
pub const LY_CTX_LEAFREF_LINKING: u32 = 1024;
pub const LY_CTX_BUILTIN_PLUGINS_ONLY: u32 = 2048;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const LYD_PARSE_ONLY: u32 = 65536;
pub const LYD_PARSE_STRICT: u32 = 131072;
pub const LYD_PARSE_OPAQ: u32 = 262144;
pub const LYD_PARSE_NO_STATE: u32 = 524288;
pub const LYD_PARSE_LYB_MOD_UPDATE: u32 = 1048576;
pub const LYD_PARSE_ORDERED: u32 = 2097152;
pub const LYD_PARSE_SUBTREE: u32 = 4194304;
pub const LYD_PARSE_WHEN_TRUE: u32 = 8388608;
pub const LYD_PARSE_NO_NEW: u32 = 16777216;
pub const LYD_PARSE_STORE_ONLY: u32 = 33619968;
pub const LYD_PARSE_JSON_NULL: u32 = 67108864;
pub const LYD_PARSE_JSON_STRING_DATATYPES: u32 = 134217728;
pub const LYD_PARSE_OPTS_MASK: u32 = 4294901760;
pub const LYD_VALIDATE_NO_STATE: u32 = 1;
pub const LYD_VALIDATE_PRESENT: u32 = 2;
pub const LYD_VALIDATE_MULTI_ERROR: u32 = 4;
pub const LYD_VALIDATE_OPERATIONAL: u32 = 8;
pub const LYD_VALIDATE_NO_DEFAULTS: u32 = 16;
pub const LYD_VALIDATE_NOT_FINAL: u32 = 32;
pub const LYD_VALIDATE_OPTS_MASK: u32 = 65535;
pub const LYPLG_EXT_API_VERSION: u32 = 8;
pub const LY_STMT_NODE_MASK: u32 = 65535;
pub const LYS_COMPILE_GROUPING: u32 = 1;
pub const LYS_COMPILE_DISABLED: u32 = 2;
pub const LYS_COMPILE_NO_CONFIG: u32 = 4;
pub const LYS_COMPILE_NO_DISABLED: u32 = 8;
pub const LYS_COMPILE_RPC_INPUT: u32 = 4100;
pub const LYS_COMPILE_RPC_OUTPUT: u32 = 8196;
pub const LYS_COMPILE_NOTIFICATION: u32 = 16388;
pub const LY_PRINT_SHRINK: u32 = 2;
pub const LY_PATH_BEGIN_ABSOLUTE: u32 = 1;
pub const LY_PATH_BEGIN_EITHER: u32 = 2;
pub const LY_PATH_PREFIX_OPTIONAL: u32 = 16;
pub const LY_PATH_PREFIX_MANDATORY: u32 = 32;
pub const LY_PATH_PREFIX_FIRST: u32 = 64;
pub const LY_PATH_PREFIX_STRICT_INHERIT: u32 = 128;
pub const LY_PATH_PRED_KEYS: u32 = 256;
pub const LY_PATH_PRED_SIMPLE: u32 = 512;
pub const LY_PATH_PRED_LEAFREF: u32 = 1024;
pub const LY_PATH_OPER_INPUT: u32 = 1;
pub const LY_PATH_OPER_OUTPUT: u32 = 2;
pub const LY_PATH_TARGET_SINGLE: u32 = 16;
pub const LY_PATH_TARGET_MANY: u32 = 32;
pub const LYD_PRINT_WITHSIBLINGS: u32 = 1;
pub const LYD_PRINT_SHRINK: u32 = 2;
pub const LYD_PRINT_KEEPEMPTYCONT: u32 = 4;
pub const LYD_PRINT_WD_MASK: u32 = 240;
pub const LYD_PRINT_WD_EXPLICIT: u32 = 0;
pub const LYD_PRINT_WD_TRIM: u32 = 16;
pub const LYD_PRINT_WD_ALL: u32 = 32;
pub const LYD_PRINT_WD_ALL_TAG: u32 = 64;
pub const LYD_PRINT_WD_IMPL_TAG: u32 = 128;
pub const LYS_PRINT_SHRINK: u32 = 2;
pub const LYS_PRINT_NO_SUBSTMT: u32 = 16;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"]
        [::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ly_ctx {
    _unused: [u8; 0],
}
pub type ly_bool = u8;
pub mod LY_LOG_LEVEL {
    pub type Type = ::std::os::raw::c_uint;
    pub const LY_LLERR: Type = 0;
    pub const LY_LLWRN: Type = 1;
    pub const LY_LLVRB: Type = 2;
    pub const LY_LLDBG: Type = 3;
}
unsafe extern "C" {
    pub fn ly_log_level(level: LY_LOG_LEVEL::Type) -> LY_LOG_LEVEL::Type;
}
unsafe extern "C" {
    pub fn ly_log_options(opts: u32) -> u32;
}
unsafe extern "C" {
    pub fn ly_temp_log_options(opts: *mut u32) -> *mut u32;
}
unsafe extern "C" {
    pub fn ly_log_dbg_groups(dbg_groups: u32) -> u32;
}
pub type ly_log_clb = ::std::option::Option<
    unsafe extern "C" fn(
        level: LY_LOG_LEVEL::Type,
        msg: *const ::std::os::raw::c_char,
        data_path: *const ::std::os::raw::c_char,
        schema_path: *const ::std::os::raw::c_char,
        line: u64,
    ),
>;
unsafe extern "C" {
    pub fn ly_set_log_clb(clb: ly_log_clb);
}
unsafe extern "C" {
    pub fn ly_get_log_clb() -> ly_log_clb;
}
pub mod LY_ERR {
    pub type Type = ::std::os::raw::c_uint;
    pub const LY_SUCCESS: Type = 0;
    pub const LY_EMEM: Type = 1;
    pub const LY_ESYS: Type = 2;
    pub const LY_EINVAL: Type = 3;
    pub const LY_EEXIST: Type = 4;
    pub const LY_ENOTFOUND: Type = 5;
    pub const LY_EINT: Type = 6;
    pub const LY_EVALID: Type = 7;
    pub const LY_EDENIED: Type = 8;
    pub const LY_EINCOMPLETE: Type = 9;
    pub const LY_ERECOMPILE: Type = 10;
    pub const LY_ENOT: Type = 11;
    pub const LY_EOTHER: Type = 12;
    pub const LY_EPLUGIN: Type = 128;
}
pub mod LY_VECODE {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYVE_SUCCESS: Type = 0;
    pub const LYVE_SYNTAX: Type = 1;
    pub const LYVE_SYNTAX_YANG: Type = 2;
    pub const LYVE_SYNTAX_YIN: Type = 3;
    pub const LYVE_REFERENCE: Type = 4;
    pub const LYVE_XPATH: Type = 5;
    pub const LYVE_SEMANTICS: Type = 6;
    pub const LYVE_SYNTAX_XML: Type = 7;
    pub const LYVE_SYNTAX_JSON: Type = 8;
    pub const LYVE_DATA: Type = 9;
    pub const LYVE_OTHER: Type = 10;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ly_err_item {
    pub level: LY_LOG_LEVEL::Type,
    pub err: LY_ERR::Type,
    pub vecode: LY_VECODE::Type,
    pub msg: *mut ::std::os::raw::c_char,
    pub data_path: *mut ::std::os::raw::c_char,
    pub schema_path: *mut ::std::os::raw::c_char,
    pub line: u64,
    pub apptag: *mut ::std::os::raw::c_char,
    pub next: *mut ly_err_item,
    pub prev: *mut ly_err_item,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_err_item"][::std::mem::size_of::<ly_err_item>() - 72usize];
    ["Alignment of ly_err_item"]
        [::std::mem::align_of::<ly_err_item>() - 8usize];
    ["Offset of field: ly_err_item::level"]
        [::std::mem::offset_of!(ly_err_item, level) - 0usize];
    ["Offset of field: ly_err_item::err"]
        [::std::mem::offset_of!(ly_err_item, err) - 4usize];
    ["Offset of field: ly_err_item::vecode"]
        [::std::mem::offset_of!(ly_err_item, vecode) - 8usize];
    ["Offset of field: ly_err_item::msg"]
        [::std::mem::offset_of!(ly_err_item, msg) - 16usize];
    ["Offset of field: ly_err_item::data_path"]
        [::std::mem::offset_of!(ly_err_item, data_path) - 24usize];
    ["Offset of field: ly_err_item::schema_path"]
        [::std::mem::offset_of!(ly_err_item, schema_path) - 32usize];
    ["Offset of field: ly_err_item::line"]
        [::std::mem::offset_of!(ly_err_item, line) - 40usize];
    ["Offset of field: ly_err_item::apptag"]
        [::std::mem::offset_of!(ly_err_item, apptag) - 48usize];
    ["Offset of field: ly_err_item::next"]
        [::std::mem::offset_of!(ly_err_item, next) - 56usize];
    ["Offset of field: ly_err_item::prev"]
        [::std::mem::offset_of!(ly_err_item, prev) - 64usize];
};
impl Default for ly_err_item {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn ly_strerr(err: LY_ERR::Type) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ly_strvecode(
        vecode: LY_VECODE::Type,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ly_last_logmsg() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ly_err_first(ctx: *const ly_ctx) -> *const ly_err_item;
}
unsafe extern "C" {
    pub fn ly_err_last(ctx: *const ly_ctx) -> *const ly_err_item;
}
unsafe extern "C" {
    pub fn ly_err_print(ctx: *const ly_ctx, eitem: *const ly_err_item);
}
unsafe extern "C" {
    pub fn ly_err_clean(ctx: *mut ly_ctx, eitem: *mut ly_err_item);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ly_in {
    _unused: [u8; 0],
}
pub mod LYS_INFORMAT {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYS_IN_UNKNOWN: Type = 0;
    pub const LYS_IN_YANG: Type = 1;
    pub const LYS_IN_YIN: Type = 3;
}
unsafe extern "C" {
    pub fn lys_parse(
        ctx: *mut ly_ctx,
        in_: *mut ly_in,
        format: LYS_INFORMAT::Type,
        features: *mut *const ::std::os::raw::c_char,
        module: *mut *mut lys_module,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_parse_mem(
        ctx: *mut ly_ctx,
        data: *const ::std::os::raw::c_char,
        format: LYS_INFORMAT::Type,
        module: *mut *mut lys_module,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_parse_fd(
        ctx: *mut ly_ctx,
        fd: ::std::os::raw::c_int,
        format: LYS_INFORMAT::Type,
        module: *mut *mut lys_module,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_parse_path(
        ctx: *mut ly_ctx,
        path: *const ::std::os::raw::c_char,
        format: LYS_INFORMAT::Type,
        module: *mut *mut lys_module,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_search_localfile(
        searchpaths: *const *const ::std::os::raw::c_char,
        cwd: ly_bool,
        name: *const ::std::os::raw::c_char,
        revision: *const ::std::os::raw::c_char,
        localfile: *mut *mut ::std::os::raw::c_char,
        format: *mut LYS_INFORMAT::Type,
    ) -> LY_ERR::Type;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"]
        [::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"]
        [::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
impl Default for iovec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"]
        [::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"]
        [::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"]
        [::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"]
        [::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"]
        [::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"]
        [::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"][::std::mem::align_of::<
        __atomic_wide_counter__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"][::std::mem::offset_of!(
        __atomic_wide_counter__bindgen_ty_1,
        __low
    ) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"][::std::mem::offset_of!(
        __atomic_wide_counter__bindgen_ty_1,
        __high
    )
        - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"]
        [::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
impl Default for __atomic_wide_counter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"]
        [::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
impl Default for __pthread_internal_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"]
        [::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"]
        [::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"]
        [::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"][::std::mem::offset_of!(
        __pthread_rwlock_arch_t,
        __wrphase_futex
    ) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"][::std::mem::offset_of!(
        __pthread_rwlock_arch_t,
        __writers_futex
    ) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"][::std::mem::offset_of!(
        __pthread_rwlock_arch_t,
        __cur_writer
    ) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"][::std::mem::offset_of!(
        __pthread_rwlock_arch_t,
        __rwelision
    ) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"]
        [::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"]
        [::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
impl Default for __pthread_cond_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"]
        [::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"]
        [::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"]
        [::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"]
        [::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"]
        [::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"]
        [::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
impl Default for pthread_condattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"]
        [::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"]
        [::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"]
        [::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"]
        [::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"]
        [::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"]
        [::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"]
        [::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"]
        [::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"]
        [::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"]
        [::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"]
        [::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"]
        [::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
impl Default for pthread_barrier_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"]
        [::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type socklen_t = __socklen_t;
pub mod __socket_type {
    pub type Type = ::std::os::raw::c_uint;
    pub const SOCK_STREAM: Type = 1;
    pub const SOCK_DGRAM: Type = 2;
    pub const SOCK_RAW: Type = 3;
    pub const SOCK_RDM: Type = 4;
    pub const SOCK_SEQPACKET: Type = 5;
    pub const SOCK_DCCP: Type = 6;
    pub const SOCK_PACKET: Type = 10;
    pub const SOCK_CLOEXEC: Type = 524288;
    pub const SOCK_NONBLOCK: Type = 2048;
}
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"]
        [::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"]
        [::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"]
        [::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"]
        [::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 0usize];
    ["Offset of field: sockaddr_storage::__ss_padding"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_padding) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 120usize];
};
impl Default for sockaddr_storage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub mod _bindgen_ty_1 {
    pub type Type = ::std::os::raw::c_uint;
    pub const MSG_OOB: Type = 1;
    pub const MSG_PEEK: Type = 2;
    pub const MSG_DONTROUTE: Type = 4;
    pub const MSG_CTRUNC: Type = 8;
    pub const MSG_PROXY: Type = 16;
    pub const MSG_TRUNC: Type = 32;
    pub const MSG_DONTWAIT: Type = 64;
    pub const MSG_EOR: Type = 128;
    pub const MSG_WAITALL: Type = 256;
    pub const MSG_FIN: Type = 512;
    pub const MSG_SYN: Type = 1024;
    pub const MSG_CONFIRM: Type = 2048;
    pub const MSG_RST: Type = 4096;
    pub const MSG_ERRQUEUE: Type = 8192;
    pub const MSG_NOSIGNAL: Type = 16384;
    pub const MSG_MORE: Type = 32768;
    pub const MSG_WAITFORONE: Type = 65536;
    pub const MSG_BATCH: Type = 262144;
    pub const MSG_ZEROCOPY: Type = 67108864;
    pub const MSG_FASTOPEN: Type = 536870912;
    pub const MSG_CMSG_CLOEXEC: Type = 1073741824;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 56usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"]
        [::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"]
        [::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"]
        [::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"]
        [::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"]
        [::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"]
        [::std::mem::offset_of!(msghdr, msg_flags) - 48usize];
};
impl Default for msghdr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 16usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 8usize];
    ["Offset of field: cmsghdr::cmsg_len"]
        [::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"]
        [::std::mem::offset_of!(cmsghdr, cmsg_level) - 8usize];
    ["Offset of field: cmsghdr::cmsg_type"]
        [::std::mem::offset_of!(cmsghdr, cmsg_type) - 12usize];
    ["Offset of field: cmsghdr::__cmsg_data"]
        [::std::mem::offset_of!(cmsghdr, __cmsg_data) - 16usize];
};
unsafe extern "C" {
    pub fn __cmsg_nxthdr(
        __mhdr: *mut msghdr,
        __cmsg: *mut cmsghdr,
    ) -> *mut cmsghdr;
}
pub mod _bindgen_ty_2 {
    pub type Type = ::std::os::raw::c_uint;
    pub const SCM_RIGHTS: Type = 1;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"]
        [::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"]
        [::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"]
        [::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"]
        [::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"]
        [::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"]
        [::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osockaddr"][::std::mem::size_of::<osockaddr>() - 16usize];
    ["Alignment of osockaddr"][::std::mem::align_of::<osockaddr>() - 2usize];
    ["Offset of field: osockaddr::sa_family"]
        [::std::mem::offset_of!(osockaddr, sa_family) - 0usize];
    ["Offset of field: osockaddr::sa_data"]
        [::std::mem::offset_of!(osockaddr, sa_data) - 2usize];
};
pub mod _bindgen_ty_3 {
    pub type Type = ::std::os::raw::c_uint;
    pub const SHUT_RD: Type = 0;
    pub const SHUT_WR: Type = 1;
    pub const SHUT_RDWR: Type = 2;
}
unsafe extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn listen(
        __fd: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"]
        [::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_opts"][::std::mem::size_of::<ip_opts>() - 44usize];
    ["Alignment of ip_opts"][::std::mem::align_of::<ip_opts>() - 4usize];
    ["Offset of field: ip_opts::ip_dst"]
        [::std::mem::offset_of!(ip_opts, ip_dst) - 0usize];
    ["Offset of field: ip_opts::ip_opts"]
        [::std::mem::offset_of!(ip_opts, ip_opts) - 4usize];
};
impl Default for ip_opts {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreqn"][::std::mem::size_of::<ip_mreqn>() - 12usize];
    ["Alignment of ip_mreqn"][::std::mem::align_of::<ip_mreqn>() - 4usize];
    ["Offset of field: ip_mreqn::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreqn, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreqn::imr_address"]
        [::std::mem::offset_of!(ip_mreqn, imr_address) - 4usize];
    ["Offset of field: ip_mreqn::imr_ifindex"]
        [::std::mem::offset_of!(ip_mreqn, imr_ifindex) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo"][::std::mem::size_of::<in_pktinfo>() - 12usize];
    ["Alignment of in_pktinfo"][::std::mem::align_of::<in_pktinfo>() - 4usize];
    ["Offset of field: in_pktinfo::ipi_ifindex"]
        [::std::mem::offset_of!(in_pktinfo, ipi_ifindex) - 0usize];
    ["Offset of field: in_pktinfo::ipi_spec_dst"]
        [::std::mem::offset_of!(in_pktinfo, ipi_spec_dst) - 4usize];
    ["Offset of field: in_pktinfo::ipi_addr"]
        [::std::mem::offset_of!(in_pktinfo, ipi_addr) - 8usize];
};
pub mod _bindgen_ty_4 {
    pub type Type = ::std::os::raw::c_uint;
    pub const IPPROTO_IP: Type = 0;
    pub const IPPROTO_ICMP: Type = 1;
    pub const IPPROTO_IGMP: Type = 2;
    pub const IPPROTO_IPIP: Type = 4;
    pub const IPPROTO_TCP: Type = 6;
    pub const IPPROTO_EGP: Type = 8;
    pub const IPPROTO_PUP: Type = 12;
    pub const IPPROTO_UDP: Type = 17;
    pub const IPPROTO_IDP: Type = 22;
    pub const IPPROTO_TP: Type = 29;
    pub const IPPROTO_DCCP: Type = 33;
    pub const IPPROTO_IPV6: Type = 41;
    pub const IPPROTO_RSVP: Type = 46;
    pub const IPPROTO_GRE: Type = 47;
    pub const IPPROTO_ESP: Type = 50;
    pub const IPPROTO_AH: Type = 51;
    pub const IPPROTO_MTP: Type = 92;
    pub const IPPROTO_BEETPH: Type = 94;
    pub const IPPROTO_ENCAP: Type = 98;
    pub const IPPROTO_PIM: Type = 103;
    pub const IPPROTO_COMP: Type = 108;
    pub const IPPROTO_SCTP: Type = 132;
    pub const IPPROTO_UDPLITE: Type = 136;
    pub const IPPROTO_MPLS: Type = 137;
    pub const IPPROTO_ETHERNET: Type = 143;
    pub const IPPROTO_RAW: Type = 255;
    pub const IPPROTO_MPTCP: Type = 262;
    pub const IPPROTO_MAX: Type = 263;
}
pub mod _bindgen_ty_5 {
    pub type Type = ::std::os::raw::c_uint;
    pub const IPPROTO_HOPOPTS: Type = 0;
    pub const IPPROTO_ROUTING: Type = 43;
    pub const IPPROTO_FRAGMENT: Type = 44;
    pub const IPPROTO_ICMPV6: Type = 58;
    pub const IPPROTO_NONE: Type = 59;
    pub const IPPROTO_DSTOPTS: Type = 60;
    pub const IPPROTO_MH: Type = 135;
}
pub type in_port_t = u16;
pub mod _bindgen_ty_6 {
    pub type Type = ::std::os::raw::c_uint;
    pub const IPPORT_ECHO: Type = 7;
    pub const IPPORT_DISCARD: Type = 9;
    pub const IPPORT_SYSTAT: Type = 11;
    pub const IPPORT_DAYTIME: Type = 13;
    pub const IPPORT_NETSTAT: Type = 15;
    pub const IPPORT_FTP: Type = 21;
    pub const IPPORT_TELNET: Type = 23;
    pub const IPPORT_SMTP: Type = 25;
    pub const IPPORT_TIMESERVER: Type = 37;
    pub const IPPORT_NAMESERVER: Type = 42;
    pub const IPPORT_WHOIS: Type = 43;
    pub const IPPORT_MTP: Type = 57;
    pub const IPPORT_TFTP: Type = 69;
    pub const IPPORT_RJE: Type = 77;
    pub const IPPORT_FINGER: Type = 79;
    pub const IPPORT_TTYLINK: Type = 87;
    pub const IPPORT_SUPDUP: Type = 95;
    pub const IPPORT_EXECSERVER: Type = 512;
    pub const IPPORT_LOGINSERVER: Type = 513;
    pub const IPPORT_CMDSERVER: Type = 514;
    pub const IPPORT_EFSSERVER: Type = 520;
    pub const IPPORT_BIFFUDP: Type = 512;
    pub const IPPORT_WHOSERVER: Type = 513;
    pub const IPPORT_ROUTESERVER: Type = 520;
    pub const IPPORT_RESERVED: Type = 1024;
    pub const IPPORT_USERRESERVED: Type = 5000;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"]
        [::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
impl Default for in6_addr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__in6_u"]
        [::std::mem::offset_of!(in6_addr, __in6_u) - 0usize];
};
impl Default for in6_addr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub static in6addr_any: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"]
        [::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 0usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"]
        [::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
impl Default for sockaddr_in6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"]
        [::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"]
        [::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 4usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
impl Default for ipv6_mreq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 136usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 8usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"]
        [::std::mem::offset_of!(group_req, gr_group) - 8usize];
};
impl Default for group_req {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"]
        [::std::mem::size_of::<group_source_req>() - 264usize];
    ["Alignment of group_source_req"]
        [::std::mem::align_of::<group_source_req>() - 8usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 8usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 136usize];
};
impl Default for group_source_req {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_msfilter"][::std::mem::size_of::<ip_msfilter>() - 20usize];
    ["Alignment of ip_msfilter"]
        [::std::mem::align_of::<ip_msfilter>() - 4usize];
    ["Offset of field: ip_msfilter::imsf_multiaddr"]
        [::std::mem::offset_of!(ip_msfilter, imsf_multiaddr) - 0usize];
    ["Offset of field: ip_msfilter::imsf_interface"]
        [::std::mem::offset_of!(ip_msfilter, imsf_interface) - 4usize];
    ["Offset of field: ip_msfilter::imsf_fmode"]
        [::std::mem::offset_of!(ip_msfilter, imsf_fmode) - 8usize];
    ["Offset of field: ip_msfilter::imsf_numsrc"]
        [::std::mem::offset_of!(ip_msfilter, imsf_numsrc) - 12usize];
    ["Offset of field: ip_msfilter::imsf_slist"]
        [::std::mem::offset_of!(ip_msfilter, imsf_slist) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_filter"][::std::mem::size_of::<group_filter>() - 272usize];
    ["Alignment of group_filter"]
        [::std::mem::align_of::<group_filter>() - 8usize];
    ["Offset of field: group_filter::gf_interface"]
        [::std::mem::offset_of!(group_filter, gf_interface) - 0usize];
    ["Offset of field: group_filter::gf_group"]
        [::std::mem::offset_of!(group_filter, gf_group) - 8usize];
    ["Offset of field: group_filter::gf_fmode"]
        [::std::mem::offset_of!(group_filter, gf_fmode) - 136usize];
    ["Offset of field: group_filter::gf_numsrc"]
        [::std::mem::offset_of!(group_filter, gf_numsrc) - 140usize];
    ["Offset of field: group_filter::gf_slist"]
        [::std::mem::offset_of!(group_filter, gf_slist) - 144usize];
};
impl Default for group_filter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
unsafe extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
unsafe extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
unsafe extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
unsafe extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
}
unsafe extern "C" {
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __len: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_aton(
        __cp: *const ::std::os::raw::c_char,
        __inp: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet_neta(
        __net: in_addr_t,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_net_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __bits: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_net_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet_nsap_addr(
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_uchar,
        __len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn inet_nsap_ntoa(
        __len: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_uchar,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"]
        [::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"]
        [::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"]
        [::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"]
        [::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"]
        [::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"]
        [::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(
        __nptr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(
        __nptr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setstate(
        __statebuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"]
        [::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"]
        [::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"]
        [::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"]
        [::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
impl Default for random_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn random_r(
        __buf: *mut random_data,
        __result: *mut i32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(
        __xsubi: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn jrand48(
        __xsubi: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn seed48(
        __seed16v: *mut ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"]
        [::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"]
        [::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"]
        [::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"]
        [::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn malloc(
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn alloca(
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(
        __string: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mktemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn system(
        __command: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
        -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn div(
        __numer: ::std::os::raw::c_int,
        __denom: ::std::os::raw::c_int,
    ) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(
        __numer: ::std::os::raw::c_long,
        __denom: ::std::os::raw::c_long,
    ) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb(
        __s: *mut ::std::os::raw::c_char,
        __wchar: wchar_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(
        __response: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(
        __loadavg: *mut f64,
        __nelem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"]
        [::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"]
        [::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type PCRE2_UCHAR8 = u8;
pub type PCRE2_UCHAR16 = u16;
pub type PCRE2_UCHAR32 = u32;
pub type PCRE2_SPTR8 = *const PCRE2_UCHAR8;
pub type PCRE2_SPTR16 = *const PCRE2_UCHAR16;
pub type PCRE2_SPTR32 = *const PCRE2_UCHAR32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_general_context_8 {
    _unused: [u8; 0],
}
pub type pcre2_general_context_8 = pcre2_real_general_context_8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_compile_context_8 {
    _unused: [u8; 0],
}
pub type pcre2_compile_context_8 = pcre2_real_compile_context_8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_match_context_8 {
    _unused: [u8; 0],
}
pub type pcre2_match_context_8 = pcre2_real_match_context_8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_convert_context_8 {
    _unused: [u8; 0],
}
pub type pcre2_convert_context_8 = pcre2_real_convert_context_8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_code_8 {
    _unused: [u8; 0],
}
pub type pcre2_code_8 = pcre2_real_code_8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_match_data_8 {
    _unused: [u8; 0],
}
pub type pcre2_match_data_8 = pcre2_real_match_data_8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_jit_stack_8 {
    _unused: [u8; 0],
}
pub type pcre2_jit_stack_8 = pcre2_real_jit_stack_8;
pub type pcre2_jit_callback_8 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut pcre2_jit_stack_8,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_callout_block_8 {
    pub version: u32,
    pub callout_number: u32,
    pub capture_top: u32,
    pub capture_last: u32,
    pub offset_vector: *mut usize,
    pub mark: PCRE2_SPTR8,
    pub subject: PCRE2_SPTR8,
    pub subject_length: usize,
    pub start_match: usize,
    pub current_position: usize,
    pub pattern_position: usize,
    pub next_item_length: usize,
    pub callout_string_offset: usize,
    pub callout_string_length: usize,
    pub callout_string: PCRE2_SPTR8,
    pub callout_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcre2_callout_block_8"]
        [::std::mem::size_of::<pcre2_callout_block_8>() - 112usize];
    ["Alignment of pcre2_callout_block_8"]
        [::std::mem::align_of::<pcre2_callout_block_8>() - 8usize];
    ["Offset of field: pcre2_callout_block_8::version"]
        [::std::mem::offset_of!(pcre2_callout_block_8, version) - 0usize];
    ["Offset of field: pcre2_callout_block_8::callout_number"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        callout_number
    ) - 4usize];
    ["Offset of field: pcre2_callout_block_8::capture_top"]
        [::std::mem::offset_of!(pcre2_callout_block_8, capture_top) - 8usize];
    ["Offset of field: pcre2_callout_block_8::capture_last"]
        [::std::mem::offset_of!(pcre2_callout_block_8, capture_last) - 12usize];
    ["Offset of field: pcre2_callout_block_8::offset_vector"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        offset_vector
    ) - 16usize];
    ["Offset of field: pcre2_callout_block_8::mark"]
        [::std::mem::offset_of!(pcre2_callout_block_8, mark) - 24usize];
    ["Offset of field: pcre2_callout_block_8::subject"]
        [::std::mem::offset_of!(pcre2_callout_block_8, subject) - 32usize];
    ["Offset of field: pcre2_callout_block_8::subject_length"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        subject_length
    ) - 40usize];
    ["Offset of field: pcre2_callout_block_8::start_match"]
        [::std::mem::offset_of!(pcre2_callout_block_8, start_match) - 48usize];
    ["Offset of field: pcre2_callout_block_8::current_position"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        current_position
    ) - 56usize];
    ["Offset of field: pcre2_callout_block_8::pattern_position"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        pattern_position
    ) - 64usize];
    ["Offset of field: pcre2_callout_block_8::next_item_length"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        next_item_length
    ) - 72usize];
    ["Offset of field: pcre2_callout_block_8::callout_string_offset"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        callout_string_offset
    )
        - 80usize];
    ["Offset of field: pcre2_callout_block_8::callout_string_length"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        callout_string_length
    )
        - 88usize];
    ["Offset of field: pcre2_callout_block_8::callout_string"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        callout_string
    ) - 96usize];
    ["Offset of field: pcre2_callout_block_8::callout_flags"][::std::mem::offset_of!(
        pcre2_callout_block_8,
        callout_flags
    ) - 104usize];
};
impl Default for pcre2_callout_block_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_callout_enumerate_block_8 {
    pub version: u32,
    pub pattern_position: usize,
    pub next_item_length: usize,
    pub callout_number: u32,
    pub callout_string_offset: usize,
    pub callout_string_length: usize,
    pub callout_string: PCRE2_SPTR8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcre2_callout_enumerate_block_8"]
        [::std::mem::size_of::<pcre2_callout_enumerate_block_8>() - 56usize];
    ["Alignment of pcre2_callout_enumerate_block_8"]
        [::std::mem::align_of::<pcre2_callout_enumerate_block_8>() - 8usize];
    ["Offset of field: pcre2_callout_enumerate_block_8::version"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_8,
        version
    ) - 0usize];
    ["Offset of field: pcre2_callout_enumerate_block_8::pattern_position"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_8,
        pattern_position
    )
        - 8usize];
    ["Offset of field: pcre2_callout_enumerate_block_8::next_item_length"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_8,
        next_item_length
    )
        - 16usize];
    ["Offset of field: pcre2_callout_enumerate_block_8::callout_number"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_8,
        callout_number
    )
        - 24usize];
    ["Offset of field: pcre2_callout_enumerate_block_8::callout_string_offset"]
        [::std::mem::offset_of!(
            pcre2_callout_enumerate_block_8,
            callout_string_offset
        ) - 32usize];
    ["Offset of field: pcre2_callout_enumerate_block_8::callout_string_length"]
        [::std::mem::offset_of!(
            pcre2_callout_enumerate_block_8,
            callout_string_length
        ) - 40usize];
    ["Offset of field: pcre2_callout_enumerate_block_8::callout_string"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_8,
        callout_string
    )
        - 48usize];
};
impl Default for pcre2_callout_enumerate_block_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_substitute_callout_block_8 {
    pub version: u32,
    pub input: PCRE2_SPTR8,
    pub output: PCRE2_SPTR8,
    pub output_offsets: [usize; 2usize],
    pub ovector: *mut usize,
    pub oveccount: u32,
    pub subscount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcre2_substitute_callout_block_8"]
        [::std::mem::size_of::<pcre2_substitute_callout_block_8>() - 56usize];
    ["Alignment of pcre2_substitute_callout_block_8"]
        [::std::mem::align_of::<pcre2_substitute_callout_block_8>() - 8usize];
    ["Offset of field: pcre2_substitute_callout_block_8::version"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_8,
        version
    ) - 0usize];
    ["Offset of field: pcre2_substitute_callout_block_8::input"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_8,
        input
    ) - 8usize];
    ["Offset of field: pcre2_substitute_callout_block_8::output"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_8,
        output
    ) - 16usize];
    ["Offset of field: pcre2_substitute_callout_block_8::output_offsets"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_8,
        output_offsets
    )
        - 24usize];
    ["Offset of field: pcre2_substitute_callout_block_8::ovector"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_8,
        ovector
    ) - 40usize];
    ["Offset of field: pcre2_substitute_callout_block_8::oveccount"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_8,
        oveccount
    )
        - 48usize];
    ["Offset of field: pcre2_substitute_callout_block_8::subscount"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_8,
        subscount
    )
        - 52usize];
};
impl Default for pcre2_substitute_callout_block_8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn pcre2_config_8(
        arg1: u32,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_general_context_copy_8(
        arg1: *mut pcre2_general_context_8,
    ) -> *mut pcre2_general_context_8;
}
unsafe extern "C" {
    pub fn pcre2_general_context_create_8(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut pcre2_general_context_8;
}
unsafe extern "C" {
    pub fn pcre2_general_context_free_8(arg1: *mut pcre2_general_context_8);
}
unsafe extern "C" {
    pub fn pcre2_compile_context_copy_8(
        arg1: *mut pcre2_compile_context_8,
    ) -> *mut pcre2_compile_context_8;
}
unsafe extern "C" {
    pub fn pcre2_compile_context_create_8(
        arg1: *mut pcre2_general_context_8,
    ) -> *mut pcre2_compile_context_8;
}
unsafe extern "C" {
    pub fn pcre2_compile_context_free_8(arg1: *mut pcre2_compile_context_8);
}
unsafe extern "C" {
    pub fn pcre2_set_bsr_8(
        arg1: *mut pcre2_compile_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_character_tables_8(
        arg1: *mut pcre2_compile_context_8,
        arg2: *const u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_compile_extra_options_8(
        arg1: *mut pcre2_compile_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_max_pattern_length_8(
        arg1: *mut pcre2_compile_context_8,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_newline_8(
        arg1: *mut pcre2_compile_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_parens_nest_limit_8(
        arg1: *mut pcre2_compile_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_compile_recursion_guard_8(
        arg1: *mut pcre2_compile_context_8,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: u32,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_convert_context_copy_8(
        arg1: *mut pcre2_convert_context_8,
    ) -> *mut pcre2_convert_context_8;
}
unsafe extern "C" {
    pub fn pcre2_convert_context_create_8(
        arg1: *mut pcre2_general_context_8,
    ) -> *mut pcre2_convert_context_8;
}
unsafe extern "C" {
    pub fn pcre2_convert_context_free_8(arg1: *mut pcre2_convert_context_8);
}
unsafe extern "C" {
    pub fn pcre2_set_glob_escape_8(
        arg1: *mut pcre2_convert_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_glob_separator_8(
        arg1: *mut pcre2_convert_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_pattern_convert_8(
        arg1: PCRE2_SPTR8,
        arg2: usize,
        arg3: u32,
        arg4: *mut *mut PCRE2_UCHAR8,
        arg5: *mut usize,
        arg6: *mut pcre2_convert_context_8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_converted_pattern_free_8(arg1: *mut PCRE2_UCHAR8);
}
unsafe extern "C" {
    pub fn pcre2_match_context_copy_8(
        arg1: *mut pcre2_match_context_8,
    ) -> *mut pcre2_match_context_8;
}
unsafe extern "C" {
    pub fn pcre2_match_context_create_8(
        arg1: *mut pcre2_general_context_8,
    ) -> *mut pcre2_match_context_8;
}
unsafe extern "C" {
    pub fn pcre2_match_context_free_8(arg1: *mut pcre2_match_context_8);
}
unsafe extern "C" {
    pub fn pcre2_set_callout_8(
        arg1: *mut pcre2_match_context_8,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pcre2_callout_block_8,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_substitute_callout_8(
        arg1: *mut pcre2_match_context_8,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pcre2_substitute_callout_block_8,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_depth_limit_8(
        arg1: *mut pcre2_match_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_heap_limit_8(
        arg1: *mut pcre2_match_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_match_limit_8(
        arg1: *mut pcre2_match_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_offset_limit_8(
        arg1: *mut pcre2_match_context_8,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_recursion_limit_8(
        arg1: *mut pcre2_match_context_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_recursion_memory_management_8(
        arg1: *mut pcre2_match_context_8,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_compile_8(
        arg1: PCRE2_SPTR8,
        arg2: usize,
        arg3: u32,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut usize,
        arg6: *mut pcre2_compile_context_8,
    ) -> *mut pcre2_code_8;
}
unsafe extern "C" {
    pub fn pcre2_code_free_8(arg1: *mut pcre2_code_8);
}
unsafe extern "C" {
    pub fn pcre2_code_copy_8(arg1: *const pcre2_code_8) -> *mut pcre2_code_8;
}
unsafe extern "C" {
    pub fn pcre2_code_copy_with_tables_8(
        arg1: *const pcre2_code_8,
    ) -> *mut pcre2_code_8;
}
unsafe extern "C" {
    pub fn pcre2_pattern_info_8(
        arg1: *const pcre2_code_8,
        arg2: u32,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_callout_enumerate_8(
        arg1: *const pcre2_code_8,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pcre2_callout_enumerate_block_8,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_match_data_create_8(
        arg1: u32,
        arg2: *mut pcre2_general_context_8,
    ) -> *mut pcre2_match_data_8;
}
unsafe extern "C" {
    pub fn pcre2_match_data_create_from_pattern_8(
        arg1: *const pcre2_code_8,
        arg2: *mut pcre2_general_context_8,
    ) -> *mut pcre2_match_data_8;
}
unsafe extern "C" {
    pub fn pcre2_dfa_match_8(
        arg1: *const pcre2_code_8,
        arg2: PCRE2_SPTR8,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_8,
        arg7: *mut pcre2_match_context_8,
        arg8: *mut ::std::os::raw::c_int,
        arg9: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_match_8(
        arg1: *const pcre2_code_8,
        arg2: PCRE2_SPTR8,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_8,
        arg7: *mut pcre2_match_context_8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_match_data_free_8(arg1: *mut pcre2_match_data_8);
}
unsafe extern "C" {
    pub fn pcre2_get_mark_8(arg1: *mut pcre2_match_data_8) -> PCRE2_SPTR8;
}
unsafe extern "C" {
    pub fn pcre2_get_match_data_size_8(arg1: *mut pcre2_match_data_8) -> usize;
}
unsafe extern "C" {
    pub fn pcre2_get_ovector_count_8(arg1: *mut pcre2_match_data_8) -> u32;
}
unsafe extern "C" {
    pub fn pcre2_get_ovector_pointer_8(
        arg1: *mut pcre2_match_data_8,
    ) -> *mut usize;
}
unsafe extern "C" {
    pub fn pcre2_get_startchar_8(arg1: *mut pcre2_match_data_8) -> usize;
}
unsafe extern "C" {
    pub fn pcre2_substring_copy_byname_8(
        arg1: *mut pcre2_match_data_8,
        arg2: PCRE2_SPTR8,
        arg3: *mut PCRE2_UCHAR8,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_copy_bynumber_8(
        arg1: *mut pcre2_match_data_8,
        arg2: u32,
        arg3: *mut PCRE2_UCHAR8,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_free_8(arg1: *mut PCRE2_UCHAR8);
}
unsafe extern "C" {
    pub fn pcre2_substring_get_byname_8(
        arg1: *mut pcre2_match_data_8,
        arg2: PCRE2_SPTR8,
        arg3: *mut *mut PCRE2_UCHAR8,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_get_bynumber_8(
        arg1: *mut pcre2_match_data_8,
        arg2: u32,
        arg3: *mut *mut PCRE2_UCHAR8,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_length_byname_8(
        arg1: *mut pcre2_match_data_8,
        arg2: PCRE2_SPTR8,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_length_bynumber_8(
        arg1: *mut pcre2_match_data_8,
        arg2: u32,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_nametable_scan_8(
        arg1: *const pcre2_code_8,
        arg2: PCRE2_SPTR8,
        arg3: *mut PCRE2_SPTR8,
        arg4: *mut PCRE2_SPTR8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_number_from_name_8(
        arg1: *const pcre2_code_8,
        arg2: PCRE2_SPTR8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_list_free_8(arg1: *mut PCRE2_SPTR8);
}
unsafe extern "C" {
    pub fn pcre2_substring_list_get_8(
        arg1: *mut pcre2_match_data_8,
        arg2: *mut *mut *mut PCRE2_UCHAR8,
        arg3: *mut *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_serialize_encode_8(
        arg1: *mut *const pcre2_code_8,
        arg2: i32,
        arg3: *mut *mut u8,
        arg4: *mut usize,
        arg5: *mut pcre2_general_context_8,
    ) -> i32;
}
unsafe extern "C" {
    pub fn pcre2_serialize_decode_8(
        arg1: *mut *mut pcre2_code_8,
        arg2: i32,
        arg3: *const u8,
        arg4: *mut pcre2_general_context_8,
    ) -> i32;
}
unsafe extern "C" {
    pub fn pcre2_serialize_get_number_of_codes_8(arg1: *const u8) -> i32;
}
unsafe extern "C" {
    pub fn pcre2_serialize_free_8(arg1: *mut u8);
}
unsafe extern "C" {
    pub fn pcre2_substitute_8(
        arg1: *const pcre2_code_8,
        arg2: PCRE2_SPTR8,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_8,
        arg7: *mut pcre2_match_context_8,
        arg8: PCRE2_SPTR8,
        arg9: usize,
        arg10: *mut PCRE2_UCHAR8,
        arg11: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_jit_compile_8(
        arg1: *mut pcre2_code_8,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_jit_match_8(
        arg1: *const pcre2_code_8,
        arg2: PCRE2_SPTR8,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_8,
        arg7: *mut pcre2_match_context_8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_jit_free_unused_memory_8(arg1: *mut pcre2_general_context_8);
}
unsafe extern "C" {
    pub fn pcre2_jit_stack_create_8(
        arg1: usize,
        arg2: usize,
        arg3: *mut pcre2_general_context_8,
    ) -> *mut pcre2_jit_stack_8;
}
unsafe extern "C" {
    pub fn pcre2_jit_stack_assign_8(
        arg1: *mut pcre2_match_context_8,
        arg2: pcre2_jit_callback_8,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn pcre2_jit_stack_free_8(arg1: *mut pcre2_jit_stack_8);
}
unsafe extern "C" {
    pub fn pcre2_get_error_message_8(
        arg1: ::std::os::raw::c_int,
        arg2: *mut PCRE2_UCHAR8,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_maketables_8(arg1: *mut pcre2_general_context_8) -> *const u8;
}
unsafe extern "C" {
    pub fn pcre2_maketables_free_8(
        arg1: *mut pcre2_general_context_8,
        arg2: *const u8,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_general_context_16 {
    _unused: [u8; 0],
}
pub type pcre2_general_context_16 = pcre2_real_general_context_16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_compile_context_16 {
    _unused: [u8; 0],
}
pub type pcre2_compile_context_16 = pcre2_real_compile_context_16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_match_context_16 {
    _unused: [u8; 0],
}
pub type pcre2_match_context_16 = pcre2_real_match_context_16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_convert_context_16 {
    _unused: [u8; 0],
}
pub type pcre2_convert_context_16 = pcre2_real_convert_context_16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_code_16 {
    _unused: [u8; 0],
}
pub type pcre2_code_16 = pcre2_real_code_16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_match_data_16 {
    _unused: [u8; 0],
}
pub type pcre2_match_data_16 = pcre2_real_match_data_16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_jit_stack_16 {
    _unused: [u8; 0],
}
pub type pcre2_jit_stack_16 = pcre2_real_jit_stack_16;
pub type pcre2_jit_callback_16 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut pcre2_jit_stack_16,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_callout_block_16 {
    pub version: u32,
    pub callout_number: u32,
    pub capture_top: u32,
    pub capture_last: u32,
    pub offset_vector: *mut usize,
    pub mark: PCRE2_SPTR16,
    pub subject: PCRE2_SPTR16,
    pub subject_length: usize,
    pub start_match: usize,
    pub current_position: usize,
    pub pattern_position: usize,
    pub next_item_length: usize,
    pub callout_string_offset: usize,
    pub callout_string_length: usize,
    pub callout_string: PCRE2_SPTR16,
    pub callout_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcre2_callout_block_16"]
        [::std::mem::size_of::<pcre2_callout_block_16>() - 112usize];
    ["Alignment of pcre2_callout_block_16"]
        [::std::mem::align_of::<pcre2_callout_block_16>() - 8usize];
    ["Offset of field: pcre2_callout_block_16::version"]
        [::std::mem::offset_of!(pcre2_callout_block_16, version) - 0usize];
    ["Offset of field: pcre2_callout_block_16::callout_number"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        callout_number
    ) - 4usize];
    ["Offset of field: pcre2_callout_block_16::capture_top"]
        [::std::mem::offset_of!(pcre2_callout_block_16, capture_top) - 8usize];
    ["Offset of field: pcre2_callout_block_16::capture_last"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        capture_last
    ) - 12usize];
    ["Offset of field: pcre2_callout_block_16::offset_vector"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        offset_vector
    ) - 16usize];
    ["Offset of field: pcre2_callout_block_16::mark"]
        [::std::mem::offset_of!(pcre2_callout_block_16, mark) - 24usize];
    ["Offset of field: pcre2_callout_block_16::subject"]
        [::std::mem::offset_of!(pcre2_callout_block_16, subject) - 32usize];
    ["Offset of field: pcre2_callout_block_16::subject_length"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        subject_length
    ) - 40usize];
    ["Offset of field: pcre2_callout_block_16::start_match"]
        [::std::mem::offset_of!(pcre2_callout_block_16, start_match) - 48usize];
    ["Offset of field: pcre2_callout_block_16::current_position"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        current_position
    ) - 56usize];
    ["Offset of field: pcre2_callout_block_16::pattern_position"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        pattern_position
    ) - 64usize];
    ["Offset of field: pcre2_callout_block_16::next_item_length"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        next_item_length
    ) - 72usize];
    ["Offset of field: pcre2_callout_block_16::callout_string_offset"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        callout_string_offset
    )
        - 80usize];
    ["Offset of field: pcre2_callout_block_16::callout_string_length"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        callout_string_length
    )
        - 88usize];
    ["Offset of field: pcre2_callout_block_16::callout_string"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        callout_string
    ) - 96usize];
    ["Offset of field: pcre2_callout_block_16::callout_flags"][::std::mem::offset_of!(
        pcre2_callout_block_16,
        callout_flags
    ) - 104usize];
};
impl Default for pcre2_callout_block_16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_callout_enumerate_block_16 {
    pub version: u32,
    pub pattern_position: usize,
    pub next_item_length: usize,
    pub callout_number: u32,
    pub callout_string_offset: usize,
    pub callout_string_length: usize,
    pub callout_string: PCRE2_SPTR16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcre2_callout_enumerate_block_16"]
        [::std::mem::size_of::<pcre2_callout_enumerate_block_16>() - 56usize];
    ["Alignment of pcre2_callout_enumerate_block_16"]
        [::std::mem::align_of::<pcre2_callout_enumerate_block_16>() - 8usize];
    ["Offset of field: pcre2_callout_enumerate_block_16::version"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_16,
        version
    ) - 0usize];
    ["Offset of field: pcre2_callout_enumerate_block_16::pattern_position"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_16,
        pattern_position
    )
        - 8usize];
    ["Offset of field: pcre2_callout_enumerate_block_16::next_item_length"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_16,
        next_item_length
    )
        - 16usize];
    ["Offset of field: pcre2_callout_enumerate_block_16::callout_number"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_16,
        callout_number
    )
        - 24usize];
    [
        "Offset of field: pcre2_callout_enumerate_block_16::callout_string_offset",
    ][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_16,
        callout_string_offset
    ) - 32usize];
    [
        "Offset of field: pcre2_callout_enumerate_block_16::callout_string_length",
    ][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_16,
        callout_string_length
    ) - 40usize];
    ["Offset of field: pcre2_callout_enumerate_block_16::callout_string"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_16,
        callout_string
    )
        - 48usize];
};
impl Default for pcre2_callout_enumerate_block_16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_substitute_callout_block_16 {
    pub version: u32,
    pub input: PCRE2_SPTR16,
    pub output: PCRE2_SPTR16,
    pub output_offsets: [usize; 2usize],
    pub ovector: *mut usize,
    pub oveccount: u32,
    pub subscount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcre2_substitute_callout_block_16"]
        [::std::mem::size_of::<pcre2_substitute_callout_block_16>() - 56usize];
    ["Alignment of pcre2_substitute_callout_block_16"]
        [::std::mem::align_of::<pcre2_substitute_callout_block_16>() - 8usize];
    ["Offset of field: pcre2_substitute_callout_block_16::version"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_16,
        version
    ) - 0usize];
    ["Offset of field: pcre2_substitute_callout_block_16::input"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_16,
        input
    ) - 8usize];
    ["Offset of field: pcre2_substitute_callout_block_16::output"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_16,
        output
    ) - 16usize];
    ["Offset of field: pcre2_substitute_callout_block_16::output_offsets"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_16,
        output_offsets
    )
        - 24usize];
    ["Offset of field: pcre2_substitute_callout_block_16::ovector"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_16,
        ovector
    )
        - 40usize];
    ["Offset of field: pcre2_substitute_callout_block_16::oveccount"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_16,
        oveccount
    )
        - 48usize];
    ["Offset of field: pcre2_substitute_callout_block_16::subscount"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_16,
        subscount
    )
        - 52usize];
};
impl Default for pcre2_substitute_callout_block_16 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn pcre2_config_16(
        arg1: u32,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_general_context_copy_16(
        arg1: *mut pcre2_general_context_16,
    ) -> *mut pcre2_general_context_16;
}
unsafe extern "C" {
    pub fn pcre2_general_context_create_16(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut pcre2_general_context_16;
}
unsafe extern "C" {
    pub fn pcre2_general_context_free_16(arg1: *mut pcre2_general_context_16);
}
unsafe extern "C" {
    pub fn pcre2_compile_context_copy_16(
        arg1: *mut pcre2_compile_context_16,
    ) -> *mut pcre2_compile_context_16;
}
unsafe extern "C" {
    pub fn pcre2_compile_context_create_16(
        arg1: *mut pcre2_general_context_16,
    ) -> *mut pcre2_compile_context_16;
}
unsafe extern "C" {
    pub fn pcre2_compile_context_free_16(arg1: *mut pcre2_compile_context_16);
}
unsafe extern "C" {
    pub fn pcre2_set_bsr_16(
        arg1: *mut pcre2_compile_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_character_tables_16(
        arg1: *mut pcre2_compile_context_16,
        arg2: *const u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_compile_extra_options_16(
        arg1: *mut pcre2_compile_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_max_pattern_length_16(
        arg1: *mut pcre2_compile_context_16,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_newline_16(
        arg1: *mut pcre2_compile_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_parens_nest_limit_16(
        arg1: *mut pcre2_compile_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_compile_recursion_guard_16(
        arg1: *mut pcre2_compile_context_16,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: u32,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_convert_context_copy_16(
        arg1: *mut pcre2_convert_context_16,
    ) -> *mut pcre2_convert_context_16;
}
unsafe extern "C" {
    pub fn pcre2_convert_context_create_16(
        arg1: *mut pcre2_general_context_16,
    ) -> *mut pcre2_convert_context_16;
}
unsafe extern "C" {
    pub fn pcre2_convert_context_free_16(arg1: *mut pcre2_convert_context_16);
}
unsafe extern "C" {
    pub fn pcre2_set_glob_escape_16(
        arg1: *mut pcre2_convert_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_glob_separator_16(
        arg1: *mut pcre2_convert_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_pattern_convert_16(
        arg1: PCRE2_SPTR16,
        arg2: usize,
        arg3: u32,
        arg4: *mut *mut PCRE2_UCHAR16,
        arg5: *mut usize,
        arg6: *mut pcre2_convert_context_16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_converted_pattern_free_16(arg1: *mut PCRE2_UCHAR16);
}
unsafe extern "C" {
    pub fn pcre2_match_context_copy_16(
        arg1: *mut pcre2_match_context_16,
    ) -> *mut pcre2_match_context_16;
}
unsafe extern "C" {
    pub fn pcre2_match_context_create_16(
        arg1: *mut pcre2_general_context_16,
    ) -> *mut pcre2_match_context_16;
}
unsafe extern "C" {
    pub fn pcre2_match_context_free_16(arg1: *mut pcre2_match_context_16);
}
unsafe extern "C" {
    pub fn pcre2_set_callout_16(
        arg1: *mut pcre2_match_context_16,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pcre2_callout_block_16,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_substitute_callout_16(
        arg1: *mut pcre2_match_context_16,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pcre2_substitute_callout_block_16,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_depth_limit_16(
        arg1: *mut pcre2_match_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_heap_limit_16(
        arg1: *mut pcre2_match_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_match_limit_16(
        arg1: *mut pcre2_match_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_offset_limit_16(
        arg1: *mut pcre2_match_context_16,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_recursion_limit_16(
        arg1: *mut pcre2_match_context_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_recursion_memory_management_16(
        arg1: *mut pcre2_match_context_16,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_compile_16(
        arg1: PCRE2_SPTR16,
        arg2: usize,
        arg3: u32,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut usize,
        arg6: *mut pcre2_compile_context_16,
    ) -> *mut pcre2_code_16;
}
unsafe extern "C" {
    pub fn pcre2_code_free_16(arg1: *mut pcre2_code_16);
}
unsafe extern "C" {
    pub fn pcre2_code_copy_16(arg1: *const pcre2_code_16)
        -> *mut pcre2_code_16;
}
unsafe extern "C" {
    pub fn pcre2_code_copy_with_tables_16(
        arg1: *const pcre2_code_16,
    ) -> *mut pcre2_code_16;
}
unsafe extern "C" {
    pub fn pcre2_pattern_info_16(
        arg1: *const pcre2_code_16,
        arg2: u32,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_callout_enumerate_16(
        arg1: *const pcre2_code_16,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pcre2_callout_enumerate_block_16,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_match_data_create_16(
        arg1: u32,
        arg2: *mut pcre2_general_context_16,
    ) -> *mut pcre2_match_data_16;
}
unsafe extern "C" {
    pub fn pcre2_match_data_create_from_pattern_16(
        arg1: *const pcre2_code_16,
        arg2: *mut pcre2_general_context_16,
    ) -> *mut pcre2_match_data_16;
}
unsafe extern "C" {
    pub fn pcre2_dfa_match_16(
        arg1: *const pcre2_code_16,
        arg2: PCRE2_SPTR16,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_16,
        arg7: *mut pcre2_match_context_16,
        arg8: *mut ::std::os::raw::c_int,
        arg9: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_match_16(
        arg1: *const pcre2_code_16,
        arg2: PCRE2_SPTR16,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_16,
        arg7: *mut pcre2_match_context_16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_match_data_free_16(arg1: *mut pcre2_match_data_16);
}
unsafe extern "C" {
    pub fn pcre2_get_mark_16(arg1: *mut pcre2_match_data_16) -> PCRE2_SPTR16;
}
unsafe extern "C" {
    pub fn pcre2_get_match_data_size_16(
        arg1: *mut pcre2_match_data_16,
    ) -> usize;
}
unsafe extern "C" {
    pub fn pcre2_get_ovector_count_16(arg1: *mut pcre2_match_data_16) -> u32;
}
unsafe extern "C" {
    pub fn pcre2_get_ovector_pointer_16(
        arg1: *mut pcre2_match_data_16,
    ) -> *mut usize;
}
unsafe extern "C" {
    pub fn pcre2_get_startchar_16(arg1: *mut pcre2_match_data_16) -> usize;
}
unsafe extern "C" {
    pub fn pcre2_substring_copy_byname_16(
        arg1: *mut pcre2_match_data_16,
        arg2: PCRE2_SPTR16,
        arg3: *mut PCRE2_UCHAR16,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_copy_bynumber_16(
        arg1: *mut pcre2_match_data_16,
        arg2: u32,
        arg3: *mut PCRE2_UCHAR16,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_free_16(arg1: *mut PCRE2_UCHAR16);
}
unsafe extern "C" {
    pub fn pcre2_substring_get_byname_16(
        arg1: *mut pcre2_match_data_16,
        arg2: PCRE2_SPTR16,
        arg3: *mut *mut PCRE2_UCHAR16,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_get_bynumber_16(
        arg1: *mut pcre2_match_data_16,
        arg2: u32,
        arg3: *mut *mut PCRE2_UCHAR16,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_length_byname_16(
        arg1: *mut pcre2_match_data_16,
        arg2: PCRE2_SPTR16,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_length_bynumber_16(
        arg1: *mut pcre2_match_data_16,
        arg2: u32,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_nametable_scan_16(
        arg1: *const pcre2_code_16,
        arg2: PCRE2_SPTR16,
        arg3: *mut PCRE2_SPTR16,
        arg4: *mut PCRE2_SPTR16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_number_from_name_16(
        arg1: *const pcre2_code_16,
        arg2: PCRE2_SPTR16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_list_free_16(arg1: *mut PCRE2_SPTR16);
}
unsafe extern "C" {
    pub fn pcre2_substring_list_get_16(
        arg1: *mut pcre2_match_data_16,
        arg2: *mut *mut *mut PCRE2_UCHAR16,
        arg3: *mut *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_serialize_encode_16(
        arg1: *mut *const pcre2_code_16,
        arg2: i32,
        arg3: *mut *mut u8,
        arg4: *mut usize,
        arg5: *mut pcre2_general_context_16,
    ) -> i32;
}
unsafe extern "C" {
    pub fn pcre2_serialize_decode_16(
        arg1: *mut *mut pcre2_code_16,
        arg2: i32,
        arg3: *const u8,
        arg4: *mut pcre2_general_context_16,
    ) -> i32;
}
unsafe extern "C" {
    pub fn pcre2_serialize_get_number_of_codes_16(arg1: *const u8) -> i32;
}
unsafe extern "C" {
    pub fn pcre2_serialize_free_16(arg1: *mut u8);
}
unsafe extern "C" {
    pub fn pcre2_substitute_16(
        arg1: *const pcre2_code_16,
        arg2: PCRE2_SPTR16,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_16,
        arg7: *mut pcre2_match_context_16,
        arg8: PCRE2_SPTR16,
        arg9: usize,
        arg10: *mut PCRE2_UCHAR16,
        arg11: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_jit_compile_16(
        arg1: *mut pcre2_code_16,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_jit_match_16(
        arg1: *const pcre2_code_16,
        arg2: PCRE2_SPTR16,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_16,
        arg7: *mut pcre2_match_context_16,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_jit_free_unused_memory_16(arg1: *mut pcre2_general_context_16);
}
unsafe extern "C" {
    pub fn pcre2_jit_stack_create_16(
        arg1: usize,
        arg2: usize,
        arg3: *mut pcre2_general_context_16,
    ) -> *mut pcre2_jit_stack_16;
}
unsafe extern "C" {
    pub fn pcre2_jit_stack_assign_16(
        arg1: *mut pcre2_match_context_16,
        arg2: pcre2_jit_callback_16,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn pcre2_jit_stack_free_16(arg1: *mut pcre2_jit_stack_16);
}
unsafe extern "C" {
    pub fn pcre2_get_error_message_16(
        arg1: ::std::os::raw::c_int,
        arg2: *mut PCRE2_UCHAR16,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_maketables_16(
        arg1: *mut pcre2_general_context_16,
    ) -> *const u8;
}
unsafe extern "C" {
    pub fn pcre2_maketables_free_16(
        arg1: *mut pcre2_general_context_16,
        arg2: *const u8,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_general_context_32 {
    _unused: [u8; 0],
}
pub type pcre2_general_context_32 = pcre2_real_general_context_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_compile_context_32 {
    _unused: [u8; 0],
}
pub type pcre2_compile_context_32 = pcre2_real_compile_context_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_match_context_32 {
    _unused: [u8; 0],
}
pub type pcre2_match_context_32 = pcre2_real_match_context_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_convert_context_32 {
    _unused: [u8; 0],
}
pub type pcre2_convert_context_32 = pcre2_real_convert_context_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_code_32 {
    _unused: [u8; 0],
}
pub type pcre2_code_32 = pcre2_real_code_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_match_data_32 {
    _unused: [u8; 0],
}
pub type pcre2_match_data_32 = pcre2_real_match_data_32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_real_jit_stack_32 {
    _unused: [u8; 0],
}
pub type pcre2_jit_stack_32 = pcre2_real_jit_stack_32;
pub type pcre2_jit_callback_32 = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut pcre2_jit_stack_32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_callout_block_32 {
    pub version: u32,
    pub callout_number: u32,
    pub capture_top: u32,
    pub capture_last: u32,
    pub offset_vector: *mut usize,
    pub mark: PCRE2_SPTR32,
    pub subject: PCRE2_SPTR32,
    pub subject_length: usize,
    pub start_match: usize,
    pub current_position: usize,
    pub pattern_position: usize,
    pub next_item_length: usize,
    pub callout_string_offset: usize,
    pub callout_string_length: usize,
    pub callout_string: PCRE2_SPTR32,
    pub callout_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcre2_callout_block_32"]
        [::std::mem::size_of::<pcre2_callout_block_32>() - 112usize];
    ["Alignment of pcre2_callout_block_32"]
        [::std::mem::align_of::<pcre2_callout_block_32>() - 8usize];
    ["Offset of field: pcre2_callout_block_32::version"]
        [::std::mem::offset_of!(pcre2_callout_block_32, version) - 0usize];
    ["Offset of field: pcre2_callout_block_32::callout_number"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        callout_number
    ) - 4usize];
    ["Offset of field: pcre2_callout_block_32::capture_top"]
        [::std::mem::offset_of!(pcre2_callout_block_32, capture_top) - 8usize];
    ["Offset of field: pcre2_callout_block_32::capture_last"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        capture_last
    ) - 12usize];
    ["Offset of field: pcre2_callout_block_32::offset_vector"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        offset_vector
    ) - 16usize];
    ["Offset of field: pcre2_callout_block_32::mark"]
        [::std::mem::offset_of!(pcre2_callout_block_32, mark) - 24usize];
    ["Offset of field: pcre2_callout_block_32::subject"]
        [::std::mem::offset_of!(pcre2_callout_block_32, subject) - 32usize];
    ["Offset of field: pcre2_callout_block_32::subject_length"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        subject_length
    ) - 40usize];
    ["Offset of field: pcre2_callout_block_32::start_match"]
        [::std::mem::offset_of!(pcre2_callout_block_32, start_match) - 48usize];
    ["Offset of field: pcre2_callout_block_32::current_position"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        current_position
    ) - 56usize];
    ["Offset of field: pcre2_callout_block_32::pattern_position"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        pattern_position
    ) - 64usize];
    ["Offset of field: pcre2_callout_block_32::next_item_length"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        next_item_length
    ) - 72usize];
    ["Offset of field: pcre2_callout_block_32::callout_string_offset"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        callout_string_offset
    )
        - 80usize];
    ["Offset of field: pcre2_callout_block_32::callout_string_length"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        callout_string_length
    )
        - 88usize];
    ["Offset of field: pcre2_callout_block_32::callout_string"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        callout_string
    ) - 96usize];
    ["Offset of field: pcre2_callout_block_32::callout_flags"][::std::mem::offset_of!(
        pcre2_callout_block_32,
        callout_flags
    ) - 104usize];
};
impl Default for pcre2_callout_block_32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_callout_enumerate_block_32 {
    pub version: u32,
    pub pattern_position: usize,
    pub next_item_length: usize,
    pub callout_number: u32,
    pub callout_string_offset: usize,
    pub callout_string_length: usize,
    pub callout_string: PCRE2_SPTR32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcre2_callout_enumerate_block_32"]
        [::std::mem::size_of::<pcre2_callout_enumerate_block_32>() - 56usize];
    ["Alignment of pcre2_callout_enumerate_block_32"]
        [::std::mem::align_of::<pcre2_callout_enumerate_block_32>() - 8usize];
    ["Offset of field: pcre2_callout_enumerate_block_32::version"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_32,
        version
    ) - 0usize];
    ["Offset of field: pcre2_callout_enumerate_block_32::pattern_position"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_32,
        pattern_position
    )
        - 8usize];
    ["Offset of field: pcre2_callout_enumerate_block_32::next_item_length"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_32,
        next_item_length
    )
        - 16usize];
    ["Offset of field: pcre2_callout_enumerate_block_32::callout_number"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_32,
        callout_number
    )
        - 24usize];
    [
        "Offset of field: pcre2_callout_enumerate_block_32::callout_string_offset",
    ][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_32,
        callout_string_offset
    ) - 32usize];
    [
        "Offset of field: pcre2_callout_enumerate_block_32::callout_string_length",
    ][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_32,
        callout_string_length
    ) - 40usize];
    ["Offset of field: pcre2_callout_enumerate_block_32::callout_string"][::std::mem::offset_of!(
        pcre2_callout_enumerate_block_32,
        callout_string
    )
        - 48usize];
};
impl Default for pcre2_callout_enumerate_block_32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre2_substitute_callout_block_32 {
    pub version: u32,
    pub input: PCRE2_SPTR32,
    pub output: PCRE2_SPTR32,
    pub output_offsets: [usize; 2usize],
    pub ovector: *mut usize,
    pub oveccount: u32,
    pub subscount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcre2_substitute_callout_block_32"]
        [::std::mem::size_of::<pcre2_substitute_callout_block_32>() - 56usize];
    ["Alignment of pcre2_substitute_callout_block_32"]
        [::std::mem::align_of::<pcre2_substitute_callout_block_32>() - 8usize];
    ["Offset of field: pcre2_substitute_callout_block_32::version"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_32,
        version
    ) - 0usize];
    ["Offset of field: pcre2_substitute_callout_block_32::input"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_32,
        input
    ) - 8usize];
    ["Offset of field: pcre2_substitute_callout_block_32::output"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_32,
        output
    ) - 16usize];
    ["Offset of field: pcre2_substitute_callout_block_32::output_offsets"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_32,
        output_offsets
    )
        - 24usize];
    ["Offset of field: pcre2_substitute_callout_block_32::ovector"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_32,
        ovector
    )
        - 40usize];
    ["Offset of field: pcre2_substitute_callout_block_32::oveccount"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_32,
        oveccount
    )
        - 48usize];
    ["Offset of field: pcre2_substitute_callout_block_32::subscount"][::std::mem::offset_of!(
        pcre2_substitute_callout_block_32,
        subscount
    )
        - 52usize];
};
impl Default for pcre2_substitute_callout_block_32 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn pcre2_config_32(
        arg1: u32,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_general_context_copy_32(
        arg1: *mut pcre2_general_context_32,
    ) -> *mut pcre2_general_context_32;
}
unsafe extern "C" {
    pub fn pcre2_general_context_create_32(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut pcre2_general_context_32;
}
unsafe extern "C" {
    pub fn pcre2_general_context_free_32(arg1: *mut pcre2_general_context_32);
}
unsafe extern "C" {
    pub fn pcre2_compile_context_copy_32(
        arg1: *mut pcre2_compile_context_32,
    ) -> *mut pcre2_compile_context_32;
}
unsafe extern "C" {
    pub fn pcre2_compile_context_create_32(
        arg1: *mut pcre2_general_context_32,
    ) -> *mut pcre2_compile_context_32;
}
unsafe extern "C" {
    pub fn pcre2_compile_context_free_32(arg1: *mut pcre2_compile_context_32);
}
unsafe extern "C" {
    pub fn pcre2_set_bsr_32(
        arg1: *mut pcre2_compile_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_character_tables_32(
        arg1: *mut pcre2_compile_context_32,
        arg2: *const u8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_compile_extra_options_32(
        arg1: *mut pcre2_compile_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_max_pattern_length_32(
        arg1: *mut pcre2_compile_context_32,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_newline_32(
        arg1: *mut pcre2_compile_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_parens_nest_limit_32(
        arg1: *mut pcre2_compile_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_compile_recursion_guard_32(
        arg1: *mut pcre2_compile_context_32,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: u32,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_convert_context_copy_32(
        arg1: *mut pcre2_convert_context_32,
    ) -> *mut pcre2_convert_context_32;
}
unsafe extern "C" {
    pub fn pcre2_convert_context_create_32(
        arg1: *mut pcre2_general_context_32,
    ) -> *mut pcre2_convert_context_32;
}
unsafe extern "C" {
    pub fn pcre2_convert_context_free_32(arg1: *mut pcre2_convert_context_32);
}
unsafe extern "C" {
    pub fn pcre2_set_glob_escape_32(
        arg1: *mut pcre2_convert_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_glob_separator_32(
        arg1: *mut pcre2_convert_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_pattern_convert_32(
        arg1: PCRE2_SPTR32,
        arg2: usize,
        arg3: u32,
        arg4: *mut *mut PCRE2_UCHAR32,
        arg5: *mut usize,
        arg6: *mut pcre2_convert_context_32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_converted_pattern_free_32(arg1: *mut PCRE2_UCHAR32);
}
unsafe extern "C" {
    pub fn pcre2_match_context_copy_32(
        arg1: *mut pcre2_match_context_32,
    ) -> *mut pcre2_match_context_32;
}
unsafe extern "C" {
    pub fn pcre2_match_context_create_32(
        arg1: *mut pcre2_general_context_32,
    ) -> *mut pcre2_match_context_32;
}
unsafe extern "C" {
    pub fn pcre2_match_context_free_32(arg1: *mut pcre2_match_context_32);
}
unsafe extern "C" {
    pub fn pcre2_set_callout_32(
        arg1: *mut pcre2_match_context_32,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pcre2_callout_block_32,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_substitute_callout_32(
        arg1: *mut pcre2_match_context_32,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pcre2_substitute_callout_block_32,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_depth_limit_32(
        arg1: *mut pcre2_match_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_heap_limit_32(
        arg1: *mut pcre2_match_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_match_limit_32(
        arg1: *mut pcre2_match_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_offset_limit_32(
        arg1: *mut pcre2_match_context_32,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_recursion_limit_32(
        arg1: *mut pcre2_match_context_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_set_recursion_memory_management_32(
        arg1: *mut pcre2_match_context_32,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: usize,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_compile_32(
        arg1: PCRE2_SPTR32,
        arg2: usize,
        arg3: u32,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut usize,
        arg6: *mut pcre2_compile_context_32,
    ) -> *mut pcre2_code_32;
}
unsafe extern "C" {
    pub fn pcre2_code_free_32(arg1: *mut pcre2_code_32);
}
unsafe extern "C" {
    pub fn pcre2_code_copy_32(arg1: *const pcre2_code_32)
        -> *mut pcre2_code_32;
}
unsafe extern "C" {
    pub fn pcre2_code_copy_with_tables_32(
        arg1: *const pcre2_code_32,
    ) -> *mut pcre2_code_32;
}
unsafe extern "C" {
    pub fn pcre2_pattern_info_32(
        arg1: *const pcre2_code_32,
        arg2: u32,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_callout_enumerate_32(
        arg1: *const pcre2_code_32,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut pcre2_callout_enumerate_block_32,
                arg2: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_match_data_create_32(
        arg1: u32,
        arg2: *mut pcre2_general_context_32,
    ) -> *mut pcre2_match_data_32;
}
unsafe extern "C" {
    pub fn pcre2_match_data_create_from_pattern_32(
        arg1: *const pcre2_code_32,
        arg2: *mut pcre2_general_context_32,
    ) -> *mut pcre2_match_data_32;
}
unsafe extern "C" {
    pub fn pcre2_dfa_match_32(
        arg1: *const pcre2_code_32,
        arg2: PCRE2_SPTR32,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_32,
        arg7: *mut pcre2_match_context_32,
        arg8: *mut ::std::os::raw::c_int,
        arg9: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_match_32(
        arg1: *const pcre2_code_32,
        arg2: PCRE2_SPTR32,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_32,
        arg7: *mut pcre2_match_context_32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_match_data_free_32(arg1: *mut pcre2_match_data_32);
}
unsafe extern "C" {
    pub fn pcre2_get_mark_32(arg1: *mut pcre2_match_data_32) -> PCRE2_SPTR32;
}
unsafe extern "C" {
    pub fn pcre2_get_match_data_size_32(
        arg1: *mut pcre2_match_data_32,
    ) -> usize;
}
unsafe extern "C" {
    pub fn pcre2_get_ovector_count_32(arg1: *mut pcre2_match_data_32) -> u32;
}
unsafe extern "C" {
    pub fn pcre2_get_ovector_pointer_32(
        arg1: *mut pcre2_match_data_32,
    ) -> *mut usize;
}
unsafe extern "C" {
    pub fn pcre2_get_startchar_32(arg1: *mut pcre2_match_data_32) -> usize;
}
unsafe extern "C" {
    pub fn pcre2_substring_copy_byname_32(
        arg1: *mut pcre2_match_data_32,
        arg2: PCRE2_SPTR32,
        arg3: *mut PCRE2_UCHAR32,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_copy_bynumber_32(
        arg1: *mut pcre2_match_data_32,
        arg2: u32,
        arg3: *mut PCRE2_UCHAR32,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_free_32(arg1: *mut PCRE2_UCHAR32);
}
unsafe extern "C" {
    pub fn pcre2_substring_get_byname_32(
        arg1: *mut pcre2_match_data_32,
        arg2: PCRE2_SPTR32,
        arg3: *mut *mut PCRE2_UCHAR32,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_get_bynumber_32(
        arg1: *mut pcre2_match_data_32,
        arg2: u32,
        arg3: *mut *mut PCRE2_UCHAR32,
        arg4: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_length_byname_32(
        arg1: *mut pcre2_match_data_32,
        arg2: PCRE2_SPTR32,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_length_bynumber_32(
        arg1: *mut pcre2_match_data_32,
        arg2: u32,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_nametable_scan_32(
        arg1: *const pcre2_code_32,
        arg2: PCRE2_SPTR32,
        arg3: *mut PCRE2_SPTR32,
        arg4: *mut PCRE2_SPTR32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_number_from_name_32(
        arg1: *const pcre2_code_32,
        arg2: PCRE2_SPTR32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_substring_list_free_32(arg1: *mut PCRE2_SPTR32);
}
unsafe extern "C" {
    pub fn pcre2_substring_list_get_32(
        arg1: *mut pcre2_match_data_32,
        arg2: *mut *mut *mut PCRE2_UCHAR32,
        arg3: *mut *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_serialize_encode_32(
        arg1: *mut *const pcre2_code_32,
        arg2: i32,
        arg3: *mut *mut u8,
        arg4: *mut usize,
        arg5: *mut pcre2_general_context_32,
    ) -> i32;
}
unsafe extern "C" {
    pub fn pcre2_serialize_decode_32(
        arg1: *mut *mut pcre2_code_32,
        arg2: i32,
        arg3: *const u8,
        arg4: *mut pcre2_general_context_32,
    ) -> i32;
}
unsafe extern "C" {
    pub fn pcre2_serialize_get_number_of_codes_32(arg1: *const u8) -> i32;
}
unsafe extern "C" {
    pub fn pcre2_serialize_free_32(arg1: *mut u8);
}
unsafe extern "C" {
    pub fn pcre2_substitute_32(
        arg1: *const pcre2_code_32,
        arg2: PCRE2_SPTR32,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_32,
        arg7: *mut pcre2_match_context_32,
        arg8: PCRE2_SPTR32,
        arg9: usize,
        arg10: *mut PCRE2_UCHAR32,
        arg11: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_jit_compile_32(
        arg1: *mut pcre2_code_32,
        arg2: u32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_jit_match_32(
        arg1: *const pcre2_code_32,
        arg2: PCRE2_SPTR32,
        arg3: usize,
        arg4: usize,
        arg5: u32,
        arg6: *mut pcre2_match_data_32,
        arg7: *mut pcre2_match_context_32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_jit_free_unused_memory_32(arg1: *mut pcre2_general_context_32);
}
unsafe extern "C" {
    pub fn pcre2_jit_stack_create_32(
        arg1: usize,
        arg2: usize,
        arg3: *mut pcre2_general_context_32,
    ) -> *mut pcre2_jit_stack_32;
}
unsafe extern "C" {
    pub fn pcre2_jit_stack_assign_32(
        arg1: *mut pcre2_match_context_32,
        arg2: pcre2_jit_callback_32,
        arg3: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "C" {
    pub fn pcre2_jit_stack_free_32(arg1: *mut pcre2_jit_stack_32);
}
unsafe extern "C" {
    pub fn pcre2_get_error_message_32(
        arg1: ::std::os::raw::c_int,
        arg2: *mut PCRE2_UCHAR32,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcre2_maketables_32(
        arg1: *mut pcre2_general_context_32,
    ) -> *const u8;
}
unsafe extern "C" {
    pub fn pcre2_maketables_free_32(
        arg1: *mut pcre2_general_context_32,
        arg2: *const u8,
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"]
        [::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"][::std::mem::offset_of!(
        max_align_t,
        __clang_max_align_nonce1
    ) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"][::std::mem::offset_of!(
        max_align_t,
        __clang_max_align_nonce2
    ) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"]
        [::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"]
        [::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"]
        [::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"]
        [::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"]
        [::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"]
        [::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"]
        [::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"]
        [::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"]
        [::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"]
        [::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"]
        [::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
impl Default for tm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"]
        [::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"]
        [::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
impl Default for __locale_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
unsafe extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getres(
        __clock_id: clockid_t,
        __res: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(
        __clock_id: clockid_t,
        __tp: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_settime(
        __clock_id: clockid_t,
        __tp: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_getcpuclockid(
        __pid: pid_t,
        __clock_id: *mut clockid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_gettime(
        __timerid: timer_t,
        __value: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub mod LY_DATA_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const LY_TYPE_UNKNOWN: Type = 0;
    pub const LY_TYPE_BINARY: Type = 1;
    pub const LY_TYPE_UINT8: Type = 2;
    pub const LY_TYPE_UINT16: Type = 3;
    pub const LY_TYPE_UINT32: Type = 4;
    pub const LY_TYPE_UINT64: Type = 5;
    pub const LY_TYPE_STRING: Type = 6;
    pub const LY_TYPE_BITS: Type = 7;
    pub const LY_TYPE_BOOL: Type = 8;
    pub const LY_TYPE_DEC64: Type = 9;
    pub const LY_TYPE_EMPTY: Type = 10;
    pub const LY_TYPE_ENUM: Type = 11;
    pub const LY_TYPE_IDENT: Type = 12;
    pub const LY_TYPE_INST: Type = 13;
    pub const LY_TYPE_LEAFREF: Type = 14;
    pub const LY_TYPE_UNION: Type = 15;
    pub const LY_TYPE_INT8: Type = 16;
    pub const LY_TYPE_INT16: Type = 17;
    pub const LY_TYPE_INT32: Type = 18;
    pub const LY_TYPE_INT64: Type = 19;
}
unsafe extern "C" {
    pub static mut ly_data_type2str: [*const ::std::os::raw::c_char; 20usize];
}
pub mod LY_VALUE_FORMAT {
    pub type Type = ::std::os::raw::c_uint;
    pub const LY_VALUE_CANON: Type = 0;
    pub const LY_VALUE_SCHEMA: Type = 1;
    pub const LY_VALUE_SCHEMA_RESOLVED: Type = 2;
    pub const LY_VALUE_XML: Type = 3;
    pub const LY_VALUE_JSON: Type = 4;
    pub const LY_VALUE_LYB: Type = 5;
    pub const LY_VALUE_STR_NS: Type = 6;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"]
        [::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"]
        [::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"]
        [::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
impl Default for _G_fpos_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"]
        [::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"]
        [::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
impl Default for _G_fpos64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"]
        [::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"]
        [::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"]
        [::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"]
        [::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"]
        [::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"]
        [::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"]
        [::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"]
        [::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"]
        [::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"]
        [::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"]
        [::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fpos_t = __fpos_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(
        __filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(
        arg1: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(
        __s: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: usize,
    );
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(
        __c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(
        __w: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(
        __stream: *mut FILE,
        __pos: *mut fpos_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(
        __stream: *mut FILE,
        __pos: *const fpos_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(
        __s: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyxp_expr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_import {
    pub module: *mut lys_module,
    pub name: *const ::std::os::raw::c_char,
    pub prefix: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysp_ext_instance,
    pub flags: u16,
    pub rev: [::std::os::raw::c_char; 11usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_import"][::std::mem::size_of::<lysp_import>() - 64usize];
    ["Alignment of lysp_import"]
        [::std::mem::align_of::<lysp_import>() - 8usize];
    ["Offset of field: lysp_import::module"]
        [::std::mem::offset_of!(lysp_import, module) - 0usize];
    ["Offset of field: lysp_import::name"]
        [::std::mem::offset_of!(lysp_import, name) - 8usize];
    ["Offset of field: lysp_import::prefix"]
        [::std::mem::offset_of!(lysp_import, prefix) - 16usize];
    ["Offset of field: lysp_import::dsc"]
        [::std::mem::offset_of!(lysp_import, dsc) - 24usize];
    ["Offset of field: lysp_import::ref_"]
        [::std::mem::offset_of!(lysp_import, ref_) - 32usize];
    ["Offset of field: lysp_import::exts"]
        [::std::mem::offset_of!(lysp_import, exts) - 40usize];
    ["Offset of field: lysp_import::flags"]
        [::std::mem::offset_of!(lysp_import, flags) - 48usize];
    ["Offset of field: lysp_import::rev"]
        [::std::mem::offset_of!(lysp_import, rev) - 50usize];
};
impl Default for lysp_import {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_include {
    pub submodule: *mut lysp_submodule,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysp_ext_instance,
    pub rev: [::std::os::raw::c_char; 11usize],
    pub injected: ly_bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_include"][::std::mem::size_of::<lysp_include>() - 56usize];
    ["Alignment of lysp_include"]
        [::std::mem::align_of::<lysp_include>() - 8usize];
    ["Offset of field: lysp_include::submodule"]
        [::std::mem::offset_of!(lysp_include, submodule) - 0usize];
    ["Offset of field: lysp_include::name"]
        [::std::mem::offset_of!(lysp_include, name) - 8usize];
    ["Offset of field: lysp_include::dsc"]
        [::std::mem::offset_of!(lysp_include, dsc) - 16usize];
    ["Offset of field: lysp_include::ref_"]
        [::std::mem::offset_of!(lysp_include, ref_) - 24usize];
    ["Offset of field: lysp_include::exts"]
        [::std::mem::offset_of!(lysp_include, exts) - 32usize];
    ["Offset of field: lysp_include::rev"]
        [::std::mem::offset_of!(lysp_include, rev) - 40usize];
    ["Offset of field: lysp_include::injected"]
        [::std::mem::offset_of!(lysp_include, injected) - 51usize];
};
impl Default for lysp_include {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_ext {
    pub name: *const ::std::os::raw::c_char,
    pub argname: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysp_ext_instance,
    pub flags: u16,
    pub compiled: *mut lysc_ext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_ext"][::std::mem::size_of::<lysp_ext>() - 56usize];
    ["Alignment of lysp_ext"][::std::mem::align_of::<lysp_ext>() - 8usize];
    ["Offset of field: lysp_ext::name"]
        [::std::mem::offset_of!(lysp_ext, name) - 0usize];
    ["Offset of field: lysp_ext::argname"]
        [::std::mem::offset_of!(lysp_ext, argname) - 8usize];
    ["Offset of field: lysp_ext::dsc"]
        [::std::mem::offset_of!(lysp_ext, dsc) - 16usize];
    ["Offset of field: lysp_ext::ref_"]
        [::std::mem::offset_of!(lysp_ext, ref_) - 24usize];
    ["Offset of field: lysp_ext::exts"]
        [::std::mem::offset_of!(lysp_ext, exts) - 32usize];
    ["Offset of field: lysp_ext::flags"]
        [::std::mem::offset_of!(lysp_ext, flags) - 40usize];
    ["Offset of field: lysp_ext::compiled"]
        [::std::mem::offset_of!(lysp_ext, compiled) - 48usize];
};
impl Default for lysp_ext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_feature {
    pub name: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub iffeatures_c: *mut lysc_iffeature,
    pub depfeatures: *mut *mut lysp_feature,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysp_ext_instance,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_feature"][::std::mem::size_of::<lysp_feature>() - 64usize];
    ["Alignment of lysp_feature"]
        [::std::mem::align_of::<lysp_feature>() - 8usize];
    ["Offset of field: lysp_feature::name"]
        [::std::mem::offset_of!(lysp_feature, name) - 0usize];
    ["Offset of field: lysp_feature::iffeatures"]
        [::std::mem::offset_of!(lysp_feature, iffeatures) - 8usize];
    ["Offset of field: lysp_feature::iffeatures_c"]
        [::std::mem::offset_of!(lysp_feature, iffeatures_c) - 16usize];
    ["Offset of field: lysp_feature::depfeatures"]
        [::std::mem::offset_of!(lysp_feature, depfeatures) - 24usize];
    ["Offset of field: lysp_feature::dsc"]
        [::std::mem::offset_of!(lysp_feature, dsc) - 32usize];
    ["Offset of field: lysp_feature::ref_"]
        [::std::mem::offset_of!(lysp_feature, ref_) - 40usize];
    ["Offset of field: lysp_feature::exts"]
        [::std::mem::offset_of!(lysp_feature, exts) - 48usize];
    ["Offset of field: lysp_feature::flags"]
        [::std::mem::offset_of!(lysp_feature, flags) - 56usize];
};
impl Default for lysp_feature {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_iffeature {
    pub expr: *mut u8,
    pub features: *mut *mut lysp_feature,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_iffeature"]
        [::std::mem::size_of::<lysc_iffeature>() - 16usize];
    ["Alignment of lysc_iffeature"]
        [::std::mem::align_of::<lysc_iffeature>() - 8usize];
    ["Offset of field: lysc_iffeature::expr"]
        [::std::mem::offset_of!(lysc_iffeature, expr) - 0usize];
    ["Offset of field: lysc_iffeature::features"]
        [::std::mem::offset_of!(lysc_iffeature, features) - 8usize];
};
impl Default for lysc_iffeature {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_qname {
    pub str_: *const ::std::os::raw::c_char,
    pub mod_: *const lysp_module,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_qname"][::std::mem::size_of::<lysp_qname>() - 24usize];
    ["Alignment of lysp_qname"][::std::mem::align_of::<lysp_qname>() - 8usize];
    ["Offset of field: lysp_qname::str_"]
        [::std::mem::offset_of!(lysp_qname, str_) - 0usize];
    ["Offset of field: lysp_qname::mod_"]
        [::std::mem::offset_of!(lysp_qname, mod_) - 8usize];
    ["Offset of field: lysp_qname::flags"]
        [::std::mem::offset_of!(lysp_qname, flags) - 16usize];
};
impl Default for lysp_qname {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_ident {
    pub name: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub bases: *mut *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysp_ext_instance,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_ident"][::std::mem::size_of::<lysp_ident>() - 56usize];
    ["Alignment of lysp_ident"][::std::mem::align_of::<lysp_ident>() - 8usize];
    ["Offset of field: lysp_ident::name"]
        [::std::mem::offset_of!(lysp_ident, name) - 0usize];
    ["Offset of field: lysp_ident::iffeatures"]
        [::std::mem::offset_of!(lysp_ident, iffeatures) - 8usize];
    ["Offset of field: lysp_ident::bases"]
        [::std::mem::offset_of!(lysp_ident, bases) - 16usize];
    ["Offset of field: lysp_ident::dsc"]
        [::std::mem::offset_of!(lysp_ident, dsc) - 24usize];
    ["Offset of field: lysp_ident::ref_"]
        [::std::mem::offset_of!(lysp_ident, ref_) - 32usize];
    ["Offset of field: lysp_ident::exts"]
        [::std::mem::offset_of!(lysp_ident, exts) - 40usize];
    ["Offset of field: lysp_ident::flags"]
        [::std::mem::offset_of!(lysp_ident, flags) - 48usize];
};
impl Default for lysp_ident {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_restr {
    pub arg: lysp_qname,
    pub emsg: *const ::std::os::raw::c_char,
    pub eapptag: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_restr"][::std::mem::size_of::<lysp_restr>() - 64usize];
    ["Alignment of lysp_restr"][::std::mem::align_of::<lysp_restr>() - 8usize];
    ["Offset of field: lysp_restr::arg"]
        [::std::mem::offset_of!(lysp_restr, arg) - 0usize];
    ["Offset of field: lysp_restr::emsg"]
        [::std::mem::offset_of!(lysp_restr, emsg) - 24usize];
    ["Offset of field: lysp_restr::eapptag"]
        [::std::mem::offset_of!(lysp_restr, eapptag) - 32usize];
    ["Offset of field: lysp_restr::dsc"]
        [::std::mem::offset_of!(lysp_restr, dsc) - 40usize];
    ["Offset of field: lysp_restr::ref_"]
        [::std::mem::offset_of!(lysp_restr, ref_) - 48usize];
    ["Offset of field: lysp_restr::exts"]
        [::std::mem::offset_of!(lysp_restr, exts) - 56usize];
};
impl Default for lysp_restr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_revision {
    pub date: [::std::os::raw::c_char; 11usize],
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_revision"][::std::mem::size_of::<lysp_revision>() - 40usize];
    ["Alignment of lysp_revision"]
        [::std::mem::align_of::<lysp_revision>() - 8usize];
    ["Offset of field: lysp_revision::date"]
        [::std::mem::offset_of!(lysp_revision, date) - 0usize];
    ["Offset of field: lysp_revision::dsc"]
        [::std::mem::offset_of!(lysp_revision, dsc) - 16usize];
    ["Offset of field: lysp_revision::ref_"]
        [::std::mem::offset_of!(lysp_revision, ref_) - 24usize];
    ["Offset of field: lysp_revision::exts"]
        [::std::mem::offset_of!(lysp_revision, exts) - 32usize];
};
impl Default for lysp_revision {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_type_enum {
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub value: i64,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_type_enum"]
        [::std::mem::size_of::<lysp_type_enum>() - 56usize];
    ["Alignment of lysp_type_enum"]
        [::std::mem::align_of::<lysp_type_enum>() - 8usize];
    ["Offset of field: lysp_type_enum::name"]
        [::std::mem::offset_of!(lysp_type_enum, name) - 0usize];
    ["Offset of field: lysp_type_enum::dsc"]
        [::std::mem::offset_of!(lysp_type_enum, dsc) - 8usize];
    ["Offset of field: lysp_type_enum::ref_"]
        [::std::mem::offset_of!(lysp_type_enum, ref_) - 16usize];
    ["Offset of field: lysp_type_enum::value"]
        [::std::mem::offset_of!(lysp_type_enum, value) - 24usize];
    ["Offset of field: lysp_type_enum::iffeatures"]
        [::std::mem::offset_of!(lysp_type_enum, iffeatures) - 32usize];
    ["Offset of field: lysp_type_enum::exts"]
        [::std::mem::offset_of!(lysp_type_enum, exts) - 40usize];
    ["Offset of field: lysp_type_enum::flags"]
        [::std::mem::offset_of!(lysp_type_enum, flags) - 48usize];
};
impl Default for lysp_type_enum {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_type {
    pub name: *const ::std::os::raw::c_char,
    pub range: *mut lysp_restr,
    pub length: *mut lysp_restr,
    pub patterns: *mut lysp_restr,
    pub enums: *mut lysp_type_enum,
    pub bits: *mut lysp_type_enum,
    pub path: *mut lyxp_expr,
    pub bases: *mut *const ::std::os::raw::c_char,
    pub types: *mut lysp_type,
    pub exts: *mut lysp_ext_instance,
    pub pmod: *const lysp_module,
    pub compiled: *mut lysc_type,
    pub fraction_digits: u8,
    pub require_instance: u8,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_type"][::std::mem::size_of::<lysp_type>() - 104usize];
    ["Alignment of lysp_type"][::std::mem::align_of::<lysp_type>() - 8usize];
    ["Offset of field: lysp_type::name"]
        [::std::mem::offset_of!(lysp_type, name) - 0usize];
    ["Offset of field: lysp_type::range"]
        [::std::mem::offset_of!(lysp_type, range) - 8usize];
    ["Offset of field: lysp_type::length"]
        [::std::mem::offset_of!(lysp_type, length) - 16usize];
    ["Offset of field: lysp_type::patterns"]
        [::std::mem::offset_of!(lysp_type, patterns) - 24usize];
    ["Offset of field: lysp_type::enums"]
        [::std::mem::offset_of!(lysp_type, enums) - 32usize];
    ["Offset of field: lysp_type::bits"]
        [::std::mem::offset_of!(lysp_type, bits) - 40usize];
    ["Offset of field: lysp_type::path"]
        [::std::mem::offset_of!(lysp_type, path) - 48usize];
    ["Offset of field: lysp_type::bases"]
        [::std::mem::offset_of!(lysp_type, bases) - 56usize];
    ["Offset of field: lysp_type::types"]
        [::std::mem::offset_of!(lysp_type, types) - 64usize];
    ["Offset of field: lysp_type::exts"]
        [::std::mem::offset_of!(lysp_type, exts) - 72usize];
    ["Offset of field: lysp_type::pmod"]
        [::std::mem::offset_of!(lysp_type, pmod) - 80usize];
    ["Offset of field: lysp_type::compiled"]
        [::std::mem::offset_of!(lysp_type, compiled) - 88usize];
    ["Offset of field: lysp_type::fraction_digits"]
        [::std::mem::offset_of!(lysp_type, fraction_digits) - 96usize];
    ["Offset of field: lysp_type::require_instance"]
        [::std::mem::offset_of!(lysp_type, require_instance) - 97usize];
    ["Offset of field: lysp_type::flags"]
        [::std::mem::offset_of!(lysp_type, flags) - 98usize];
};
impl Default for lysp_type {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_tpdf {
    pub name: *const ::std::os::raw::c_char,
    pub units: *const ::std::os::raw::c_char,
    pub dflt: lysp_qname,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysp_ext_instance,
    pub type_: lysp_type,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_tpdf"][::std::mem::size_of::<lysp_tpdf>() - 176usize];
    ["Alignment of lysp_tpdf"][::std::mem::align_of::<lysp_tpdf>() - 8usize];
    ["Offset of field: lysp_tpdf::name"]
        [::std::mem::offset_of!(lysp_tpdf, name) - 0usize];
    ["Offset of field: lysp_tpdf::units"]
        [::std::mem::offset_of!(lysp_tpdf, units) - 8usize];
    ["Offset of field: lysp_tpdf::dflt"]
        [::std::mem::offset_of!(lysp_tpdf, dflt) - 16usize];
    ["Offset of field: lysp_tpdf::dsc"]
        [::std::mem::offset_of!(lysp_tpdf, dsc) - 40usize];
    ["Offset of field: lysp_tpdf::ref_"]
        [::std::mem::offset_of!(lysp_tpdf, ref_) - 48usize];
    ["Offset of field: lysp_tpdf::exts"]
        [::std::mem::offset_of!(lysp_tpdf, exts) - 56usize];
    ["Offset of field: lysp_tpdf::type_"]
        [::std::mem::offset_of!(lysp_tpdf, type_) - 64usize];
    ["Offset of field: lysp_tpdf::flags"]
        [::std::mem::offset_of!(lysp_tpdf, flags) - 168usize];
};
impl Default for lysp_tpdf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_when {
    pub cond: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_when"][::std::mem::size_of::<lysp_when>() - 32usize];
    ["Alignment of lysp_when"][::std::mem::align_of::<lysp_when>() - 8usize];
    ["Offset of field: lysp_when::cond"]
        [::std::mem::offset_of!(lysp_when, cond) - 0usize];
    ["Offset of field: lysp_when::dsc"]
        [::std::mem::offset_of!(lysp_when, dsc) - 8usize];
    ["Offset of field: lysp_when::ref_"]
        [::std::mem::offset_of!(lysp_when, ref_) - 16usize];
    ["Offset of field: lysp_when::exts"]
        [::std::mem::offset_of!(lysp_when, exts) - 24usize];
};
impl Default for lysp_when {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_refine {
    pub nodeid: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub musts: *mut lysp_restr,
    pub presence: *const ::std::os::raw::c_char,
    pub dflts: *mut lysp_qname,
    pub min: u32,
    pub max: u32,
    pub exts: *mut lysp_ext_instance,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_refine"][::std::mem::size_of::<lysp_refine>() - 80usize];
    ["Alignment of lysp_refine"]
        [::std::mem::align_of::<lysp_refine>() - 8usize];
    ["Offset of field: lysp_refine::nodeid"]
        [::std::mem::offset_of!(lysp_refine, nodeid) - 0usize];
    ["Offset of field: lysp_refine::dsc"]
        [::std::mem::offset_of!(lysp_refine, dsc) - 8usize];
    ["Offset of field: lysp_refine::ref_"]
        [::std::mem::offset_of!(lysp_refine, ref_) - 16usize];
    ["Offset of field: lysp_refine::iffeatures"]
        [::std::mem::offset_of!(lysp_refine, iffeatures) - 24usize];
    ["Offset of field: lysp_refine::musts"]
        [::std::mem::offset_of!(lysp_refine, musts) - 32usize];
    ["Offset of field: lysp_refine::presence"]
        [::std::mem::offset_of!(lysp_refine, presence) - 40usize];
    ["Offset of field: lysp_refine::dflts"]
        [::std::mem::offset_of!(lysp_refine, dflts) - 48usize];
    ["Offset of field: lysp_refine::min"]
        [::std::mem::offset_of!(lysp_refine, min) - 56usize];
    ["Offset of field: lysp_refine::max"]
        [::std::mem::offset_of!(lysp_refine, max) - 60usize];
    ["Offset of field: lysp_refine::exts"]
        [::std::mem::offset_of!(lysp_refine, exts) - 64usize];
    ["Offset of field: lysp_refine::flags"]
        [::std::mem::offset_of!(lysp_refine, flags) - 72usize];
};
impl Default for lysp_refine {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_deviate {
    pub mod_: u8,
    pub next: *mut lysp_deviate,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_deviate"][::std::mem::size_of::<lysp_deviate>() - 24usize];
    ["Alignment of lysp_deviate"]
        [::std::mem::align_of::<lysp_deviate>() - 8usize];
    ["Offset of field: lysp_deviate::mod_"]
        [::std::mem::offset_of!(lysp_deviate, mod_) - 0usize];
    ["Offset of field: lysp_deviate::next"]
        [::std::mem::offset_of!(lysp_deviate, next) - 8usize];
    ["Offset of field: lysp_deviate::exts"]
        [::std::mem::offset_of!(lysp_deviate, exts) - 16usize];
};
impl Default for lysp_deviate {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_deviate_add {
    pub mod_: u8,
    pub next: *mut lysp_deviate,
    pub exts: *mut lysp_ext_instance,
    pub units: *const ::std::os::raw::c_char,
    pub musts: *mut lysp_restr,
    pub uniques: *mut lysp_qname,
    pub dflts: *mut lysp_qname,
    pub flags: u16,
    pub min: u32,
    pub max: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_deviate_add"]
        [::std::mem::size_of::<lysp_deviate_add>() - 72usize];
    ["Alignment of lysp_deviate_add"]
        [::std::mem::align_of::<lysp_deviate_add>() - 8usize];
    ["Offset of field: lysp_deviate_add::mod_"]
        [::std::mem::offset_of!(lysp_deviate_add, mod_) - 0usize];
    ["Offset of field: lysp_deviate_add::next"]
        [::std::mem::offset_of!(lysp_deviate_add, next) - 8usize];
    ["Offset of field: lysp_deviate_add::exts"]
        [::std::mem::offset_of!(lysp_deviate_add, exts) - 16usize];
    ["Offset of field: lysp_deviate_add::units"]
        [::std::mem::offset_of!(lysp_deviate_add, units) - 24usize];
    ["Offset of field: lysp_deviate_add::musts"]
        [::std::mem::offset_of!(lysp_deviate_add, musts) - 32usize];
    ["Offset of field: lysp_deviate_add::uniques"]
        [::std::mem::offset_of!(lysp_deviate_add, uniques) - 40usize];
    ["Offset of field: lysp_deviate_add::dflts"]
        [::std::mem::offset_of!(lysp_deviate_add, dflts) - 48usize];
    ["Offset of field: lysp_deviate_add::flags"]
        [::std::mem::offset_of!(lysp_deviate_add, flags) - 56usize];
    ["Offset of field: lysp_deviate_add::min"]
        [::std::mem::offset_of!(lysp_deviate_add, min) - 60usize];
    ["Offset of field: lysp_deviate_add::max"]
        [::std::mem::offset_of!(lysp_deviate_add, max) - 64usize];
};
impl Default for lysp_deviate_add {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_deviate_del {
    pub mod_: u8,
    pub next: *mut lysp_deviate,
    pub exts: *mut lysp_ext_instance,
    pub units: *const ::std::os::raw::c_char,
    pub musts: *mut lysp_restr,
    pub uniques: *mut lysp_qname,
    pub dflts: *mut lysp_qname,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_deviate_del"]
        [::std::mem::size_of::<lysp_deviate_del>() - 56usize];
    ["Alignment of lysp_deviate_del"]
        [::std::mem::align_of::<lysp_deviate_del>() - 8usize];
    ["Offset of field: lysp_deviate_del::mod_"]
        [::std::mem::offset_of!(lysp_deviate_del, mod_) - 0usize];
    ["Offset of field: lysp_deviate_del::next"]
        [::std::mem::offset_of!(lysp_deviate_del, next) - 8usize];
    ["Offset of field: lysp_deviate_del::exts"]
        [::std::mem::offset_of!(lysp_deviate_del, exts) - 16usize];
    ["Offset of field: lysp_deviate_del::units"]
        [::std::mem::offset_of!(lysp_deviate_del, units) - 24usize];
    ["Offset of field: lysp_deviate_del::musts"]
        [::std::mem::offset_of!(lysp_deviate_del, musts) - 32usize];
    ["Offset of field: lysp_deviate_del::uniques"]
        [::std::mem::offset_of!(lysp_deviate_del, uniques) - 40usize];
    ["Offset of field: lysp_deviate_del::dflts"]
        [::std::mem::offset_of!(lysp_deviate_del, dflts) - 48usize];
};
impl Default for lysp_deviate_del {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_deviate_rpl {
    pub mod_: u8,
    pub next: *mut lysp_deviate,
    pub exts: *mut lysp_ext_instance,
    pub type_: *mut lysp_type,
    pub units: *const ::std::os::raw::c_char,
    pub dflt: lysp_qname,
    pub flags: u16,
    pub min: u32,
    pub max: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_deviate_rpl"]
        [::std::mem::size_of::<lysp_deviate_rpl>() - 80usize];
    ["Alignment of lysp_deviate_rpl"]
        [::std::mem::align_of::<lysp_deviate_rpl>() - 8usize];
    ["Offset of field: lysp_deviate_rpl::mod_"]
        [::std::mem::offset_of!(lysp_deviate_rpl, mod_) - 0usize];
    ["Offset of field: lysp_deviate_rpl::next"]
        [::std::mem::offset_of!(lysp_deviate_rpl, next) - 8usize];
    ["Offset of field: lysp_deviate_rpl::exts"]
        [::std::mem::offset_of!(lysp_deviate_rpl, exts) - 16usize];
    ["Offset of field: lysp_deviate_rpl::type_"]
        [::std::mem::offset_of!(lysp_deviate_rpl, type_) - 24usize];
    ["Offset of field: lysp_deviate_rpl::units"]
        [::std::mem::offset_of!(lysp_deviate_rpl, units) - 32usize];
    ["Offset of field: lysp_deviate_rpl::dflt"]
        [::std::mem::offset_of!(lysp_deviate_rpl, dflt) - 40usize];
    ["Offset of field: lysp_deviate_rpl::flags"]
        [::std::mem::offset_of!(lysp_deviate_rpl, flags) - 64usize];
    ["Offset of field: lysp_deviate_rpl::min"]
        [::std::mem::offset_of!(lysp_deviate_rpl, min) - 68usize];
    ["Offset of field: lysp_deviate_rpl::max"]
        [::std::mem::offset_of!(lysp_deviate_rpl, max) - 72usize];
};
impl Default for lysp_deviate_rpl {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_deviation {
    pub nodeid: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub deviates: *mut lysp_deviate,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_deviation"]
        [::std::mem::size_of::<lysp_deviation>() - 40usize];
    ["Alignment of lysp_deviation"]
        [::std::mem::align_of::<lysp_deviation>() - 8usize];
    ["Offset of field: lysp_deviation::nodeid"]
        [::std::mem::offset_of!(lysp_deviation, nodeid) - 0usize];
    ["Offset of field: lysp_deviation::dsc"]
        [::std::mem::offset_of!(lysp_deviation, dsc) - 8usize];
    ["Offset of field: lysp_deviation::ref_"]
        [::std::mem::offset_of!(lysp_deviation, ref_) - 16usize];
    ["Offset of field: lysp_deviation::deviates"]
        [::std::mem::offset_of!(lysp_deviation, deviates) - 24usize];
    ["Offset of field: lysp_deviation::exts"]
        [::std::mem::offset_of!(lysp_deviation, exts) - 32usize];
};
impl Default for lysp_deviation {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node"][::std::mem::size_of::<lysp_node>() - 64usize];
    ["Alignment of lysp_node"][::std::mem::align_of::<lysp_node>() - 8usize];
    ["Offset of field: lysp_node::parent"]
        [::std::mem::offset_of!(lysp_node, parent) - 0usize];
    ["Offset of field: lysp_node::nodetype"]
        [::std::mem::offset_of!(lysp_node, nodetype) - 8usize];
    ["Offset of field: lysp_node::flags"]
        [::std::mem::offset_of!(lysp_node, flags) - 10usize];
    ["Offset of field: lysp_node::next"]
        [::std::mem::offset_of!(lysp_node, next) - 16usize];
    ["Offset of field: lysp_node::name"]
        [::std::mem::offset_of!(lysp_node, name) - 24usize];
    ["Offset of field: lysp_node::dsc"]
        [::std::mem::offset_of!(lysp_node, dsc) - 32usize];
    ["Offset of field: lysp_node::ref_"]
        [::std::mem::offset_of!(lysp_node, ref_) - 40usize];
    ["Offset of field: lysp_node::iffeatures"]
        [::std::mem::offset_of!(lysp_node, iffeatures) - 48usize];
    ["Offset of field: lysp_node::exts"]
        [::std::mem::offset_of!(lysp_node, exts) - 56usize];
};
impl Default for lysp_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_container {
    pub __bindgen_anon_1: lysp_node_container__bindgen_ty_1,
    pub musts: *mut lysp_restr,
    pub when: *mut lysp_when,
    pub presence: *const ::std::os::raw::c_char,
    pub typedefs: *mut lysp_tpdf,
    pub groupings: *mut lysp_node_grp,
    pub child: *mut lysp_node,
    pub actions: *mut lysp_node_action,
    pub notifs: *mut lysp_node_notif,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_container__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_container__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_container__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_container__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_container__bindgen_ty_1__bindgen_ty_1>(
        ) - 64usize];
    ["Alignment of lysp_node_container__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_container__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    [
        "Offset of field: lysp_node_container__bindgen_ty_1__bindgen_ty_1::parent",
    ][::std::mem::offset_of!(
        lysp_node_container__bindgen_ty_1__bindgen_ty_1,
        parent
    ) - 0usize];
    [
        "Offset of field: lysp_node_container__bindgen_ty_1__bindgen_ty_1::nodetype",
    ][::std::mem::offset_of!(
        lysp_node_container__bindgen_ty_1__bindgen_ty_1,
        nodetype
    ) - 8usize];
    ["Offset of field: lysp_node_container__bindgen_ty_1__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(
            lysp_node_container__bindgen_ty_1__bindgen_ty_1,
            flags
        ) - 10usize];
    ["Offset of field: lysp_node_container__bindgen_ty_1__bindgen_ty_1::next"]
        [::std::mem::offset_of!(
            lysp_node_container__bindgen_ty_1__bindgen_ty_1,
            next
        ) - 16usize];
    ["Offset of field: lysp_node_container__bindgen_ty_1__bindgen_ty_1::name"]
        [::std::mem::offset_of!(
            lysp_node_container__bindgen_ty_1__bindgen_ty_1,
            name
        ) - 24usize];
    ["Offset of field: lysp_node_container__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_container__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_container__bindgen_ty_1__bindgen_ty_1::ref_"]
        [::std::mem::offset_of!(
            lysp_node_container__bindgen_ty_1__bindgen_ty_1,
            ref_
        ) - 40usize];
    [
        "Offset of field: lysp_node_container__bindgen_ty_1__bindgen_ty_1::iffeatures",
    ][::std::mem::offset_of!(
        lysp_node_container__bindgen_ty_1__bindgen_ty_1,
        iffeatures
    ) - 48usize];
    ["Offset of field: lysp_node_container__bindgen_ty_1__bindgen_ty_1::exts"]
        [::std::mem::offset_of!(
            lysp_node_container__bindgen_ty_1__bindgen_ty_1,
            exts
        ) - 56usize];
};
impl Default for lysp_node_container__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_container__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_container__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_container__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_container__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_container__bindgen_ty_1::node"][::std::mem::offset_of!(
        lysp_node_container__bindgen_ty_1,
        node
    ) - 0usize];
};
impl Default for lysp_node_container__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_container"]
        [::std::mem::size_of::<lysp_node_container>() - 128usize];
    ["Alignment of lysp_node_container"]
        [::std::mem::align_of::<lysp_node_container>() - 8usize];
    ["Offset of field: lysp_node_container::musts"]
        [::std::mem::offset_of!(lysp_node_container, musts) - 64usize];
    ["Offset of field: lysp_node_container::when"]
        [::std::mem::offset_of!(lysp_node_container, when) - 72usize];
    ["Offset of field: lysp_node_container::presence"]
        [::std::mem::offset_of!(lysp_node_container, presence) - 80usize];
    ["Offset of field: lysp_node_container::typedefs"]
        [::std::mem::offset_of!(lysp_node_container, typedefs) - 88usize];
    ["Offset of field: lysp_node_container::groupings"]
        [::std::mem::offset_of!(lysp_node_container, groupings) - 96usize];
    ["Offset of field: lysp_node_container::child"]
        [::std::mem::offset_of!(lysp_node_container, child) - 104usize];
    ["Offset of field: lysp_node_container::actions"]
        [::std::mem::offset_of!(lysp_node_container, actions) - 112usize];
    ["Offset of field: lysp_node_container::notifs"]
        [::std::mem::offset_of!(lysp_node_container, notifs) - 120usize];
};
impl Default for lysp_node_container {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_leaf {
    pub __bindgen_anon_1: lysp_node_leaf__bindgen_ty_1,
    pub musts: *mut lysp_restr,
    pub when: *mut lysp_when,
    pub type_: lysp_type,
    pub units: *const ::std::os::raw::c_char,
    pub dflt: lysp_qname,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_leaf__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_leaf__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_leaf__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
    >() - 64usize];
    ["Alignment of lysp_node_leaf__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_leaf__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 0usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1::nodetype"][::std::mem::offset_of!(
        lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
        nodetype
    )
        - 8usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1::iffeatures"]
        [::std::mem::offset_of!(
            lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
            iffeatures
        ) - 48usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_leaf__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_leaf__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_leaf__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_leaf__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_leaf__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_leaf__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_leaf__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysp_node_leaf__bindgen_ty_1, node) - 0usize];
};
impl Default for lysp_node_leaf__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_leaf"]
        [::std::mem::size_of::<lysp_node_leaf>() - 216usize];
    ["Alignment of lysp_node_leaf"]
        [::std::mem::align_of::<lysp_node_leaf>() - 8usize];
    ["Offset of field: lysp_node_leaf::musts"]
        [::std::mem::offset_of!(lysp_node_leaf, musts) - 64usize];
    ["Offset of field: lysp_node_leaf::when"]
        [::std::mem::offset_of!(lysp_node_leaf, when) - 72usize];
    ["Offset of field: lysp_node_leaf::type_"]
        [::std::mem::offset_of!(lysp_node_leaf, type_) - 80usize];
    ["Offset of field: lysp_node_leaf::units"]
        [::std::mem::offset_of!(lysp_node_leaf, units) - 184usize];
    ["Offset of field: lysp_node_leaf::dflt"]
        [::std::mem::offset_of!(lysp_node_leaf, dflt) - 192usize];
};
impl Default for lysp_node_leaf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_leaflist {
    pub __bindgen_anon_1: lysp_node_leaflist__bindgen_ty_1,
    pub musts: *mut lysp_restr,
    pub when: *mut lysp_when,
    pub type_: lysp_type,
    pub units: *const ::std::os::raw::c_char,
    pub dflts: *mut lysp_qname,
    pub min: u32,
    pub max: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_leaflist__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1>(
        ) - 64usize];
    ["Alignment of lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1::parent"]
        [::std::mem::offset_of!(
            lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
            parent
        ) - 0usize];
    [
        "Offset of field: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1::nodetype",
    ][::std::mem::offset_of!(
        lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        nodetype
    ) - 8usize];
    ["Offset of field: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(
            lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
            flags
        ) - 10usize];
    ["Offset of field: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    [
        "Offset of field: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1::iffeatures",
    ][::std::mem::offset_of!(
        lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        iffeatures
    ) - 48usize];
    ["Offset of field: lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_leaflist__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_leaflist__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_leaflist__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_leaflist__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_leaflist__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_leaflist__bindgen_ty_1::node"][::std::mem::offset_of!(
        lysp_node_leaflist__bindgen_ty_1,
        node
    ) - 0usize];
};
impl Default for lysp_node_leaflist__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_leaflist"]
        [::std::mem::size_of::<lysp_node_leaflist>() - 208usize];
    ["Alignment of lysp_node_leaflist"]
        [::std::mem::align_of::<lysp_node_leaflist>() - 8usize];
    ["Offset of field: lysp_node_leaflist::musts"]
        [::std::mem::offset_of!(lysp_node_leaflist, musts) - 64usize];
    ["Offset of field: lysp_node_leaflist::when"]
        [::std::mem::offset_of!(lysp_node_leaflist, when) - 72usize];
    ["Offset of field: lysp_node_leaflist::type_"]
        [::std::mem::offset_of!(lysp_node_leaflist, type_) - 80usize];
    ["Offset of field: lysp_node_leaflist::units"]
        [::std::mem::offset_of!(lysp_node_leaflist, units) - 184usize];
    ["Offset of field: lysp_node_leaflist::dflts"]
        [::std::mem::offset_of!(lysp_node_leaflist, dflts) - 192usize];
    ["Offset of field: lysp_node_leaflist::min"]
        [::std::mem::offset_of!(lysp_node_leaflist, min) - 200usize];
    ["Offset of field: lysp_node_leaflist::max"]
        [::std::mem::offset_of!(lysp_node_leaflist, max) - 204usize];
};
impl Default for lysp_node_leaflist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_list {
    pub __bindgen_anon_1: lysp_node_list__bindgen_ty_1,
    pub musts: *mut lysp_restr,
    pub when: *mut lysp_when,
    pub key: *const ::std::os::raw::c_char,
    pub typedefs: *mut lysp_tpdf,
    pub groupings: *mut lysp_node_grp,
    pub child: *mut lysp_node,
    pub actions: *mut lysp_node_action,
    pub notifs: *mut lysp_node_notif,
    pub uniques: *mut lysp_qname,
    pub min: u32,
    pub max: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_list__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_list__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_list__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_list__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysp_node_list__bindgen_ty_1__bindgen_ty_1,
    >() - 64usize];
    ["Alignment of lysp_node_list__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_list__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysp_node_list__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 0usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1__bindgen_ty_1::nodetype"][::std::mem::offset_of!(
        lysp_node_list__bindgen_ty_1__bindgen_ty_1,
        nodetype
    )
        - 8usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_list__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_list__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_list__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_list__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_list__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1__bindgen_ty_1::iffeatures"]
        [::std::mem::offset_of!(
            lysp_node_list__bindgen_ty_1__bindgen_ty_1,
            iffeatures
        ) - 48usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_list__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_list__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_list__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_list__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_list__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_list__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_list__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysp_node_list__bindgen_ty_1, node) - 0usize];
};
impl Default for lysp_node_list__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_list"]
        [::std::mem::size_of::<lysp_node_list>() - 144usize];
    ["Alignment of lysp_node_list"]
        [::std::mem::align_of::<lysp_node_list>() - 8usize];
    ["Offset of field: lysp_node_list::musts"]
        [::std::mem::offset_of!(lysp_node_list, musts) - 64usize];
    ["Offset of field: lysp_node_list::when"]
        [::std::mem::offset_of!(lysp_node_list, when) - 72usize];
    ["Offset of field: lysp_node_list::key"]
        [::std::mem::offset_of!(lysp_node_list, key) - 80usize];
    ["Offset of field: lysp_node_list::typedefs"]
        [::std::mem::offset_of!(lysp_node_list, typedefs) - 88usize];
    ["Offset of field: lysp_node_list::groupings"]
        [::std::mem::offset_of!(lysp_node_list, groupings) - 96usize];
    ["Offset of field: lysp_node_list::child"]
        [::std::mem::offset_of!(lysp_node_list, child) - 104usize];
    ["Offset of field: lysp_node_list::actions"]
        [::std::mem::offset_of!(lysp_node_list, actions) - 112usize];
    ["Offset of field: lysp_node_list::notifs"]
        [::std::mem::offset_of!(lysp_node_list, notifs) - 120usize];
    ["Offset of field: lysp_node_list::uniques"]
        [::std::mem::offset_of!(lysp_node_list, uniques) - 128usize];
    ["Offset of field: lysp_node_list::min"]
        [::std::mem::offset_of!(lysp_node_list, min) - 136usize];
    ["Offset of field: lysp_node_list::max"]
        [::std::mem::offset_of!(lysp_node_list, max) - 140usize];
};
impl Default for lysp_node_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_choice {
    pub __bindgen_anon_1: lysp_node_choice__bindgen_ty_1,
    pub child: *mut lysp_node,
    pub when: *mut lysp_when,
    pub dflt: lysp_qname,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_choice__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_choice__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_choice__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
    >() - 64usize];
    ["Alignment of lysp_node_choice__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_choice__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: lysp_node_choice__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 0usize];
    ["Offset of field: lysp_node_choice__bindgen_ty_1__bindgen_ty_1::nodetype"]
        [::std::mem::offset_of!(
            lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
            nodetype
        ) - 8usize];
    ["Offset of field: lysp_node_choice__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_choice__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_choice__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_choice__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_choice__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    [
        "Offset of field: lysp_node_choice__bindgen_ty_1__bindgen_ty_1::iffeatures",
    ][::std::mem::offset_of!(
        lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
        iffeatures
    ) - 48usize];
    ["Offset of field: lysp_node_choice__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_choice__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_choice__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_choice__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_choice__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_choice__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_choice__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_choice__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysp_node_choice__bindgen_ty_1, node) - 0usize];
};
impl Default for lysp_node_choice__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_choice"]
        [::std::mem::size_of::<lysp_node_choice>() - 104usize];
    ["Alignment of lysp_node_choice"]
        [::std::mem::align_of::<lysp_node_choice>() - 8usize];
    ["Offset of field: lysp_node_choice::child"]
        [::std::mem::offset_of!(lysp_node_choice, child) - 64usize];
    ["Offset of field: lysp_node_choice::when"]
        [::std::mem::offset_of!(lysp_node_choice, when) - 72usize];
    ["Offset of field: lysp_node_choice::dflt"]
        [::std::mem::offset_of!(lysp_node_choice, dflt) - 80usize];
};
impl Default for lysp_node_choice {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_case {
    pub __bindgen_anon_1: lysp_node_case__bindgen_ty_1,
    pub child: *mut lysp_node,
    pub when: *mut lysp_when,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_case__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_case__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_case__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_case__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysp_node_case__bindgen_ty_1__bindgen_ty_1,
    >() - 64usize];
    ["Alignment of lysp_node_case__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_case__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysp_node_case__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 0usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1__bindgen_ty_1::nodetype"][::std::mem::offset_of!(
        lysp_node_case__bindgen_ty_1__bindgen_ty_1,
        nodetype
    )
        - 8usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_case__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_case__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_case__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_case__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_case__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1__bindgen_ty_1::iffeatures"]
        [::std::mem::offset_of!(
            lysp_node_case__bindgen_ty_1__bindgen_ty_1,
            iffeatures
        ) - 48usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_case__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_case__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_case__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_case__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_case__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_case__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_case__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysp_node_case__bindgen_ty_1, node) - 0usize];
};
impl Default for lysp_node_case__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_case"]
        [::std::mem::size_of::<lysp_node_case>() - 80usize];
    ["Alignment of lysp_node_case"]
        [::std::mem::align_of::<lysp_node_case>() - 8usize];
    ["Offset of field: lysp_node_case::child"]
        [::std::mem::offset_of!(lysp_node_case, child) - 64usize];
    ["Offset of field: lysp_node_case::when"]
        [::std::mem::offset_of!(lysp_node_case, when) - 72usize];
};
impl Default for lysp_node_case {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_anydata {
    pub __bindgen_anon_1: lysp_node_anydata__bindgen_ty_1,
    pub musts: *mut lysp_restr,
    pub when: *mut lysp_when,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_anydata__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_anydata__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_anydata__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_anydata__bindgen_ty_1__bindgen_ty_1>(
        ) - 64usize];
    ["Alignment of lysp_node_anydata__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_anydata__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1::parent"]
        [::std::mem::offset_of!(
            lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
            parent
        ) - 0usize];
    [
        "Offset of field: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1::nodetype",
    ][::std::mem::offset_of!(
        lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
        nodetype
    ) - 8usize];
    ["Offset of field: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    [
        "Offset of field: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1::iffeatures",
    ][::std::mem::offset_of!(
        lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
        iffeatures
    ) - 48usize];
    ["Offset of field: lysp_node_anydata__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_anydata__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_anydata__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_anydata__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_anydata__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_anydata__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_anydata__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_anydata__bindgen_ty_1::node"][::std::mem::offset_of!(
        lysp_node_anydata__bindgen_ty_1,
        node
    ) - 0usize];
};
impl Default for lysp_node_anydata__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_anydata"]
        [::std::mem::size_of::<lysp_node_anydata>() - 80usize];
    ["Alignment of lysp_node_anydata"]
        [::std::mem::align_of::<lysp_node_anydata>() - 8usize];
    ["Offset of field: lysp_node_anydata::musts"]
        [::std::mem::offset_of!(lysp_node_anydata, musts) - 64usize];
    ["Offset of field: lysp_node_anydata::when"]
        [::std::mem::offset_of!(lysp_node_anydata, when) - 72usize];
};
impl Default for lysp_node_anydata {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_uses {
    pub __bindgen_anon_1: lysp_node_uses__bindgen_ty_1,
    pub refines: *mut lysp_refine,
    pub augments: *mut lysp_node_augment,
    pub when: *mut lysp_when,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_uses__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_uses__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_uses__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
    >() - 64usize];
    ["Alignment of lysp_node_uses__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_uses__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 0usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1__bindgen_ty_1::nodetype"][::std::mem::offset_of!(
        lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
        nodetype
    )
        - 8usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1__bindgen_ty_1::iffeatures"]
        [::std::mem::offset_of!(
            lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
            iffeatures
        ) - 48usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_uses__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_uses__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_uses__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_uses__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_uses__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_uses__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_uses__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysp_node_uses__bindgen_ty_1, node) - 0usize];
};
impl Default for lysp_node_uses__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_uses"]
        [::std::mem::size_of::<lysp_node_uses>() - 88usize];
    ["Alignment of lysp_node_uses"]
        [::std::mem::align_of::<lysp_node_uses>() - 8usize];
    ["Offset of field: lysp_node_uses::refines"]
        [::std::mem::offset_of!(lysp_node_uses, refines) - 64usize];
    ["Offset of field: lysp_node_uses::augments"]
        [::std::mem::offset_of!(lysp_node_uses, augments) - 72usize];
    ["Offset of field: lysp_node_uses::when"]
        [::std::mem::offset_of!(lysp_node_uses, when) - 80usize];
};
impl Default for lysp_node_uses {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_action_inout {
    pub __bindgen_anon_1: lysp_node_action_inout__bindgen_ty_1,
    pub musts: *mut lysp_restr,
    pub typedefs: *mut lysp_tpdf,
    pub groupings: *mut lysp_node_grp,
    pub child: *mut lysp_node,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_action_inout__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        >() - 64usize];
    ["Alignment of lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        >() - 8usize];
    [
        "Offset of field: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1::parent",
    ][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        parent
    ) - 0usize];
    [
        "Offset of field: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1::nodetype",
    ][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        nodetype
    ) - 8usize];
    [
        "Offset of field: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1::flags",
    ][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        flags
    ) - 10usize];
    [
        "Offset of field: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1::next",
    ][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        next
    ) - 16usize];
    [
        "Offset of field: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1::name",
    ][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        name
    ) - 24usize];
    [
        "Offset of field: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1::dsc",
    ][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        dsc
    ) - 32usize];
    [
        "Offset of field: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1::ref_",
    ][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        ref_
    ) - 40usize];
    [
        "Offset of field: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1::iffeatures",
    ][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        iffeatures
    ) - 48usize];
    [
        "Offset of field: lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1::exts",
    ][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        exts
    ) - 56usize];
};
impl Default for lysp_node_action_inout__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_action_inout__bindgen_ty_1"][::std::mem::size_of::<
        lysp_node_action_inout__bindgen_ty_1,
    >() - 64usize];
    ["Alignment of lysp_node_action_inout__bindgen_ty_1"][::std::mem::align_of::<
        lysp_node_action_inout__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: lysp_node_action_inout__bindgen_ty_1::node"][::std::mem::offset_of!(
        lysp_node_action_inout__bindgen_ty_1,
        node
    ) - 0usize];
};
impl Default for lysp_node_action_inout__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_action_inout"]
        [::std::mem::size_of::<lysp_node_action_inout>() - 96usize];
    ["Alignment of lysp_node_action_inout"]
        [::std::mem::align_of::<lysp_node_action_inout>() - 8usize];
    ["Offset of field: lysp_node_action_inout::musts"]
        [::std::mem::offset_of!(lysp_node_action_inout, musts) - 64usize];
    ["Offset of field: lysp_node_action_inout::typedefs"]
        [::std::mem::offset_of!(lysp_node_action_inout, typedefs) - 72usize];
    ["Offset of field: lysp_node_action_inout::groupings"]
        [::std::mem::offset_of!(lysp_node_action_inout, groupings) - 80usize];
    ["Offset of field: lysp_node_action_inout::child"]
        [::std::mem::offset_of!(lysp_node_action_inout, child) - 88usize];
};
impl Default for lysp_node_action_inout {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_action {
    pub __bindgen_anon_1: lysp_node_action__bindgen_ty_1,
    pub typedefs: *mut lysp_tpdf,
    pub groupings: *mut lysp_node_grp,
    pub input: lysp_node_action_inout,
    pub output: lysp_node_action_inout,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_action__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_action__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_action__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node_action,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_action__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysp_node_action__bindgen_ty_1__bindgen_ty_1,
    >() - 64usize];
    ["Alignment of lysp_node_action__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_action__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: lysp_node_action__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysp_node_action__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 0usize];
    ["Offset of field: lysp_node_action__bindgen_ty_1__bindgen_ty_1::nodetype"]
        [::std::mem::offset_of!(
            lysp_node_action__bindgen_ty_1__bindgen_ty_1,
            nodetype
        ) - 8usize];
    ["Offset of field: lysp_node_action__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_action__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_action__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_action__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_action__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_action__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_action__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_action__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_action__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_action__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    [
        "Offset of field: lysp_node_action__bindgen_ty_1__bindgen_ty_1::iffeatures",
    ][::std::mem::offset_of!(
        lysp_node_action__bindgen_ty_1__bindgen_ty_1,
        iffeatures
    ) - 48usize];
    ["Offset of field: lysp_node_action__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_action__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_action__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_action__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_action__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_action__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_action__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_action__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysp_node_action__bindgen_ty_1, node) - 0usize];
};
impl Default for lysp_node_action__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_action"]
        [::std::mem::size_of::<lysp_node_action>() - 272usize];
    ["Alignment of lysp_node_action"]
        [::std::mem::align_of::<lysp_node_action>() - 8usize];
    ["Offset of field: lysp_node_action::typedefs"]
        [::std::mem::offset_of!(lysp_node_action, typedefs) - 64usize];
    ["Offset of field: lysp_node_action::groupings"]
        [::std::mem::offset_of!(lysp_node_action, groupings) - 72usize];
    ["Offset of field: lysp_node_action::input"]
        [::std::mem::offset_of!(lysp_node_action, input) - 80usize];
    ["Offset of field: lysp_node_action::output"]
        [::std::mem::offset_of!(lysp_node_action, output) - 176usize];
};
impl Default for lysp_node_action {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_notif {
    pub __bindgen_anon_1: lysp_node_notif__bindgen_ty_1,
    pub musts: *mut lysp_restr,
    pub typedefs: *mut lysp_tpdf,
    pub groupings: *mut lysp_node_grp,
    pub child: *mut lysp_node,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_notif__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_notif__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node_notif,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_notif__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
    >() - 64usize];
    ["Alignment of lysp_node_notif__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_notif__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysp_node_notif__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 0usize];
    ["Offset of field: lysp_node_notif__bindgen_ty_1__bindgen_ty_1::nodetype"]
        [::std::mem::offset_of!(
            lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
            nodetype
        ) - 8usize];
    ["Offset of field: lysp_node_notif__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_notif__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_notif__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_notif__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_notif__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    [
        "Offset of field: lysp_node_notif__bindgen_ty_1__bindgen_ty_1::iffeatures",
    ][::std::mem::offset_of!(
        lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
        iffeatures
    ) - 48usize];
    ["Offset of field: lysp_node_notif__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_notif__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_notif__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_notif__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_notif__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_notif__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_notif__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_notif__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysp_node_notif__bindgen_ty_1, node) - 0usize];
};
impl Default for lysp_node_notif__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_notif"]
        [::std::mem::size_of::<lysp_node_notif>() - 96usize];
    ["Alignment of lysp_node_notif"]
        [::std::mem::align_of::<lysp_node_notif>() - 8usize];
    ["Offset of field: lysp_node_notif::musts"]
        [::std::mem::offset_of!(lysp_node_notif, musts) - 64usize];
    ["Offset of field: lysp_node_notif::typedefs"]
        [::std::mem::offset_of!(lysp_node_notif, typedefs) - 72usize];
    ["Offset of field: lysp_node_notif::groupings"]
        [::std::mem::offset_of!(lysp_node_notif, groupings) - 80usize];
    ["Offset of field: lysp_node_notif::child"]
        [::std::mem::offset_of!(lysp_node_notif, child) - 88usize];
};
impl Default for lysp_node_notif {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_grp {
    pub __bindgen_anon_1: lysp_node_grp__bindgen_ty_1,
    pub typedefs: *mut lysp_tpdf,
    pub groupings: *mut lysp_node_grp,
    pub child: *mut lysp_node,
    pub actions: *mut lysp_node_action,
    pub notifs: *mut lysp_node_notif,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_grp__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_grp__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node_grp,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_grp__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
    >() - 64usize];
    ["Alignment of lysp_node_grp__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_grp__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 0usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1__bindgen_ty_1::nodetype"][::std::mem::offset_of!(
        lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
        nodetype
    )
        - 8usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 24usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1__bindgen_ty_1::iffeatures"]
        [::std::mem::offset_of!(
            lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
            iffeatures
        ) - 48usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_grp__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_grp__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_grp__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_grp__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_grp__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_grp__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_grp__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysp_node_grp__bindgen_ty_1, node) - 0usize];
};
impl Default for lysp_node_grp__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_grp"]
        [::std::mem::size_of::<lysp_node_grp>() - 104usize];
    ["Alignment of lysp_node_grp"]
        [::std::mem::align_of::<lysp_node_grp>() - 8usize];
    ["Offset of field: lysp_node_grp::typedefs"]
        [::std::mem::offset_of!(lysp_node_grp, typedefs) - 64usize];
    ["Offset of field: lysp_node_grp::groupings"]
        [::std::mem::offset_of!(lysp_node_grp, groupings) - 72usize];
    ["Offset of field: lysp_node_grp::child"]
        [::std::mem::offset_of!(lysp_node_grp, child) - 80usize];
    ["Offset of field: lysp_node_grp::actions"]
        [::std::mem::offset_of!(lysp_node_grp, actions) - 88usize];
    ["Offset of field: lysp_node_grp::notifs"]
        [::std::mem::offset_of!(lysp_node_grp, notifs) - 96usize];
};
impl Default for lysp_node_grp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysp_node_augment {
    pub __bindgen_anon_1: lysp_node_augment__bindgen_ty_1,
    pub child: *mut lysp_node,
    pub when: *mut lysp_when,
    pub actions: *mut lysp_node_action,
    pub notifs: *mut lysp_node_notif,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysp_node_augment__bindgen_ty_1 {
    pub node: lysp_node,
    pub __bindgen_anon_1: lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_node_augment__bindgen_ty_1__bindgen_ty_1 {
    pub parent: *mut lysp_node,
    pub nodetype: u16,
    pub flags: u16,
    pub next: *mut lysp_node_augment,
    pub nodeid: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub iffeatures: *mut lysp_qname,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_augment__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_augment__bindgen_ty_1__bindgen_ty_1>(
        ) - 64usize];
    ["Alignment of lysp_node_augment__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_augment__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: lysp_node_augment__bindgen_ty_1__bindgen_ty_1::parent"]
        [::std::mem::offset_of!(
            lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
            parent
        ) - 0usize];
    [
        "Offset of field: lysp_node_augment__bindgen_ty_1__bindgen_ty_1::nodetype",
    ][::std::mem::offset_of!(
        lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
        nodetype
    ) - 8usize];
    ["Offset of field: lysp_node_augment__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 10usize];
    ["Offset of field: lysp_node_augment__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 16usize];
    ["Offset of field: lysp_node_augment__bindgen_ty_1__bindgen_ty_1::nodeid"]
        [::std::mem::offset_of!(
            lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
            nodeid
        ) - 24usize];
    ["Offset of field: lysp_node_augment__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 32usize];
    ["Offset of field: lysp_node_augment__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 40usize];
    [
        "Offset of field: lysp_node_augment__bindgen_ty_1__bindgen_ty_1::iffeatures",
    ][::std::mem::offset_of!(
        lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
        iffeatures
    ) - 48usize];
    ["Offset of field: lysp_node_augment__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysp_node_augment__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 56usize];
};
impl Default for lysp_node_augment__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_augment__bindgen_ty_1"]
        [::std::mem::size_of::<lysp_node_augment__bindgen_ty_1>() - 64usize];
    ["Alignment of lysp_node_augment__bindgen_ty_1"]
        [::std::mem::align_of::<lysp_node_augment__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysp_node_augment__bindgen_ty_1::node"][::std::mem::offset_of!(
        lysp_node_augment__bindgen_ty_1,
        node
    ) - 0usize];
};
impl Default for lysp_node_augment__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_node_augment"]
        [::std::mem::size_of::<lysp_node_augment>() - 96usize];
    ["Alignment of lysp_node_augment"]
        [::std::mem::align_of::<lysp_node_augment>() - 8usize];
    ["Offset of field: lysp_node_augment::child"]
        [::std::mem::offset_of!(lysp_node_augment, child) - 64usize];
    ["Offset of field: lysp_node_augment::when"]
        [::std::mem::offset_of!(lysp_node_augment, when) - 72usize];
    ["Offset of field: lysp_node_augment::actions"]
        [::std::mem::offset_of!(lysp_node_augment, actions) - 80usize];
    ["Offset of field: lysp_node_augment::notifs"]
        [::std::mem::offset_of!(lysp_node_augment, notifs) - 88usize];
};
impl Default for lysp_node_augment {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub mod LYS_VERSION {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYS_VERSION_UNDEF: Type = 0;
    pub const LYS_VERSION_1_0: Type = 1;
    pub const LYS_VERSION_1_1: Type = 2;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_module {
    pub mod_: *mut lys_module,
    pub revs: *mut lysp_revision,
    pub imports: *mut lysp_import,
    pub includes: *mut lysp_include,
    pub extensions: *mut lysp_ext,
    pub features: *mut lysp_feature,
    pub identities: *mut lysp_ident,
    pub typedefs: *mut lysp_tpdf,
    pub groupings: *mut lysp_node_grp,
    pub data: *mut lysp_node,
    pub augments: *mut lysp_node_augment,
    pub rpcs: *mut lysp_node_action,
    pub notifs: *mut lysp_node_notif,
    pub deviations: *mut lysp_deviation,
    pub exts: *mut lysp_ext_instance,
    pub version: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_module"][::std::mem::size_of::<lysp_module>() - 128usize];
    ["Alignment of lysp_module"]
        [::std::mem::align_of::<lysp_module>() - 8usize];
    ["Offset of field: lysp_module::mod_"]
        [::std::mem::offset_of!(lysp_module, mod_) - 0usize];
    ["Offset of field: lysp_module::revs"]
        [::std::mem::offset_of!(lysp_module, revs) - 8usize];
    ["Offset of field: lysp_module::imports"]
        [::std::mem::offset_of!(lysp_module, imports) - 16usize];
    ["Offset of field: lysp_module::includes"]
        [::std::mem::offset_of!(lysp_module, includes) - 24usize];
    ["Offset of field: lysp_module::extensions"]
        [::std::mem::offset_of!(lysp_module, extensions) - 32usize];
    ["Offset of field: lysp_module::features"]
        [::std::mem::offset_of!(lysp_module, features) - 40usize];
    ["Offset of field: lysp_module::identities"]
        [::std::mem::offset_of!(lysp_module, identities) - 48usize];
    ["Offset of field: lysp_module::typedefs"]
        [::std::mem::offset_of!(lysp_module, typedefs) - 56usize];
    ["Offset of field: lysp_module::groupings"]
        [::std::mem::offset_of!(lysp_module, groupings) - 64usize];
    ["Offset of field: lysp_module::data"]
        [::std::mem::offset_of!(lysp_module, data) - 72usize];
    ["Offset of field: lysp_module::augments"]
        [::std::mem::offset_of!(lysp_module, augments) - 80usize];
    ["Offset of field: lysp_module::rpcs"]
        [::std::mem::offset_of!(lysp_module, rpcs) - 88usize];
    ["Offset of field: lysp_module::notifs"]
        [::std::mem::offset_of!(lysp_module, notifs) - 96usize];
    ["Offset of field: lysp_module::deviations"]
        [::std::mem::offset_of!(lysp_module, deviations) - 104usize];
    ["Offset of field: lysp_module::exts"]
        [::std::mem::offset_of!(lysp_module, exts) - 112usize];
    ["Offset of field: lysp_module::version"]
        [::std::mem::offset_of!(lysp_module, version) - 120usize];
};
impl Default for lysp_module {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl lysp_module {
    #[inline]
    pub fn parsing(&self) -> u8 {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8)
        }
    }
    #[inline]
    pub fn set_parsing(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn parsing_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(
                <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                    ::std::ptr::addr_of!((*this)._bitfield_1),
                    0usize,
                    1u8,
                ) as u8,
            )
        }
    }
    #[inline]
    pub unsafe fn set_parsing_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_submod(&self) -> u8 {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8)
        }
    }
    #[inline]
    pub fn set_is_submod(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_submod_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(
                <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                    ::std::ptr::addr_of!((*this)._bitfield_1),
                    1usize,
                    1u8,
                ) as u8,
            )
        }
    }
    #[inline]
    pub unsafe fn set_is_submod_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        parsing: u8,
        is_submod: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let parsing: u8 = unsafe { ::std::mem::transmute(parsing) };
            parsing as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_submod: u8 = unsafe { ::std::mem::transmute(is_submod) };
            is_submod as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_submodule {
    pub mod_: *mut lys_module,
    pub revs: *mut lysp_revision,
    pub imports: *mut lysp_import,
    pub includes: *mut lysp_include,
    pub extensions: *mut lysp_ext,
    pub features: *mut lysp_feature,
    pub identities: *mut lysp_ident,
    pub typedefs: *mut lysp_tpdf,
    pub groupings: *mut lysp_node_grp,
    pub data: *mut lysp_node,
    pub augments: *mut lysp_node_augment,
    pub rpcs: *mut lysp_node_action,
    pub notifs: *mut lysp_node_notif,
    pub deviations: *mut lysp_deviation,
    pub exts: *mut lysp_ext_instance,
    pub version: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub name: *const ::std::os::raw::c_char,
    pub filepath: *const ::std::os::raw::c_char,
    pub prefix: *const ::std::os::raw::c_char,
    pub org: *const ::std::os::raw::c_char,
    pub contact: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_submodule"]
        [::std::mem::size_of::<lysp_submodule>() - 184usize];
    ["Alignment of lysp_submodule"]
        [::std::mem::align_of::<lysp_submodule>() - 8usize];
    ["Offset of field: lysp_submodule::mod_"]
        [::std::mem::offset_of!(lysp_submodule, mod_) - 0usize];
    ["Offset of field: lysp_submodule::revs"]
        [::std::mem::offset_of!(lysp_submodule, revs) - 8usize];
    ["Offset of field: lysp_submodule::imports"]
        [::std::mem::offset_of!(lysp_submodule, imports) - 16usize];
    ["Offset of field: lysp_submodule::includes"]
        [::std::mem::offset_of!(lysp_submodule, includes) - 24usize];
    ["Offset of field: lysp_submodule::extensions"]
        [::std::mem::offset_of!(lysp_submodule, extensions) - 32usize];
    ["Offset of field: lysp_submodule::features"]
        [::std::mem::offset_of!(lysp_submodule, features) - 40usize];
    ["Offset of field: lysp_submodule::identities"]
        [::std::mem::offset_of!(lysp_submodule, identities) - 48usize];
    ["Offset of field: lysp_submodule::typedefs"]
        [::std::mem::offset_of!(lysp_submodule, typedefs) - 56usize];
    ["Offset of field: lysp_submodule::groupings"]
        [::std::mem::offset_of!(lysp_submodule, groupings) - 64usize];
    ["Offset of field: lysp_submodule::data"]
        [::std::mem::offset_of!(lysp_submodule, data) - 72usize];
    ["Offset of field: lysp_submodule::augments"]
        [::std::mem::offset_of!(lysp_submodule, augments) - 80usize];
    ["Offset of field: lysp_submodule::rpcs"]
        [::std::mem::offset_of!(lysp_submodule, rpcs) - 88usize];
    ["Offset of field: lysp_submodule::notifs"]
        [::std::mem::offset_of!(lysp_submodule, notifs) - 96usize];
    ["Offset of field: lysp_submodule::deviations"]
        [::std::mem::offset_of!(lysp_submodule, deviations) - 104usize];
    ["Offset of field: lysp_submodule::exts"]
        [::std::mem::offset_of!(lysp_submodule, exts) - 112usize];
    ["Offset of field: lysp_submodule::version"]
        [::std::mem::offset_of!(lysp_submodule, version) - 120usize];
    ["Offset of field: lysp_submodule::name"]
        [::std::mem::offset_of!(lysp_submodule, name) - 128usize];
    ["Offset of field: lysp_submodule::filepath"]
        [::std::mem::offset_of!(lysp_submodule, filepath) - 136usize];
    ["Offset of field: lysp_submodule::prefix"]
        [::std::mem::offset_of!(lysp_submodule, prefix) - 144usize];
    ["Offset of field: lysp_submodule::org"]
        [::std::mem::offset_of!(lysp_submodule, org) - 152usize];
    ["Offset of field: lysp_submodule::contact"]
        [::std::mem::offset_of!(lysp_submodule, contact) - 160usize];
    ["Offset of field: lysp_submodule::dsc"]
        [::std::mem::offset_of!(lysp_submodule, dsc) - 168usize];
    ["Offset of field: lysp_submodule::ref_"]
        [::std::mem::offset_of!(lysp_submodule, ref_) - 176usize];
};
impl Default for lysp_submodule {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl lysp_submodule {
    #[inline]
    pub fn parsing(&self) -> u8 {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8)
        }
    }
    #[inline]
    pub fn set_parsing(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn parsing_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(
                <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                    ::std::ptr::addr_of!((*this)._bitfield_1),
                    0usize,
                    1u8,
                ) as u8,
            )
        }
    }
    #[inline]
    pub unsafe fn set_parsing_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_submod(&self) -> u8 {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8)
        }
    }
    #[inline]
    pub fn set_is_submod(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_submod_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(
                <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                    ::std::ptr::addr_of!((*this)._bitfield_1),
                    1usize,
                    1u8,
                ) as u8,
            )
        }
    }
    #[inline]
    pub unsafe fn set_is_submod_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn latest_revision(&self) -> u8 {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8)
        }
    }
    #[inline]
    pub fn set_latest_revision(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn latest_revision_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(
                <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                    ::std::ptr::addr_of!((*this)._bitfield_1),
                    2usize,
                    2u8,
                ) as u8,
            )
        }
    }
    #[inline]
    pub unsafe fn set_latest_revision_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        parsing: u8,
        is_submod: u8,
        latest_revision: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let parsing: u8 = unsafe { ::std::mem::transmute(parsing) };
            parsing as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_submod: u8 = unsafe { ::std::mem::transmute(is_submod) };
            is_submod as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let latest_revision: u8 =
                unsafe { ::std::mem::transmute(latest_revision) };
            latest_revision as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_prefix {
    pub prefix: *mut ::std::os::raw::c_char,
    pub mod_: *const lys_module,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_prefix"][::std::mem::size_of::<lysc_prefix>() - 16usize];
    ["Alignment of lysc_prefix"]
        [::std::mem::align_of::<lysc_prefix>() - 8usize];
    ["Offset of field: lysc_prefix::prefix"]
        [::std::mem::offset_of!(lysc_prefix, prefix) - 0usize];
    ["Offset of field: lysc_prefix::mod_"]
        [::std::mem::offset_of!(lysc_prefix, mod_) - 8usize];
};
impl Default for lysc_prefix {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_ext {
    pub name: *const ::std::os::raw::c_char,
    pub argname: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_ext,
    pub module: *mut lys_module,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_ext"][::std::mem::size_of::<lysc_ext>() - 48usize];
    ["Alignment of lysc_ext"][::std::mem::align_of::<lysc_ext>() - 8usize];
    ["Offset of field: lysc_ext::name"]
        [::std::mem::offset_of!(lysc_ext, name) - 0usize];
    ["Offset of field: lysc_ext::argname"]
        [::std::mem::offset_of!(lysc_ext, argname) - 8usize];
    ["Offset of field: lysc_ext::exts"]
        [::std::mem::offset_of!(lysc_ext, exts) - 16usize];
    ["Offset of field: lysc_ext::plugin"]
        [::std::mem::offset_of!(lysc_ext, plugin) - 24usize];
    ["Offset of field: lysc_ext::module"]
        [::std::mem::offset_of!(lysc_ext, module) - 32usize];
    ["Offset of field: lysc_ext::flags"]
        [::std::mem::offset_of!(lysc_ext, flags) - 40usize];
};
impl Default for lysc_ext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_when {
    pub cond: *mut lyxp_expr,
    pub context: *mut lysc_node,
    pub prefixes: *mut lysc_prefix,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub refcount: u32,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_when"][::std::mem::size_of::<lysc_when>() - 56usize];
    ["Alignment of lysc_when"][::std::mem::align_of::<lysc_when>() - 8usize];
    ["Offset of field: lysc_when::cond"]
        [::std::mem::offset_of!(lysc_when, cond) - 0usize];
    ["Offset of field: lysc_when::context"]
        [::std::mem::offset_of!(lysc_when, context) - 8usize];
    ["Offset of field: lysc_when::prefixes"]
        [::std::mem::offset_of!(lysc_when, prefixes) - 16usize];
    ["Offset of field: lysc_when::dsc"]
        [::std::mem::offset_of!(lysc_when, dsc) - 24usize];
    ["Offset of field: lysc_when::ref_"]
        [::std::mem::offset_of!(lysc_when, ref_) - 32usize];
    ["Offset of field: lysc_when::exts"]
        [::std::mem::offset_of!(lysc_when, exts) - 40usize];
    ["Offset of field: lysc_when::refcount"]
        [::std::mem::offset_of!(lysc_when, refcount) - 48usize];
    ["Offset of field: lysc_when::flags"]
        [::std::mem::offset_of!(lysc_when, flags) - 52usize];
};
impl Default for lysc_when {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_ident {
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub module: *mut lys_module,
    pub derived: *mut *mut lysc_ident,
    pub exts: *mut lysc_ext_instance,
    pub flags: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_ident"][::std::mem::size_of::<lysc_ident>() - 56usize];
    ["Alignment of lysc_ident"][::std::mem::align_of::<lysc_ident>() - 8usize];
    ["Offset of field: lysc_ident::name"]
        [::std::mem::offset_of!(lysc_ident, name) - 0usize];
    ["Offset of field: lysc_ident::dsc"]
        [::std::mem::offset_of!(lysc_ident, dsc) - 8usize];
    ["Offset of field: lysc_ident::ref_"]
        [::std::mem::offset_of!(lysc_ident, ref_) - 16usize];
    ["Offset of field: lysc_ident::module"]
        [::std::mem::offset_of!(lysc_ident, module) - 24usize];
    ["Offset of field: lysc_ident::derived"]
        [::std::mem::offset_of!(lysc_ident, derived) - 32usize];
    ["Offset of field: lysc_ident::exts"]
        [::std::mem::offset_of!(lysc_ident, exts) - 40usize];
    ["Offset of field: lysc_ident::flags"]
        [::std::mem::offset_of!(lysc_ident, flags) - 48usize];
};
impl Default for lysc_ident {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_revision {
    pub date: [::std::os::raw::c_char; 11usize],
    pub exts: *mut lysc_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_revision"][::std::mem::size_of::<lysc_revision>() - 24usize];
    ["Alignment of lysc_revision"]
        [::std::mem::align_of::<lysc_revision>() - 8usize];
    ["Offset of field: lysc_revision::date"]
        [::std::mem::offset_of!(lysc_revision, date) - 0usize];
    ["Offset of field: lysc_revision::exts"]
        [::std::mem::offset_of!(lysc_revision, exts) - 16usize];
};
impl Default for lysc_revision {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_range {
    pub parts: *mut lysc_range_lysc_range_part,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub emsg: *const ::std::os::raw::c_char,
    pub eapptag: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_range_lysc_range_part {
    pub __bindgen_anon_1: lysc_range_lysc_range_part__bindgen_ty_1,
    pub __bindgen_anon_2: lysc_range_lysc_range_part__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_range_lysc_range_part__bindgen_ty_1 {
    pub min_64: i64,
    pub min_u64: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_range_lysc_range_part__bindgen_ty_1"][::std::mem::size_of::<
        lysc_range_lysc_range_part__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of lysc_range_lysc_range_part__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_range_lysc_range_part__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysc_range_lysc_range_part__bindgen_ty_1::min_64"][::std::mem::offset_of!(
        lysc_range_lysc_range_part__bindgen_ty_1,
        min_64
    )
        - 0usize];
    ["Offset of field: lysc_range_lysc_range_part__bindgen_ty_1::min_u64"][::std::mem::offset_of!(
        lysc_range_lysc_range_part__bindgen_ty_1,
        min_u64
    )
        - 0usize];
};
impl Default for lysc_range_lysc_range_part__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_range_lysc_range_part__bindgen_ty_2 {
    pub max_64: i64,
    pub max_u64: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_range_lysc_range_part__bindgen_ty_2"][::std::mem::size_of::<
        lysc_range_lysc_range_part__bindgen_ty_2,
    >() - 8usize];
    ["Alignment of lysc_range_lysc_range_part__bindgen_ty_2"]
        [::std::mem::align_of::<lysc_range_lysc_range_part__bindgen_ty_2>()
            - 8usize];
    ["Offset of field: lysc_range_lysc_range_part__bindgen_ty_2::max_64"][::std::mem::offset_of!(
        lysc_range_lysc_range_part__bindgen_ty_2,
        max_64
    )
        - 0usize];
    ["Offset of field: lysc_range_lysc_range_part__bindgen_ty_2::max_u64"][::std::mem::offset_of!(
        lysc_range_lysc_range_part__bindgen_ty_2,
        max_u64
    )
        - 0usize];
};
impl Default for lysc_range_lysc_range_part__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_range_lysc_range_part"]
        [::std::mem::size_of::<lysc_range_lysc_range_part>() - 16usize];
    ["Alignment of lysc_range_lysc_range_part"]
        [::std::mem::align_of::<lysc_range_lysc_range_part>() - 8usize];
};
impl Default for lysc_range_lysc_range_part {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_range"][::std::mem::size_of::<lysc_range>() - 48usize];
    ["Alignment of lysc_range"][::std::mem::align_of::<lysc_range>() - 8usize];
    ["Offset of field: lysc_range::parts"]
        [::std::mem::offset_of!(lysc_range, parts) - 0usize];
    ["Offset of field: lysc_range::dsc"]
        [::std::mem::offset_of!(lysc_range, dsc) - 8usize];
    ["Offset of field: lysc_range::ref_"]
        [::std::mem::offset_of!(lysc_range, ref_) - 16usize];
    ["Offset of field: lysc_range::emsg"]
        [::std::mem::offset_of!(lysc_range, emsg) - 24usize];
    ["Offset of field: lysc_range::eapptag"]
        [::std::mem::offset_of!(lysc_range, eapptag) - 32usize];
    ["Offset of field: lysc_range::exts"]
        [::std::mem::offset_of!(lysc_range, exts) - 40usize];
};
impl Default for lysc_range {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_pattern {
    pub expr: *const ::std::os::raw::c_char,
    pub code: *mut pcre2_code_8,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub emsg: *const ::std::os::raw::c_char,
    pub eapptag: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_pattern"][::std::mem::size_of::<lysc_pattern>() - 64usize];
    ["Alignment of lysc_pattern"]
        [::std::mem::align_of::<lysc_pattern>() - 8usize];
    ["Offset of field: lysc_pattern::expr"]
        [::std::mem::offset_of!(lysc_pattern, expr) - 0usize];
    ["Offset of field: lysc_pattern::code"]
        [::std::mem::offset_of!(lysc_pattern, code) - 8usize];
    ["Offset of field: lysc_pattern::dsc"]
        [::std::mem::offset_of!(lysc_pattern, dsc) - 16usize];
    ["Offset of field: lysc_pattern::ref_"]
        [::std::mem::offset_of!(lysc_pattern, ref_) - 24usize];
    ["Offset of field: lysc_pattern::emsg"]
        [::std::mem::offset_of!(lysc_pattern, emsg) - 32usize];
    ["Offset of field: lysc_pattern::eapptag"]
        [::std::mem::offset_of!(lysc_pattern, eapptag) - 40usize];
    ["Offset of field: lysc_pattern::exts"]
        [::std::mem::offset_of!(lysc_pattern, exts) - 48usize];
};
impl Default for lysc_pattern {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl lysc_pattern {
    #[inline]
    pub fn inverted(&self) -> u32 {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32)
        }
    }
    #[inline]
    pub fn set_inverted(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inverted_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(
                <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                    ::std::ptr::addr_of!((*this)._bitfield_1),
                    0usize,
                    1u8,
                ) as u32,
            )
        }
    }
    #[inline]
    pub unsafe fn set_inverted_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn refcount(&self) -> u32 {
        unsafe {
            ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32)
        }
    }
    #[inline]
    pub fn set_refcount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn refcount_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(
                <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                    ::std::ptr::addr_of!((*this)._bitfield_1),
                    1usize,
                    31u8,
                ) as u32,
            )
        }
    }
    #[inline]
    pub unsafe fn set_refcount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        inverted: u32,
        refcount: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let inverted: u32 = unsafe { ::std::mem::transmute(inverted) };
            inverted as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let refcount: u32 = unsafe { ::std::mem::transmute(refcount) };
            refcount as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_must {
    pub cond: *mut lyxp_expr,
    pub prefixes: *mut lysc_prefix,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub emsg: *const ::std::os::raw::c_char,
    pub eapptag: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_must"][::std::mem::size_of::<lysc_must>() - 56usize];
    ["Alignment of lysc_must"][::std::mem::align_of::<lysc_must>() - 8usize];
    ["Offset of field: lysc_must::cond"]
        [::std::mem::offset_of!(lysc_must, cond) - 0usize];
    ["Offset of field: lysc_must::prefixes"]
        [::std::mem::offset_of!(lysc_must, prefixes) - 8usize];
    ["Offset of field: lysc_must::dsc"]
        [::std::mem::offset_of!(lysc_must, dsc) - 16usize];
    ["Offset of field: lysc_must::ref_"]
        [::std::mem::offset_of!(lysc_must, ref_) - 24usize];
    ["Offset of field: lysc_must::emsg"]
        [::std::mem::offset_of!(lysc_must, emsg) - 32usize];
    ["Offset of field: lysc_must::eapptag"]
        [::std::mem::offset_of!(lysc_must, eapptag) - 40usize];
    ["Offset of field: lysc_must::exts"]
        [::std::mem::offset_of!(lysc_must, exts) - 48usize];
};
impl Default for lysc_must {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type"][::std::mem::size_of::<lysc_type>() - 32usize];
    ["Alignment of lysc_type"][::std::mem::align_of::<lysc_type>() - 8usize];
    ["Offset of field: lysc_type::name"]
        [::std::mem::offset_of!(lysc_type, name) - 0usize];
    ["Offset of field: lysc_type::exts"]
        [::std::mem::offset_of!(lysc_type, exts) - 8usize];
    ["Offset of field: lysc_type::plugin"]
        [::std::mem::offset_of!(lysc_type, plugin) - 16usize];
    ["Offset of field: lysc_type::basetype"]
        [::std::mem::offset_of!(lysc_type, basetype) - 24usize];
    ["Offset of field: lysc_type::refcount"]
        [::std::mem::offset_of!(lysc_type, refcount) - 28usize];
};
impl Default for lysc_type {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_num {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub range: *mut lysc_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_num"][::std::mem::size_of::<lysc_type_num>() - 40usize];
    ["Alignment of lysc_type_num"]
        [::std::mem::align_of::<lysc_type_num>() - 8usize];
    ["Offset of field: lysc_type_num::name"]
        [::std::mem::offset_of!(lysc_type_num, name) - 0usize];
    ["Offset of field: lysc_type_num::exts"]
        [::std::mem::offset_of!(lysc_type_num, exts) - 8usize];
    ["Offset of field: lysc_type_num::plugin"]
        [::std::mem::offset_of!(lysc_type_num, plugin) - 16usize];
    ["Offset of field: lysc_type_num::basetype"]
        [::std::mem::offset_of!(lysc_type_num, basetype) - 24usize];
    ["Offset of field: lysc_type_num::refcount"]
        [::std::mem::offset_of!(lysc_type_num, refcount) - 28usize];
    ["Offset of field: lysc_type_num::range"]
        [::std::mem::offset_of!(lysc_type_num, range) - 32usize];
};
impl Default for lysc_type_num {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_dec {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub fraction_digits: u8,
    pub range: *mut lysc_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_dec"][::std::mem::size_of::<lysc_type_dec>() - 48usize];
    ["Alignment of lysc_type_dec"]
        [::std::mem::align_of::<lysc_type_dec>() - 8usize];
    ["Offset of field: lysc_type_dec::name"]
        [::std::mem::offset_of!(lysc_type_dec, name) - 0usize];
    ["Offset of field: lysc_type_dec::exts"]
        [::std::mem::offset_of!(lysc_type_dec, exts) - 8usize];
    ["Offset of field: lysc_type_dec::plugin"]
        [::std::mem::offset_of!(lysc_type_dec, plugin) - 16usize];
    ["Offset of field: lysc_type_dec::basetype"]
        [::std::mem::offset_of!(lysc_type_dec, basetype) - 24usize];
    ["Offset of field: lysc_type_dec::refcount"]
        [::std::mem::offset_of!(lysc_type_dec, refcount) - 28usize];
    ["Offset of field: lysc_type_dec::fraction_digits"]
        [::std::mem::offset_of!(lysc_type_dec, fraction_digits) - 32usize];
    ["Offset of field: lysc_type_dec::range"]
        [::std::mem::offset_of!(lysc_type_dec, range) - 40usize];
};
impl Default for lysc_type_dec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_str {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub length: *mut lysc_range,
    pub patterns: *mut *mut lysc_pattern,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_str"][::std::mem::size_of::<lysc_type_str>() - 48usize];
    ["Alignment of lysc_type_str"]
        [::std::mem::align_of::<lysc_type_str>() - 8usize];
    ["Offset of field: lysc_type_str::name"]
        [::std::mem::offset_of!(lysc_type_str, name) - 0usize];
    ["Offset of field: lysc_type_str::exts"]
        [::std::mem::offset_of!(lysc_type_str, exts) - 8usize];
    ["Offset of field: lysc_type_str::plugin"]
        [::std::mem::offset_of!(lysc_type_str, plugin) - 16usize];
    ["Offset of field: lysc_type_str::basetype"]
        [::std::mem::offset_of!(lysc_type_str, basetype) - 24usize];
    ["Offset of field: lysc_type_str::refcount"]
        [::std::mem::offset_of!(lysc_type_str, refcount) - 28usize];
    ["Offset of field: lysc_type_str::length"]
        [::std::mem::offset_of!(lysc_type_str, length) - 32usize];
    ["Offset of field: lysc_type_str::patterns"]
        [::std::mem::offset_of!(lysc_type_str, patterns) - 40usize];
};
impl Default for lysc_type_str {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_type_bitenum_item {
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub __bindgen_anon_1: lysc_type_bitenum_item__bindgen_ty_1,
    pub flags: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_type_bitenum_item__bindgen_ty_1 {
    pub value: i32,
    pub position: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_bitenum_item__bindgen_ty_1"][::std::mem::size_of::<
        lysc_type_bitenum_item__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of lysc_type_bitenum_item__bindgen_ty_1"][::std::mem::align_of::<
        lysc_type_bitenum_item__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: lysc_type_bitenum_item__bindgen_ty_1::value"][::std::mem::offset_of!(
        lysc_type_bitenum_item__bindgen_ty_1,
        value
    )
        - 0usize];
    ["Offset of field: lysc_type_bitenum_item__bindgen_ty_1::position"][::std::mem::offset_of!(
        lysc_type_bitenum_item__bindgen_ty_1,
        position
    )
        - 0usize];
};
impl Default for lysc_type_bitenum_item__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_bitenum_item"]
        [::std::mem::size_of::<lysc_type_bitenum_item>() - 40usize];
    ["Alignment of lysc_type_bitenum_item"]
        [::std::mem::align_of::<lysc_type_bitenum_item>() - 8usize];
    ["Offset of field: lysc_type_bitenum_item::name"]
        [::std::mem::offset_of!(lysc_type_bitenum_item, name) - 0usize];
    ["Offset of field: lysc_type_bitenum_item::dsc"]
        [::std::mem::offset_of!(lysc_type_bitenum_item, dsc) - 8usize];
    ["Offset of field: lysc_type_bitenum_item::ref_"]
        [::std::mem::offset_of!(lysc_type_bitenum_item, ref_) - 16usize];
    ["Offset of field: lysc_type_bitenum_item::exts"]
        [::std::mem::offset_of!(lysc_type_bitenum_item, exts) - 24usize];
    ["Offset of field: lysc_type_bitenum_item::flags"]
        [::std::mem::offset_of!(lysc_type_bitenum_item, flags) - 36usize];
};
impl Default for lysc_type_bitenum_item {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_enum {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub enums: *mut lysc_type_bitenum_item,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_enum"]
        [::std::mem::size_of::<lysc_type_enum>() - 40usize];
    ["Alignment of lysc_type_enum"]
        [::std::mem::align_of::<lysc_type_enum>() - 8usize];
    ["Offset of field: lysc_type_enum::name"]
        [::std::mem::offset_of!(lysc_type_enum, name) - 0usize];
    ["Offset of field: lysc_type_enum::exts"]
        [::std::mem::offset_of!(lysc_type_enum, exts) - 8usize];
    ["Offset of field: lysc_type_enum::plugin"]
        [::std::mem::offset_of!(lysc_type_enum, plugin) - 16usize];
    ["Offset of field: lysc_type_enum::basetype"]
        [::std::mem::offset_of!(lysc_type_enum, basetype) - 24usize];
    ["Offset of field: lysc_type_enum::refcount"]
        [::std::mem::offset_of!(lysc_type_enum, refcount) - 28usize];
    ["Offset of field: lysc_type_enum::enums"]
        [::std::mem::offset_of!(lysc_type_enum, enums) - 32usize];
};
impl Default for lysc_type_enum {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_bits {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub bits: *mut lysc_type_bitenum_item,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_bits"]
        [::std::mem::size_of::<lysc_type_bits>() - 40usize];
    ["Alignment of lysc_type_bits"]
        [::std::mem::align_of::<lysc_type_bits>() - 8usize];
    ["Offset of field: lysc_type_bits::name"]
        [::std::mem::offset_of!(lysc_type_bits, name) - 0usize];
    ["Offset of field: lysc_type_bits::exts"]
        [::std::mem::offset_of!(lysc_type_bits, exts) - 8usize];
    ["Offset of field: lysc_type_bits::plugin"]
        [::std::mem::offset_of!(lysc_type_bits, plugin) - 16usize];
    ["Offset of field: lysc_type_bits::basetype"]
        [::std::mem::offset_of!(lysc_type_bits, basetype) - 24usize];
    ["Offset of field: lysc_type_bits::refcount"]
        [::std::mem::offset_of!(lysc_type_bits, refcount) - 28usize];
    ["Offset of field: lysc_type_bits::bits"]
        [::std::mem::offset_of!(lysc_type_bits, bits) - 32usize];
};
impl Default for lysc_type_bits {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_leafref {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub path: *mut lyxp_expr,
    pub prefixes: *mut lysc_prefix,
    pub realtype: *mut lysc_type,
    pub require_instance: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_leafref"]
        [::std::mem::size_of::<lysc_type_leafref>() - 64usize];
    ["Alignment of lysc_type_leafref"]
        [::std::mem::align_of::<lysc_type_leafref>() - 8usize];
    ["Offset of field: lysc_type_leafref::name"]
        [::std::mem::offset_of!(lysc_type_leafref, name) - 0usize];
    ["Offset of field: lysc_type_leafref::exts"]
        [::std::mem::offset_of!(lysc_type_leafref, exts) - 8usize];
    ["Offset of field: lysc_type_leafref::plugin"]
        [::std::mem::offset_of!(lysc_type_leafref, plugin) - 16usize];
    ["Offset of field: lysc_type_leafref::basetype"]
        [::std::mem::offset_of!(lysc_type_leafref, basetype) - 24usize];
    ["Offset of field: lysc_type_leafref::refcount"]
        [::std::mem::offset_of!(lysc_type_leafref, refcount) - 28usize];
    ["Offset of field: lysc_type_leafref::path"]
        [::std::mem::offset_of!(lysc_type_leafref, path) - 32usize];
    ["Offset of field: lysc_type_leafref::prefixes"]
        [::std::mem::offset_of!(lysc_type_leafref, prefixes) - 40usize];
    ["Offset of field: lysc_type_leafref::realtype"]
        [::std::mem::offset_of!(lysc_type_leafref, realtype) - 48usize];
    ["Offset of field: lysc_type_leafref::require_instance"]
        [::std::mem::offset_of!(lysc_type_leafref, require_instance) - 56usize];
};
impl Default for lysc_type_leafref {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_identityref {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub bases: *mut *mut lysc_ident,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_identityref"]
        [::std::mem::size_of::<lysc_type_identityref>() - 40usize];
    ["Alignment of lysc_type_identityref"]
        [::std::mem::align_of::<lysc_type_identityref>() - 8usize];
    ["Offset of field: lysc_type_identityref::name"]
        [::std::mem::offset_of!(lysc_type_identityref, name) - 0usize];
    ["Offset of field: lysc_type_identityref::exts"]
        [::std::mem::offset_of!(lysc_type_identityref, exts) - 8usize];
    ["Offset of field: lysc_type_identityref::plugin"]
        [::std::mem::offset_of!(lysc_type_identityref, plugin) - 16usize];
    ["Offset of field: lysc_type_identityref::basetype"]
        [::std::mem::offset_of!(lysc_type_identityref, basetype) - 24usize];
    ["Offset of field: lysc_type_identityref::refcount"]
        [::std::mem::offset_of!(lysc_type_identityref, refcount) - 28usize];
    ["Offset of field: lysc_type_identityref::bases"]
        [::std::mem::offset_of!(lysc_type_identityref, bases) - 32usize];
};
impl Default for lysc_type_identityref {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_instanceid {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub require_instance: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_instanceid"]
        [::std::mem::size_of::<lysc_type_instanceid>() - 40usize];
    ["Alignment of lysc_type_instanceid"]
        [::std::mem::align_of::<lysc_type_instanceid>() - 8usize];
    ["Offset of field: lysc_type_instanceid::name"]
        [::std::mem::offset_of!(lysc_type_instanceid, name) - 0usize];
    ["Offset of field: lysc_type_instanceid::exts"]
        [::std::mem::offset_of!(lysc_type_instanceid, exts) - 8usize];
    ["Offset of field: lysc_type_instanceid::plugin"]
        [::std::mem::offset_of!(lysc_type_instanceid, plugin) - 16usize];
    ["Offset of field: lysc_type_instanceid::basetype"]
        [::std::mem::offset_of!(lysc_type_instanceid, basetype) - 24usize];
    ["Offset of field: lysc_type_instanceid::refcount"]
        [::std::mem::offset_of!(lysc_type_instanceid, refcount) - 28usize];
    ["Offset of field: lysc_type_instanceid::require_instance"][::std::mem::offset_of!(
        lysc_type_instanceid,
        require_instance
    ) - 32usize];
};
impl Default for lysc_type_instanceid {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_union {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub types: *mut *mut lysc_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_union"]
        [::std::mem::size_of::<lysc_type_union>() - 40usize];
    ["Alignment of lysc_type_union"]
        [::std::mem::align_of::<lysc_type_union>() - 8usize];
    ["Offset of field: lysc_type_union::name"]
        [::std::mem::offset_of!(lysc_type_union, name) - 0usize];
    ["Offset of field: lysc_type_union::exts"]
        [::std::mem::offset_of!(lysc_type_union, exts) - 8usize];
    ["Offset of field: lysc_type_union::plugin"]
        [::std::mem::offset_of!(lysc_type_union, plugin) - 16usize];
    ["Offset of field: lysc_type_union::basetype"]
        [::std::mem::offset_of!(lysc_type_union, basetype) - 24usize];
    ["Offset of field: lysc_type_union::refcount"]
        [::std::mem::offset_of!(lysc_type_union, refcount) - 28usize];
    ["Offset of field: lysc_type_union::types"]
        [::std::mem::offset_of!(lysc_type_union, types) - 32usize];
};
impl Default for lysc_type_union {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_type_bin {
    pub name: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub plugin: *mut lyplg_type,
    pub basetype: LY_DATA_TYPE::Type,
    pub refcount: u32,
    pub length: *mut lysc_range,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_type_bin"][::std::mem::size_of::<lysc_type_bin>() - 40usize];
    ["Alignment of lysc_type_bin"]
        [::std::mem::align_of::<lysc_type_bin>() - 8usize];
    ["Offset of field: lysc_type_bin::name"]
        [::std::mem::offset_of!(lysc_type_bin, name) - 0usize];
    ["Offset of field: lysc_type_bin::exts"]
        [::std::mem::offset_of!(lysc_type_bin, exts) - 8usize];
    ["Offset of field: lysc_type_bin::plugin"]
        [::std::mem::offset_of!(lysc_type_bin, plugin) - 16usize];
    ["Offset of field: lysc_type_bin::basetype"]
        [::std::mem::offset_of!(lysc_type_bin, basetype) - 24usize];
    ["Offset of field: lysc_type_bin::refcount"]
        [::std::mem::offset_of!(lysc_type_bin, refcount) - 28usize];
    ["Offset of field: lysc_type_bin::length"]
        [::std::mem::offset_of!(lysc_type_bin, length) - 32usize];
};
impl Default for lysc_type_bin {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node,
    pub prev: *mut lysc_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node"][::std::mem::size_of::<lysc_node>() - 80usize];
    ["Alignment of lysc_node"][::std::mem::align_of::<lysc_node>() - 8usize];
    ["Offset of field: lysc_node::nodetype"]
        [::std::mem::offset_of!(lysc_node, nodetype) - 0usize];
    ["Offset of field: lysc_node::flags"]
        [::std::mem::offset_of!(lysc_node, flags) - 2usize];
    ["Offset of field: lysc_node::hash"]
        [::std::mem::offset_of!(lysc_node, hash) - 4usize];
    ["Offset of field: lysc_node::module"]
        [::std::mem::offset_of!(lysc_node, module) - 8usize];
    ["Offset of field: lysc_node::parent"]
        [::std::mem::offset_of!(lysc_node, parent) - 16usize];
    ["Offset of field: lysc_node::next"]
        [::std::mem::offset_of!(lysc_node, next) - 24usize];
    ["Offset of field: lysc_node::prev"]
        [::std::mem::offset_of!(lysc_node, prev) - 32usize];
    ["Offset of field: lysc_node::name"]
        [::std::mem::offset_of!(lysc_node, name) - 40usize];
    ["Offset of field: lysc_node::dsc"]
        [::std::mem::offset_of!(lysc_node, dsc) - 48usize];
    ["Offset of field: lysc_node::ref_"]
        [::std::mem::offset_of!(lysc_node, ref_) - 56usize];
    ["Offset of field: lysc_node::exts"]
        [::std::mem::offset_of!(lysc_node, exts) - 64usize];
    ["Offset of field: lysc_node::priv_"]
        [::std::mem::offset_of!(lysc_node, priv_) - 72usize];
};
impl Default for lysc_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_action_inout {
    pub __bindgen_anon_1: lysc_node_action_inout__bindgen_ty_1,
    pub child: *mut lysc_node,
    pub musts: *mut lysc_must,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_action_inout__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node,
    pub prev: *mut lysc_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        >() - 80usize];
    ["Alignment of lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        >() - 8usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::nodetype",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        nodetype
    ) - 0usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::flags",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        flags
    ) - 2usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::hash",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        hash
    ) - 4usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::module",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        module
    ) - 8usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::parent",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        parent
    ) - 16usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::next",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        next
    ) - 24usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::prev",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        prev
    ) - 32usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::name",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        name
    ) - 40usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::dsc",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        dsc
    ) - 48usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::ref_",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        ref_
    ) - 56usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::exts",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        exts
    ) - 64usize];
    [
        "Offset of field: lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1::priv_",
    ][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1,
        priv_
    ) - 72usize];
};
impl Default for lysc_node_action_inout__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_action_inout__bindgen_ty_1"][::std::mem::size_of::<
        lysc_node_action_inout__bindgen_ty_1,
    >() - 80usize];
    ["Alignment of lysc_node_action_inout__bindgen_ty_1"][::std::mem::align_of::<
        lysc_node_action_inout__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: lysc_node_action_inout__bindgen_ty_1::node"][::std::mem::offset_of!(
        lysc_node_action_inout__bindgen_ty_1,
        node
    ) - 0usize];
};
impl Default for lysc_node_action_inout__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_action_inout"]
        [::std::mem::size_of::<lysc_node_action_inout>() - 96usize];
    ["Alignment of lysc_node_action_inout"]
        [::std::mem::align_of::<lysc_node_action_inout>() - 8usize];
    ["Offset of field: lysc_node_action_inout::child"]
        [::std::mem::offset_of!(lysc_node_action_inout, child) - 80usize];
    ["Offset of field: lysc_node_action_inout::musts"]
        [::std::mem::offset_of!(lysc_node_action_inout, musts) - 88usize];
};
impl Default for lysc_node_action_inout {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_action {
    pub __bindgen_anon_1: lysc_node_action__bindgen_ty_1,
    pub when: *mut *mut lysc_when,
    pub input: lysc_node_action_inout,
    pub output: lysc_node_action_inout,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_action__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_action__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_action__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node_action,
    pub prev: *mut lysc_node_action,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_action__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
    >() - 80usize];
    ["Alignment of lysc_node_action__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_action__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::nodetype"]
        [::std::mem::offset_of!(
            lysc_node_action__bindgen_ty_1__bindgen_ty_1,
            nodetype
        ) - 0usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 2usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 4usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::module"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        module
    )
        - 8usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 40usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 48usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 56usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 64usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lysc_node_action__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 72usize];
};
impl Default for lysc_node_action__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_action__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_action__bindgen_ty_1>() - 80usize];
    ["Alignment of lysc_node_action__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_action__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysc_node_action__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysc_node_action__bindgen_ty_1, node) - 0usize];
};
impl Default for lysc_node_action__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_action"]
        [::std::mem::size_of::<lysc_node_action>() - 280usize];
    ["Alignment of lysc_node_action"]
        [::std::mem::align_of::<lysc_node_action>() - 8usize];
    ["Offset of field: lysc_node_action::when"]
        [::std::mem::offset_of!(lysc_node_action, when) - 80usize];
    ["Offset of field: lysc_node_action::input"]
        [::std::mem::offset_of!(lysc_node_action, input) - 88usize];
    ["Offset of field: lysc_node_action::output"]
        [::std::mem::offset_of!(lysc_node_action, output) - 184usize];
};
impl Default for lysc_node_action {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_notif {
    pub __bindgen_anon_1: lysc_node_notif__bindgen_ty_1,
    pub child: *mut lysc_node,
    pub musts: *mut lysc_must,
    pub when: *mut *mut lysc_when,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_notif__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_notif__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node_notif,
    pub prev: *mut lysc_node_notif,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_notif__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
    >() - 80usize];
    ["Alignment of lysc_node_notif__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_notif__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::nodetype"]
        [::std::mem::offset_of!(
            lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
            nodetype
        ) - 0usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 2usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 4usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::module"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        module
    )
        - 8usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 40usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 48usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 56usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 64usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lysc_node_notif__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 72usize];
};
impl Default for lysc_node_notif__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_notif__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_notif__bindgen_ty_1>() - 80usize];
    ["Alignment of lysc_node_notif__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_notif__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysc_node_notif__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysc_node_notif__bindgen_ty_1, node) - 0usize];
};
impl Default for lysc_node_notif__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_notif"]
        [::std::mem::size_of::<lysc_node_notif>() - 104usize];
    ["Alignment of lysc_node_notif"]
        [::std::mem::align_of::<lysc_node_notif>() - 8usize];
    ["Offset of field: lysc_node_notif::child"]
        [::std::mem::offset_of!(lysc_node_notif, child) - 80usize];
    ["Offset of field: lysc_node_notif::musts"]
        [::std::mem::offset_of!(lysc_node_notif, musts) - 88usize];
    ["Offset of field: lysc_node_notif::when"]
        [::std::mem::offset_of!(lysc_node_notif, when) - 96usize];
};
impl Default for lysc_node_notif {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_container {
    pub __bindgen_anon_1: lysc_node_container__bindgen_ty_1,
    pub child: *mut lysc_node,
    pub musts: *mut lysc_must,
    pub when: *mut *mut lysc_when,
    pub actions: *mut lysc_node_action,
    pub notifs: *mut lysc_node_notif,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_container__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_container__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_container__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node,
    pub prev: *mut lysc_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_container__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_container__bindgen_ty_1__bindgen_ty_1>(
        ) - 80usize];
    ["Alignment of lysc_node_container__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_container__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    [
        "Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::nodetype",
    ][::std::mem::offset_of!(
        lysc_node_container__bindgen_ty_1__bindgen_ty_1,
        nodetype
    ) - 0usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(
            lysc_node_container__bindgen_ty_1__bindgen_ty_1,
            flags
        ) - 2usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::hash"]
        [::std::mem::offset_of!(
            lysc_node_container__bindgen_ty_1__bindgen_ty_1,
            hash
        ) - 4usize];
    [
        "Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::module",
    ][::std::mem::offset_of!(
        lysc_node_container__bindgen_ty_1__bindgen_ty_1,
        module
    ) - 8usize];
    [
        "Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::parent",
    ][::std::mem::offset_of!(
        lysc_node_container__bindgen_ty_1__bindgen_ty_1,
        parent
    ) - 16usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::next"]
        [::std::mem::offset_of!(
            lysc_node_container__bindgen_ty_1__bindgen_ty_1,
            next
        ) - 24usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::prev"]
        [::std::mem::offset_of!(
            lysc_node_container__bindgen_ty_1__bindgen_ty_1,
            prev
        ) - 32usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::name"]
        [::std::mem::offset_of!(
            lysc_node_container__bindgen_ty_1__bindgen_ty_1,
            name
        ) - 40usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysc_node_container__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 48usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::ref_"]
        [::std::mem::offset_of!(
            lysc_node_container__bindgen_ty_1__bindgen_ty_1,
            ref_
        ) - 56usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::exts"]
        [::std::mem::offset_of!(
            lysc_node_container__bindgen_ty_1__bindgen_ty_1,
            exts
        ) - 64usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1__bindgen_ty_1::priv_"]
        [::std::mem::offset_of!(
            lysc_node_container__bindgen_ty_1__bindgen_ty_1,
            priv_
        ) - 72usize];
};
impl Default for lysc_node_container__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_container__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_container__bindgen_ty_1>() - 80usize];
    ["Alignment of lysc_node_container__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_container__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysc_node_container__bindgen_ty_1::node"][::std::mem::offset_of!(
        lysc_node_container__bindgen_ty_1,
        node
    ) - 0usize];
};
impl Default for lysc_node_container__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_container"]
        [::std::mem::size_of::<lysc_node_container>() - 120usize];
    ["Alignment of lysc_node_container"]
        [::std::mem::align_of::<lysc_node_container>() - 8usize];
    ["Offset of field: lysc_node_container::child"]
        [::std::mem::offset_of!(lysc_node_container, child) - 80usize];
    ["Offset of field: lysc_node_container::musts"]
        [::std::mem::offset_of!(lysc_node_container, musts) - 88usize];
    ["Offset of field: lysc_node_container::when"]
        [::std::mem::offset_of!(lysc_node_container, when) - 96usize];
    ["Offset of field: lysc_node_container::actions"]
        [::std::mem::offset_of!(lysc_node_container, actions) - 104usize];
    ["Offset of field: lysc_node_container::notifs"]
        [::std::mem::offset_of!(lysc_node_container, notifs) - 112usize];
};
impl Default for lysc_node_container {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_case {
    pub __bindgen_anon_1: lysc_node_case__bindgen_ty_1,
    pub child: *mut lysc_node,
    pub when: *mut *mut lysc_when,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_case__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_case__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_case__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node,
    pub prev: *mut lysc_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_case__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
    >() - 80usize];
    ["Alignment of lysc_node_case__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_case__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::nodetype"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        nodetype
    )
        - 0usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 2usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 4usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::module"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        module
    )
        - 8usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 40usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 48usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 56usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 64usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lysc_node_case__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 72usize];
};
impl Default for lysc_node_case__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_case__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_case__bindgen_ty_1>() - 80usize];
    ["Alignment of lysc_node_case__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_case__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysc_node_case__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysc_node_case__bindgen_ty_1, node) - 0usize];
};
impl Default for lysc_node_case__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_case"]
        [::std::mem::size_of::<lysc_node_case>() - 96usize];
    ["Alignment of lysc_node_case"]
        [::std::mem::align_of::<lysc_node_case>() - 8usize];
    ["Offset of field: lysc_node_case::child"]
        [::std::mem::offset_of!(lysc_node_case, child) - 80usize];
    ["Offset of field: lysc_node_case::when"]
        [::std::mem::offset_of!(lysc_node_case, when) - 88usize];
};
impl Default for lysc_node_case {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_choice {
    pub __bindgen_anon_1: lysc_node_choice__bindgen_ty_1,
    pub cases: *mut lysc_node_case,
    pub when: *mut *mut lysc_when,
    pub dflt: *mut lysc_node_case,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_choice__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_choice__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node,
    pub prev: *mut lysc_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_choice__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
    >() - 80usize];
    ["Alignment of lysc_node_choice__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_choice__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::nodetype"]
        [::std::mem::offset_of!(
            lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
            nodetype
        ) - 0usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 2usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 4usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::module"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        module
    )
        - 8usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 40usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 48usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 56usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 64usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lysc_node_choice__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 72usize];
};
impl Default for lysc_node_choice__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_choice__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_choice__bindgen_ty_1>() - 80usize];
    ["Alignment of lysc_node_choice__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_choice__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysc_node_choice__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysc_node_choice__bindgen_ty_1, node) - 0usize];
};
impl Default for lysc_node_choice__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_choice"]
        [::std::mem::size_of::<lysc_node_choice>() - 104usize];
    ["Alignment of lysc_node_choice"]
        [::std::mem::align_of::<lysc_node_choice>() - 8usize];
    ["Offset of field: lysc_node_choice::cases"]
        [::std::mem::offset_of!(lysc_node_choice, cases) - 80usize];
    ["Offset of field: lysc_node_choice::when"]
        [::std::mem::offset_of!(lysc_node_choice, when) - 88usize];
    ["Offset of field: lysc_node_choice::dflt"]
        [::std::mem::offset_of!(lysc_node_choice, dflt) - 96usize];
};
impl Default for lysc_node_choice {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_leaf {
    pub __bindgen_anon_1: lysc_node_leaf__bindgen_ty_1,
    pub musts: *mut lysc_must,
    pub when: *mut *mut lysc_when,
    pub type_: *mut lysc_type,
    pub units: *const ::std::os::raw::c_char,
    pub dflt: *mut lyd_value,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_leaf__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_leaf__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node,
    pub prev: *mut lysc_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_leaf__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
    >() - 80usize];
    ["Alignment of lysc_node_leaf__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_leaf__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::nodetype"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        nodetype
    )
        - 0usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 2usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 4usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::module"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        module
    )
        - 8usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 40usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 48usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 56usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 64usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lysc_node_leaf__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 72usize];
};
impl Default for lysc_node_leaf__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_leaf__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_leaf__bindgen_ty_1>() - 80usize];
    ["Alignment of lysc_node_leaf__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_leaf__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysc_node_leaf__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysc_node_leaf__bindgen_ty_1, node) - 0usize];
};
impl Default for lysc_node_leaf__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_leaf"]
        [::std::mem::size_of::<lysc_node_leaf>() - 120usize];
    ["Alignment of lysc_node_leaf"]
        [::std::mem::align_of::<lysc_node_leaf>() - 8usize];
    ["Offset of field: lysc_node_leaf::musts"]
        [::std::mem::offset_of!(lysc_node_leaf, musts) - 80usize];
    ["Offset of field: lysc_node_leaf::when"]
        [::std::mem::offset_of!(lysc_node_leaf, when) - 88usize];
    ["Offset of field: lysc_node_leaf::type_"]
        [::std::mem::offset_of!(lysc_node_leaf, type_) - 96usize];
    ["Offset of field: lysc_node_leaf::units"]
        [::std::mem::offset_of!(lysc_node_leaf, units) - 104usize];
    ["Offset of field: lysc_node_leaf::dflt"]
        [::std::mem::offset_of!(lysc_node_leaf, dflt) - 112usize];
};
impl Default for lysc_node_leaf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_leaflist {
    pub __bindgen_anon_1: lysc_node_leaflist__bindgen_ty_1,
    pub musts: *mut lysc_must,
    pub when: *mut *mut lysc_when,
    pub type_: *mut lysc_type,
    pub units: *const ::std::os::raw::c_char,
    pub dflts: *mut *mut lyd_value,
    pub min: u32,
    pub max: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_leaflist__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node,
    pub prev: *mut lysc_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1>(
        ) - 80usize];
    ["Alignment of lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    [
        "Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::nodetype",
    ][::std::mem::offset_of!(
        lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        nodetype
    ) - 0usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::flags"]
        [::std::mem::offset_of!(
            lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
            flags
        ) - 2usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 4usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::module"]
        [::std::mem::offset_of!(
            lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
            module
        ) - 8usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::parent"]
        [::std::mem::offset_of!(
            lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
            parent
        ) - 16usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 40usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 48usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 56usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 64usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1::priv_"]
        [::std::mem::offset_of!(
            lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1,
            priv_
        ) - 72usize];
};
impl Default for lysc_node_leaflist__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_leaflist__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_leaflist__bindgen_ty_1>() - 80usize];
    ["Alignment of lysc_node_leaflist__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_leaflist__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysc_node_leaflist__bindgen_ty_1::node"][::std::mem::offset_of!(
        lysc_node_leaflist__bindgen_ty_1,
        node
    ) - 0usize];
};
impl Default for lysc_node_leaflist__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_leaflist"]
        [::std::mem::size_of::<lysc_node_leaflist>() - 128usize];
    ["Alignment of lysc_node_leaflist"]
        [::std::mem::align_of::<lysc_node_leaflist>() - 8usize];
    ["Offset of field: lysc_node_leaflist::musts"]
        [::std::mem::offset_of!(lysc_node_leaflist, musts) - 80usize];
    ["Offset of field: lysc_node_leaflist::when"]
        [::std::mem::offset_of!(lysc_node_leaflist, when) - 88usize];
    ["Offset of field: lysc_node_leaflist::type_"]
        [::std::mem::offset_of!(lysc_node_leaflist, type_) - 96usize];
    ["Offset of field: lysc_node_leaflist::units"]
        [::std::mem::offset_of!(lysc_node_leaflist, units) - 104usize];
    ["Offset of field: lysc_node_leaflist::dflts"]
        [::std::mem::offset_of!(lysc_node_leaflist, dflts) - 112usize];
    ["Offset of field: lysc_node_leaflist::min"]
        [::std::mem::offset_of!(lysc_node_leaflist, min) - 120usize];
    ["Offset of field: lysc_node_leaflist::max"]
        [::std::mem::offset_of!(lysc_node_leaflist, max) - 124usize];
};
impl Default for lysc_node_leaflist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_list {
    pub __bindgen_anon_1: lysc_node_list__bindgen_ty_1,
    pub child: *mut lysc_node,
    pub musts: *mut lysc_must,
    pub when: *mut *mut lysc_when,
    pub actions: *mut lysc_node_action,
    pub notifs: *mut lysc_node_notif,
    pub uniques: *mut *mut *mut lysc_node_leaf,
    pub min: u32,
    pub max: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_list__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_list__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_list__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node,
    pub prev: *mut lysc_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_list__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
    >() - 80usize];
    ["Alignment of lysc_node_list__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_list__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::nodetype"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        nodetype
    )
        - 0usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 2usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 4usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::module"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        module
    )
        - 8usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 40usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 48usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 56usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 64usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lysc_node_list__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 72usize];
};
impl Default for lysc_node_list__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_list__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_list__bindgen_ty_1>() - 80usize];
    ["Alignment of lysc_node_list__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_list__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysc_node_list__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lysc_node_list__bindgen_ty_1, node) - 0usize];
};
impl Default for lysc_node_list__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_list"]
        [::std::mem::size_of::<lysc_node_list>() - 136usize];
    ["Alignment of lysc_node_list"]
        [::std::mem::align_of::<lysc_node_list>() - 8usize];
    ["Offset of field: lysc_node_list::child"]
        [::std::mem::offset_of!(lysc_node_list, child) - 80usize];
    ["Offset of field: lysc_node_list::musts"]
        [::std::mem::offset_of!(lysc_node_list, musts) - 88usize];
    ["Offset of field: lysc_node_list::when"]
        [::std::mem::offset_of!(lysc_node_list, when) - 96usize];
    ["Offset of field: lysc_node_list::actions"]
        [::std::mem::offset_of!(lysc_node_list, actions) - 104usize];
    ["Offset of field: lysc_node_list::notifs"]
        [::std::mem::offset_of!(lysc_node_list, notifs) - 112usize];
    ["Offset of field: lysc_node_list::uniques"]
        [::std::mem::offset_of!(lysc_node_list, uniques) - 120usize];
    ["Offset of field: lysc_node_list::min"]
        [::std::mem::offset_of!(lysc_node_list, min) - 128usize];
    ["Offset of field: lysc_node_list::max"]
        [::std::mem::offset_of!(lysc_node_list, max) - 132usize];
};
impl Default for lysc_node_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lysc_node_anydata {
    pub __bindgen_anon_1: lysc_node_anydata__bindgen_ty_1,
    pub musts: *mut lysc_must,
    pub when: *mut *mut lysc_when,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lysc_node_anydata__bindgen_ty_1 {
    pub node: lysc_node,
    pub __bindgen_anon_1: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_node_anydata__bindgen_ty_1__bindgen_ty_1 {
    pub nodetype: u16,
    pub flags: u16,
    pub hash: [u8; 4usize],
    pub module: *mut lys_module,
    pub parent: *mut lysc_node,
    pub next: *mut lysc_node,
    pub prev: *mut lysc_node,
    pub name: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub exts: *mut lysc_ext_instance,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_anydata__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_anydata__bindgen_ty_1__bindgen_ty_1>(
        ) - 80usize];
    ["Alignment of lysc_node_anydata__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_anydata__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    [
        "Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::nodetype",
    ][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        nodetype
    ) - 0usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 2usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 4usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::module"]
        [::std::mem::offset_of!(
            lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
            module
        ) - 8usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::parent"]
        [::std::mem::offset_of!(
            lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
            parent
        ) - 16usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::name"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        name
    )
        - 40usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::dsc"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        dsc
    )
        - 48usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::ref_"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        ref_
    )
        - 56usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::exts"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        exts
    )
        - 64usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 72usize];
};
impl Default for lysc_node_anydata__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_anydata__bindgen_ty_1"]
        [::std::mem::size_of::<lysc_node_anydata__bindgen_ty_1>() - 80usize];
    ["Alignment of lysc_node_anydata__bindgen_ty_1"]
        [::std::mem::align_of::<lysc_node_anydata__bindgen_ty_1>() - 8usize];
    ["Offset of field: lysc_node_anydata__bindgen_ty_1::node"][::std::mem::offset_of!(
        lysc_node_anydata__bindgen_ty_1,
        node
    ) - 0usize];
};
impl Default for lysc_node_anydata__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_node_anydata"]
        [::std::mem::size_of::<lysc_node_anydata>() - 96usize];
    ["Alignment of lysc_node_anydata"]
        [::std::mem::align_of::<lysc_node_anydata>() - 8usize];
    ["Offset of field: lysc_node_anydata::musts"]
        [::std::mem::offset_of!(lysc_node_anydata, musts) - 80usize];
    ["Offset of field: lysc_node_anydata::when"]
        [::std::mem::offset_of!(lysc_node_anydata, when) - 88usize];
};
impl Default for lysc_node_anydata {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_module {
    pub mod_: *mut lys_module,
    pub data: *mut lysc_node,
    pub rpcs: *mut lysc_node_action,
    pub notifs: *mut lysc_node_notif,
    pub exts: *mut lysc_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_module"][::std::mem::size_of::<lysc_module>() - 40usize];
    ["Alignment of lysc_module"]
        [::std::mem::align_of::<lysc_module>() - 8usize];
    ["Offset of field: lysc_module::mod_"]
        [::std::mem::offset_of!(lysc_module, mod_) - 0usize];
    ["Offset of field: lysc_module::data"]
        [::std::mem::offset_of!(lysc_module, data) - 8usize];
    ["Offset of field: lysc_module::rpcs"]
        [::std::mem::offset_of!(lysc_module, rpcs) - 16usize];
    ["Offset of field: lysc_module::notifs"]
        [::std::mem::offset_of!(lysc_module, notifs) - 24usize];
    ["Offset of field: lysc_module::exts"]
        [::std::mem::offset_of!(lysc_module, exts) - 32usize];
};
impl Default for lysc_module {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn lysc_data_node(schema: *const lysc_node) -> *const lysc_node;
}
unsafe extern "C" {
    pub fn lysc_has_when(node: *const lysc_node) -> *const lysc_when;
}
unsafe extern "C" {
    pub fn lysc_owner_module(node: *const lysc_node) -> *const lys_module;
}
unsafe extern "C" {
    pub fn lysp_node_groupings(node: *const lysp_node) -> *const lysp_node_grp;
}
unsafe extern "C" {
    pub fn lysp_node_typedefs(node: *const lysp_node) -> *const lysp_tpdf;
}
unsafe extern "C" {
    pub fn lysp_node_actions(node: *const lysp_node)
        -> *const lysp_node_action;
}
unsafe extern "C" {
    pub fn lysp_node_notifs(node: *const lysp_node) -> *const lysp_node_notif;
}
unsafe extern "C" {
    pub fn lysp_node_child(node: *const lysp_node) -> *const lysp_node;
}
unsafe extern "C" {
    pub fn lysc_node_actions(node: *const lysc_node)
        -> *const lysc_node_action;
}
unsafe extern "C" {
    pub fn lysc_node_notifs(node: *const lysc_node) -> *const lysc_node_notif;
}
unsafe extern "C" {
    pub fn lysc_node_child(node: *const lysc_node) -> *const lysc_node;
}
unsafe extern "C" {
    pub fn lysc_node_musts(node: *const lysc_node) -> *mut lysc_must;
}
unsafe extern "C" {
    pub fn lysc_node_when(node: *const lysc_node) -> *mut *mut lysc_when;
}
unsafe extern "C" {
    pub fn lysc_node_lref_target(node: *const lysc_node) -> *const lysc_node;
}
unsafe extern "C" {
    pub fn lysc_node_lref_targets(
        node: *const lysc_node,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lysc_node_lref_backlinks(
        ctx: *const ly_ctx,
        node: *const lysc_node,
        match_ancestors: ly_bool,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
pub type lysc_dfs_clb = ::std::option::Option<
    unsafe extern "C" fn(
        node: *mut lysc_node,
        data: *mut ::std::os::raw::c_void,
        dfs_continue: *mut ly_bool,
    ) -> LY_ERR::Type,
>;
unsafe extern "C" {
    pub fn lysc_tree_dfs_full(
        root: *const lysc_node,
        dfs_clb: lysc_dfs_clb,
        data: *mut ::std::os::raw::c_void,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lysc_module_dfs_full(
        mod_: *const lys_module,
        dfs_clb: lysc_dfs_clb,
        data: *mut ::std::os::raw::c_void,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lysc_iffeature_value(iff: *const lysc_iffeature) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_identity_iffeature_value(
        ident: *const lysc_ident,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lysp_feature_next(
        last: *const lysp_feature,
        pmod: *const lysp_module,
        idx: *mut u32,
    ) -> *mut lysp_feature;
}
unsafe extern "C" {
    pub fn lys_find_xpath_atoms(
        ctx: *const ly_ctx,
        ctx_node: *const lysc_node,
        xpath: *const ::std::os::raw::c_char,
        options: u32,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_find_expr_atoms(
        ctx_node: *const lysc_node,
        cur_mod: *const lys_module,
        expr: *const lyxp_expr,
        prefixes: *const lysc_prefix,
        options: u32,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_find_xpath(
        ctx: *const ly_ctx,
        ctx_node: *const lysc_node,
        xpath: *const ::std::os::raw::c_char,
        options: u32,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_find_lypath_atoms(
        path: *const ly_path,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_find_path_atoms(
        ctx: *const ly_ctx,
        ctx_node: *const lysc_node,
        path: *const ::std::os::raw::c_char,
        output: ly_bool,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_find_path(
        ctx: *const ly_ctx,
        ctx_node: *const lysc_node,
        path: *const ::std::os::raw::c_char,
        output: ly_bool,
    ) -> *const lysc_node;
}
pub mod LYSC_PATH_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYSC_PATH_LOG: Type = 0;
    pub const LYSC_PATH_DATA: Type = 1;
    pub const LYSC_PATH_DATA_PATTERN: Type = 2;
}
unsafe extern "C" {
    pub fn lysc_path(
        node: *const lysc_node,
        pathtype: LYSC_PATH_TYPE::Type,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lys_module {
    pub ctx: *mut ly_ctx,
    pub name: *const ::std::os::raw::c_char,
    pub revision: *const ::std::os::raw::c_char,
    pub ns: *const ::std::os::raw::c_char,
    pub prefix: *const ::std::os::raw::c_char,
    pub filepath: *const ::std::os::raw::c_char,
    pub org: *const ::std::os::raw::c_char,
    pub contact: *const ::std::os::raw::c_char,
    pub dsc: *const ::std::os::raw::c_char,
    pub ref_: *const ::std::os::raw::c_char,
    pub parsed: *mut lysp_module,
    pub compiled: *mut lysc_module,
    pub identities: *mut lysc_ident,
    pub augmented_by: *mut *mut lys_module,
    pub deviated_by: *mut *mut lys_module,
    pub implemented: ly_bool,
    pub to_compile: ly_bool,
    pub latest_revision: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lys_module"][::std::mem::size_of::<lys_module>() - 128usize];
    ["Alignment of lys_module"][::std::mem::align_of::<lys_module>() - 8usize];
    ["Offset of field: lys_module::ctx"]
        [::std::mem::offset_of!(lys_module, ctx) - 0usize];
    ["Offset of field: lys_module::name"]
        [::std::mem::offset_of!(lys_module, name) - 8usize];
    ["Offset of field: lys_module::revision"]
        [::std::mem::offset_of!(lys_module, revision) - 16usize];
    ["Offset of field: lys_module::ns"]
        [::std::mem::offset_of!(lys_module, ns) - 24usize];
    ["Offset of field: lys_module::prefix"]
        [::std::mem::offset_of!(lys_module, prefix) - 32usize];
    ["Offset of field: lys_module::filepath"]
        [::std::mem::offset_of!(lys_module, filepath) - 40usize];
    ["Offset of field: lys_module::org"]
        [::std::mem::offset_of!(lys_module, org) - 48usize];
    ["Offset of field: lys_module::contact"]
        [::std::mem::offset_of!(lys_module, contact) - 56usize];
    ["Offset of field: lys_module::dsc"]
        [::std::mem::offset_of!(lys_module, dsc) - 64usize];
    ["Offset of field: lys_module::ref_"]
        [::std::mem::offset_of!(lys_module, ref_) - 72usize];
    ["Offset of field: lys_module::parsed"]
        [::std::mem::offset_of!(lys_module, parsed) - 80usize];
    ["Offset of field: lys_module::compiled"]
        [::std::mem::offset_of!(lys_module, compiled) - 88usize];
    ["Offset of field: lys_module::identities"]
        [::std::mem::offset_of!(lys_module, identities) - 96usize];
    ["Offset of field: lys_module::augmented_by"]
        [::std::mem::offset_of!(lys_module, augmented_by) - 104usize];
    ["Offset of field: lys_module::deviated_by"]
        [::std::mem::offset_of!(lys_module, deviated_by) - 112usize];
    ["Offset of field: lys_module::implemented"]
        [::std::mem::offset_of!(lys_module, implemented) - 120usize];
    ["Offset of field: lys_module::to_compile"]
        [::std::mem::offset_of!(lys_module, to_compile) - 121usize];
    ["Offset of field: lys_module::latest_revision"]
        [::std::mem::offset_of!(lys_module, latest_revision) - 122usize];
};
impl Default for lys_module {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn lys_feature_value(
        module: *const lys_module,
        feature: *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_getnext(
        last: *const lysc_node,
        parent: *const lysc_node,
        module: *const lysc_module,
        options: u32,
    ) -> *const lysc_node;
}
unsafe extern "C" {
    pub fn lys_getnext_ext(
        last: *const lysc_node,
        parent: *const lysc_node,
        ext: *const lysc_ext_instance,
        options: u32,
    ) -> *const lysc_node;
}
unsafe extern "C" {
    pub fn lys_find_child(
        parent: *const lysc_node,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        nodetype: u16,
        options: u32,
    ) -> *const lysc_node;
}
unsafe extern "C" {
    pub fn lys_set_implemented(
        mod_: *mut lys_module,
        features: *mut *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_nodetype2str(nodetype: u16) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lyxp_get_expr(
        path: *const lyxp_expr,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyxp_var {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_node {
    _unused: [u8; 0],
}
pub mod LYD_FORMAT {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYD_UNKNOWN: Type = 0;
    pub const LYD_XML: Type = 1;
    pub const LYD_JSON: Type = 2;
    pub const LYD_LYB: Type = 3;
}
pub mod LYD_ANYDATA_VALUETYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYD_ANYDATA_DATATREE: Type = 0;
    pub const LYD_ANYDATA_STRING: Type = 1;
    pub const LYD_ANYDATA_XML: Type = 2;
    pub const LYD_ANYDATA_JSON: Type = 3;
    pub const LYD_ANYDATA_LYB: Type = 4;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_value {
    pub _canonical: *const ::std::os::raw::c_char,
    pub realtype: *const lysc_type,
    pub __bindgen_anon_1: lyd_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lyd_value__bindgen_ty_1 {
    pub boolean: i8,
    pub dec64: i64,
    pub int8: i8,
    pub int16: i16,
    pub int32: i32,
    pub int64: i64,
    pub uint8: u8,
    pub uint16: u16,
    pub uint32: u32,
    pub uint64: u64,
    pub enum_item: *mut lysc_type_bitenum_item,
    pub ident: *mut lysc_ident,
    pub target: *mut ly_path,
    pub subvalue: *mut lyd_value_union,
    pub dyn_mem: *mut ::std::os::raw::c_void,
    pub fixed_mem: [u8; 24usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value__bindgen_ty_1"]
        [::std::mem::size_of::<lyd_value__bindgen_ty_1>() - 24usize];
    ["Alignment of lyd_value__bindgen_ty_1"]
        [::std::mem::align_of::<lyd_value__bindgen_ty_1>() - 8usize];
    ["Offset of field: lyd_value__bindgen_ty_1::boolean"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, boolean) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::dec64"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, dec64) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::int8"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, int8) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::int16"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, int16) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::int32"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, int32) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::int64"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, int64) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::uint8"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, uint8) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::uint16"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, uint16) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::uint32"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, uint32) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::uint64"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, uint64) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::enum_item"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, enum_item) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::ident"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, ident) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::target"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, target) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::subvalue"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, subvalue) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::dyn_mem"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, dyn_mem) - 0usize];
    ["Offset of field: lyd_value__bindgen_ty_1::fixed_mem"]
        [::std::mem::offset_of!(lyd_value__bindgen_ty_1, fixed_mem) - 0usize];
};
impl Default for lyd_value__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value"][::std::mem::size_of::<lyd_value>() - 40usize];
    ["Alignment of lyd_value"][::std::mem::align_of::<lyd_value>() - 8usize];
    ["Offset of field: lyd_value::_canonical"]
        [::std::mem::offset_of!(lyd_value, _canonical) - 0usize];
    ["Offset of field: lyd_value::realtype"]
        [::std::mem::offset_of!(lyd_value, realtype) - 8usize];
};
impl Default for lyd_value {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_value_union {
    pub value: lyd_value,
    pub original: *mut ::std::os::raw::c_void,
    pub orig_len: usize,
    pub hints: u32,
    pub format: LY_VALUE_FORMAT::Type,
    pub prefix_data: *mut ::std::os::raw::c_void,
    pub ctx_node: *const lysc_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_union"]
        [::std::mem::size_of::<lyd_value_union>() - 80usize];
    ["Alignment of lyd_value_union"]
        [::std::mem::align_of::<lyd_value_union>() - 8usize];
    ["Offset of field: lyd_value_union::value"]
        [::std::mem::offset_of!(lyd_value_union, value) - 0usize];
    ["Offset of field: lyd_value_union::original"]
        [::std::mem::offset_of!(lyd_value_union, original) - 40usize];
    ["Offset of field: lyd_value_union::orig_len"]
        [::std::mem::offset_of!(lyd_value_union, orig_len) - 48usize];
    ["Offset of field: lyd_value_union::hints"]
        [::std::mem::offset_of!(lyd_value_union, hints) - 56usize];
    ["Offset of field: lyd_value_union::format"]
        [::std::mem::offset_of!(lyd_value_union, format) - 60usize];
    ["Offset of field: lyd_value_union::prefix_data"]
        [::std::mem::offset_of!(lyd_value_union, prefix_data) - 64usize];
    ["Offset of field: lyd_value_union::ctx_node"]
        [::std::mem::offset_of!(lyd_value_union, ctx_node) - 72usize];
};
impl Default for lyd_value_union {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_value_bits {
    pub bitmap: *mut ::std::os::raw::c_char,
    pub items: *mut *mut lysc_type_bitenum_item,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_bits"]
        [::std::mem::size_of::<lyd_value_bits>() - 16usize];
    ["Alignment of lyd_value_bits"]
        [::std::mem::align_of::<lyd_value_bits>() - 8usize];
    ["Offset of field: lyd_value_bits::bitmap"]
        [::std::mem::offset_of!(lyd_value_bits, bitmap) - 0usize];
    ["Offset of field: lyd_value_bits::items"]
        [::std::mem::offset_of!(lyd_value_bits, items) - 8usize];
};
impl Default for lyd_value_bits {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_value_binary {
    pub data: *mut ::std::os::raw::c_void,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_binary"]
        [::std::mem::size_of::<lyd_value_binary>() - 16usize];
    ["Alignment of lyd_value_binary"]
        [::std::mem::align_of::<lyd_value_binary>() - 8usize];
    ["Offset of field: lyd_value_binary::data"]
        [::std::mem::offset_of!(lyd_value_binary, data) - 0usize];
    ["Offset of field: lyd_value_binary::size"]
        [::std::mem::offset_of!(lyd_value_binary, size) - 8usize];
};
impl Default for lyd_value_binary {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lyd_value_ipv4_address_no_zone {
    pub addr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_ipv4_address_no_zone"]
        [::std::mem::size_of::<lyd_value_ipv4_address_no_zone>() - 4usize];
    ["Alignment of lyd_value_ipv4_address_no_zone"]
        [::std::mem::align_of::<lyd_value_ipv4_address_no_zone>() - 4usize];
    ["Offset of field: lyd_value_ipv4_address_no_zone::addr"]
        [::std::mem::offset_of!(lyd_value_ipv4_address_no_zone, addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_value_ipv4_address {
    pub addr: in_addr,
    pub zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_ipv4_address"]
        [::std::mem::size_of::<lyd_value_ipv4_address>() - 16usize];
    ["Alignment of lyd_value_ipv4_address"]
        [::std::mem::align_of::<lyd_value_ipv4_address>() - 8usize];
    ["Offset of field: lyd_value_ipv4_address::addr"]
        [::std::mem::offset_of!(lyd_value_ipv4_address, addr) - 0usize];
    ["Offset of field: lyd_value_ipv4_address::zone"]
        [::std::mem::offset_of!(lyd_value_ipv4_address, zone) - 8usize];
};
impl Default for lyd_value_ipv4_address {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lyd_value_ipv4_prefix {
    pub addr: in_addr,
    pub prefix: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_ipv4_prefix"]
        [::std::mem::size_of::<lyd_value_ipv4_prefix>() - 8usize];
    ["Alignment of lyd_value_ipv4_prefix"]
        [::std::mem::align_of::<lyd_value_ipv4_prefix>() - 4usize];
    ["Offset of field: lyd_value_ipv4_prefix::addr"]
        [::std::mem::offset_of!(lyd_value_ipv4_prefix, addr) - 0usize];
    ["Offset of field: lyd_value_ipv4_prefix::prefix"]
        [::std::mem::offset_of!(lyd_value_ipv4_prefix, prefix) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_value_ipv6_address_no_zone {
    pub addr: in6_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_ipv6_address_no_zone"]
        [::std::mem::size_of::<lyd_value_ipv6_address_no_zone>() - 16usize];
    ["Alignment of lyd_value_ipv6_address_no_zone"]
        [::std::mem::align_of::<lyd_value_ipv6_address_no_zone>() - 4usize];
    ["Offset of field: lyd_value_ipv6_address_no_zone::addr"]
        [::std::mem::offset_of!(lyd_value_ipv6_address_no_zone, addr) - 0usize];
};
impl Default for lyd_value_ipv6_address_no_zone {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_value_ipv6_address {
    pub addr: in6_addr,
    pub zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_ipv6_address"]
        [::std::mem::size_of::<lyd_value_ipv6_address>() - 24usize];
    ["Alignment of lyd_value_ipv6_address"]
        [::std::mem::align_of::<lyd_value_ipv6_address>() - 8usize];
    ["Offset of field: lyd_value_ipv6_address::addr"]
        [::std::mem::offset_of!(lyd_value_ipv6_address, addr) - 0usize];
    ["Offset of field: lyd_value_ipv6_address::zone"]
        [::std::mem::offset_of!(lyd_value_ipv6_address, zone) - 16usize];
};
impl Default for lyd_value_ipv6_address {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_value_ipv6_prefix {
    pub addr: in6_addr,
    pub prefix: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_ipv6_prefix"]
        [::std::mem::size_of::<lyd_value_ipv6_prefix>() - 20usize];
    ["Alignment of lyd_value_ipv6_prefix"]
        [::std::mem::align_of::<lyd_value_ipv6_prefix>() - 4usize];
    ["Offset of field: lyd_value_ipv6_prefix::addr"]
        [::std::mem::offset_of!(lyd_value_ipv6_prefix, addr) - 0usize];
    ["Offset of field: lyd_value_ipv6_prefix::prefix"]
        [::std::mem::offset_of!(lyd_value_ipv6_prefix, prefix) - 16usize];
};
impl Default for lyd_value_ipv6_prefix {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_value_date_and_time {
    pub time: time_t,
    pub fractions_s: *mut ::std::os::raw::c_char,
    pub unknown_tz: ly_bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_date_and_time"]
        [::std::mem::size_of::<lyd_value_date_and_time>() - 24usize];
    ["Alignment of lyd_value_date_and_time"]
        [::std::mem::align_of::<lyd_value_date_and_time>() - 8usize];
    ["Offset of field: lyd_value_date_and_time::time"]
        [::std::mem::offset_of!(lyd_value_date_and_time, time) - 0usize];
    ["Offset of field: lyd_value_date_and_time::fractions_s"]
        [::std::mem::offset_of!(lyd_value_date_and_time, fractions_s) - 8usize];
    ["Offset of field: lyd_value_date_and_time::unknown_tz"]
        [::std::mem::offset_of!(lyd_value_date_and_time, unknown_tz) - 16usize];
};
impl Default for lyd_value_date_and_time {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_value_xpath10 {
    pub exp: *mut lyxp_expr,
    pub ctx: *const ly_ctx,
    pub prefix_data: *mut ::std::os::raw::c_void,
    pub format: LY_VALUE_FORMAT::Type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_xpath10"]
        [::std::mem::size_of::<lyd_value_xpath10>() - 32usize];
    ["Alignment of lyd_value_xpath10"]
        [::std::mem::align_of::<lyd_value_xpath10>() - 8usize];
    ["Offset of field: lyd_value_xpath10::exp"]
        [::std::mem::offset_of!(lyd_value_xpath10, exp) - 0usize];
    ["Offset of field: lyd_value_xpath10::ctx"]
        [::std::mem::offset_of!(lyd_value_xpath10, ctx) - 8usize];
    ["Offset of field: lyd_value_xpath10::prefix_data"]
        [::std::mem::offset_of!(lyd_value_xpath10, prefix_data) - 16usize];
    ["Offset of field: lyd_value_xpath10::format"]
        [::std::mem::offset_of!(lyd_value_xpath10, format) - 24usize];
};
impl Default for lyd_value_xpath10 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_value_lyds_tree {
    pub rbt: *mut rb_node,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_value_lyds_tree"]
        [::std::mem::size_of::<lyd_value_lyds_tree>() - 8usize];
    ["Alignment of lyd_value_lyds_tree"]
        [::std::mem::align_of::<lyd_value_lyds_tree>() - 8usize];
    ["Offset of field: lyd_value_lyds_tree::rbt"]
        [::std::mem::offset_of!(lyd_value_lyds_tree, rbt) - 0usize];
};
impl Default for lyd_value_lyds_tree {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ly_opaq_name {
    pub name: *const ::std::os::raw::c_char,
    pub prefix: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: ly_opaq_name__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ly_opaq_name__bindgen_ty_1 {
    pub module_ns: *const ::std::os::raw::c_char,
    pub module_name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_opaq_name__bindgen_ty_1"]
        [::std::mem::size_of::<ly_opaq_name__bindgen_ty_1>() - 8usize];
    ["Alignment of ly_opaq_name__bindgen_ty_1"]
        [::std::mem::align_of::<ly_opaq_name__bindgen_ty_1>() - 8usize];
    ["Offset of field: ly_opaq_name__bindgen_ty_1::module_ns"][::std::mem::offset_of!(
        ly_opaq_name__bindgen_ty_1,
        module_ns
    ) - 0usize];
    ["Offset of field: ly_opaq_name__bindgen_ty_1::module_name"][::std::mem::offset_of!(
        ly_opaq_name__bindgen_ty_1,
        module_name
    ) - 0usize];
};
impl Default for ly_opaq_name__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_opaq_name"][::std::mem::size_of::<ly_opaq_name>() - 24usize];
    ["Alignment of ly_opaq_name"]
        [::std::mem::align_of::<ly_opaq_name>() - 8usize];
    ["Offset of field: ly_opaq_name::name"]
        [::std::mem::offset_of!(ly_opaq_name, name) - 0usize];
    ["Offset of field: ly_opaq_name::prefix"]
        [::std::mem::offset_of!(ly_opaq_name, prefix) - 8usize];
};
impl Default for ly_opaq_name {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_attr {
    pub parent: *mut lyd_node_opaq,
    pub next: *mut lyd_attr,
    pub name: ly_opaq_name,
    pub value: *const ::std::os::raw::c_char,
    pub hints: u32,
    pub format: LY_VALUE_FORMAT::Type,
    pub val_prefix_data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_attr"][::std::mem::size_of::<lyd_attr>() - 64usize];
    ["Alignment of lyd_attr"][::std::mem::align_of::<lyd_attr>() - 8usize];
    ["Offset of field: lyd_attr::parent"]
        [::std::mem::offset_of!(lyd_attr, parent) - 0usize];
    ["Offset of field: lyd_attr::next"]
        [::std::mem::offset_of!(lyd_attr, next) - 8usize];
    ["Offset of field: lyd_attr::name"]
        [::std::mem::offset_of!(lyd_attr, name) - 16usize];
    ["Offset of field: lyd_attr::value"]
        [::std::mem::offset_of!(lyd_attr, value) - 40usize];
    ["Offset of field: lyd_attr::hints"]
        [::std::mem::offset_of!(lyd_attr, hints) - 48usize];
    ["Offset of field: lyd_attr::format"]
        [::std::mem::offset_of!(lyd_attr, format) - 52usize];
    ["Offset of field: lyd_attr::val_prefix_data"]
        [::std::mem::offset_of!(lyd_attr, val_prefix_data) - 56usize];
};
impl Default for lyd_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_node {
    pub hash: u32,
    pub flags: u32,
    pub schema: *const lysc_node,
    pub parent: *mut lyd_node_inner,
    pub next: *mut lyd_node,
    pub prev: *mut lyd_node,
    pub meta: *mut lyd_meta,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node"][::std::mem::size_of::<lyd_node>() - 56usize];
    ["Alignment of lyd_node"][::std::mem::align_of::<lyd_node>() - 8usize];
    ["Offset of field: lyd_node::hash"]
        [::std::mem::offset_of!(lyd_node, hash) - 0usize];
    ["Offset of field: lyd_node::flags"]
        [::std::mem::offset_of!(lyd_node, flags) - 4usize];
    ["Offset of field: lyd_node::schema"]
        [::std::mem::offset_of!(lyd_node, schema) - 8usize];
    ["Offset of field: lyd_node::parent"]
        [::std::mem::offset_of!(lyd_node, parent) - 16usize];
    ["Offset of field: lyd_node::next"]
        [::std::mem::offset_of!(lyd_node, next) - 24usize];
    ["Offset of field: lyd_node::prev"]
        [::std::mem::offset_of!(lyd_node, prev) - 32usize];
    ["Offset of field: lyd_node::meta"]
        [::std::mem::offset_of!(lyd_node, meta) - 40usize];
    ["Offset of field: lyd_node::priv_"]
        [::std::mem::offset_of!(lyd_node, priv_) - 48usize];
};
impl Default for lyd_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_node_inner {
    pub __bindgen_anon_1: lyd_node_inner__bindgen_ty_1,
    pub child: *mut lyd_node,
    pub children_ht: *mut ly_ht,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lyd_node_inner__bindgen_ty_1 {
    pub node: lyd_node,
    pub __bindgen_anon_1: lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_node_inner__bindgen_ty_1__bindgen_ty_1 {
    pub hash: u32,
    pub flags: u32,
    pub schema: *const lysc_node,
    pub parent: *mut lyd_node_inner,
    pub next: *mut lyd_node,
    pub prev: *mut lyd_node,
    pub meta: *mut lyd_meta,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_inner__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
    >() - 56usize];
    ["Alignment of lyd_node_inner__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lyd_node_inner__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lyd_node_inner__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 0usize];
    ["Offset of field: lyd_node_inner__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 4usize];
    ["Offset of field: lyd_node_inner__bindgen_ty_1__bindgen_ty_1::schema"][::std::mem::offset_of!(
        lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
        schema
    )
        - 8usize];
    ["Offset of field: lyd_node_inner__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lyd_node_inner__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lyd_node_inner__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lyd_node_inner__bindgen_ty_1__bindgen_ty_1::meta"][::std::mem::offset_of!(
        lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
        meta
    )
        - 40usize];
    ["Offset of field: lyd_node_inner__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lyd_node_inner__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 48usize];
};
impl Default for lyd_node_inner__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_inner__bindgen_ty_1"]
        [::std::mem::size_of::<lyd_node_inner__bindgen_ty_1>() - 56usize];
    ["Alignment of lyd_node_inner__bindgen_ty_1"]
        [::std::mem::align_of::<lyd_node_inner__bindgen_ty_1>() - 8usize];
    ["Offset of field: lyd_node_inner__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lyd_node_inner__bindgen_ty_1, node) - 0usize];
};
impl Default for lyd_node_inner__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_inner"]
        [::std::mem::size_of::<lyd_node_inner>() - 72usize];
    ["Alignment of lyd_node_inner"]
        [::std::mem::align_of::<lyd_node_inner>() - 8usize];
    ["Offset of field: lyd_node_inner::child"]
        [::std::mem::offset_of!(lyd_node_inner, child) - 56usize];
    ["Offset of field: lyd_node_inner::children_ht"]
        [::std::mem::offset_of!(lyd_node_inner, children_ht) - 64usize];
};
impl Default for lyd_node_inner {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_node_term {
    pub __bindgen_anon_1: lyd_node_term__bindgen_ty_1,
    pub value: lyd_value,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lyd_node_term__bindgen_ty_1 {
    pub node: lyd_node,
    pub __bindgen_anon_1: lyd_node_term__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_node_term__bindgen_ty_1__bindgen_ty_1 {
    pub hash: u32,
    pub flags: u32,
    pub schema: *const lysc_node,
    pub parent: *mut lyd_node_inner,
    pub next: *mut lyd_node,
    pub prev: *mut lyd_node,
    pub meta: *mut lyd_meta,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_term__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lyd_node_term__bindgen_ty_1__bindgen_ty_1,
    >() - 56usize];
    ["Alignment of lyd_node_term__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lyd_node_term__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lyd_node_term__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lyd_node_term__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 0usize];
    ["Offset of field: lyd_node_term__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lyd_node_term__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 4usize];
    ["Offset of field: lyd_node_term__bindgen_ty_1__bindgen_ty_1::schema"][::std::mem::offset_of!(
        lyd_node_term__bindgen_ty_1__bindgen_ty_1,
        schema
    )
        - 8usize];
    ["Offset of field: lyd_node_term__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lyd_node_term__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lyd_node_term__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lyd_node_term__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lyd_node_term__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lyd_node_term__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lyd_node_term__bindgen_ty_1__bindgen_ty_1::meta"][::std::mem::offset_of!(
        lyd_node_term__bindgen_ty_1__bindgen_ty_1,
        meta
    )
        - 40usize];
    ["Offset of field: lyd_node_term__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lyd_node_term__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 48usize];
};
impl Default for lyd_node_term__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_term__bindgen_ty_1"]
        [::std::mem::size_of::<lyd_node_term__bindgen_ty_1>() - 56usize];
    ["Alignment of lyd_node_term__bindgen_ty_1"]
        [::std::mem::align_of::<lyd_node_term__bindgen_ty_1>() - 8usize];
    ["Offset of field: lyd_node_term__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lyd_node_term__bindgen_ty_1, node) - 0usize];
};
impl Default for lyd_node_term__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_term"][::std::mem::size_of::<lyd_node_term>() - 96usize];
    ["Alignment of lyd_node_term"]
        [::std::mem::align_of::<lyd_node_term>() - 8usize];
    ["Offset of field: lyd_node_term::value"]
        [::std::mem::offset_of!(lyd_node_term, value) - 56usize];
};
impl Default for lyd_node_term {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lyd_any_value {
    pub tree: *mut lyd_node,
    pub str_: *const ::std::os::raw::c_char,
    pub xml: *const ::std::os::raw::c_char,
    pub json: *const ::std::os::raw::c_char,
    pub mem: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_any_value"][::std::mem::size_of::<lyd_any_value>() - 8usize];
    ["Alignment of lyd_any_value"]
        [::std::mem::align_of::<lyd_any_value>() - 8usize];
    ["Offset of field: lyd_any_value::tree"]
        [::std::mem::offset_of!(lyd_any_value, tree) - 0usize];
    ["Offset of field: lyd_any_value::str_"]
        [::std::mem::offset_of!(lyd_any_value, str_) - 0usize];
    ["Offset of field: lyd_any_value::xml"]
        [::std::mem::offset_of!(lyd_any_value, xml) - 0usize];
    ["Offset of field: lyd_any_value::json"]
        [::std::mem::offset_of!(lyd_any_value, json) - 0usize];
    ["Offset of field: lyd_any_value::mem"]
        [::std::mem::offset_of!(lyd_any_value, mem) - 0usize];
};
impl Default for lyd_any_value {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_node_any {
    pub __bindgen_anon_1: lyd_node_any__bindgen_ty_1,
    pub value: lyd_any_value,
    pub value_type: LYD_ANYDATA_VALUETYPE::Type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lyd_node_any__bindgen_ty_1 {
    pub node: lyd_node,
    pub __bindgen_anon_1: lyd_node_any__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_node_any__bindgen_ty_1__bindgen_ty_1 {
    pub hash: u32,
    pub flags: u32,
    pub schema: *const lysc_node,
    pub parent: *mut lyd_node_inner,
    pub next: *mut lyd_node,
    pub prev: *mut lyd_node,
    pub meta: *mut lyd_meta,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_any__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lyd_node_any__bindgen_ty_1__bindgen_ty_1,
    >() - 56usize];
    ["Alignment of lyd_node_any__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lyd_node_any__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lyd_node_any__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lyd_node_any__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 0usize];
    ["Offset of field: lyd_node_any__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lyd_node_any__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 4usize];
    ["Offset of field: lyd_node_any__bindgen_ty_1__bindgen_ty_1::schema"][::std::mem::offset_of!(
        lyd_node_any__bindgen_ty_1__bindgen_ty_1,
        schema
    )
        - 8usize];
    ["Offset of field: lyd_node_any__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lyd_node_any__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lyd_node_any__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lyd_node_any__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lyd_node_any__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lyd_node_any__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lyd_node_any__bindgen_ty_1__bindgen_ty_1::meta"][::std::mem::offset_of!(
        lyd_node_any__bindgen_ty_1__bindgen_ty_1,
        meta
    )
        - 40usize];
    ["Offset of field: lyd_node_any__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lyd_node_any__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 48usize];
};
impl Default for lyd_node_any__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_any__bindgen_ty_1"]
        [::std::mem::size_of::<lyd_node_any__bindgen_ty_1>() - 56usize];
    ["Alignment of lyd_node_any__bindgen_ty_1"]
        [::std::mem::align_of::<lyd_node_any__bindgen_ty_1>() - 8usize];
    ["Offset of field: lyd_node_any__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lyd_node_any__bindgen_ty_1, node) - 0usize];
};
impl Default for lyd_node_any__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_any"][::std::mem::size_of::<lyd_node_any>() - 72usize];
    ["Alignment of lyd_node_any"]
        [::std::mem::align_of::<lyd_node_any>() - 8usize];
    ["Offset of field: lyd_node_any::value"]
        [::std::mem::offset_of!(lyd_node_any, value) - 56usize];
    ["Offset of field: lyd_node_any::value_type"]
        [::std::mem::offset_of!(lyd_node_any, value_type) - 64usize];
};
impl Default for lyd_node_any {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_node_opaq {
    pub __bindgen_anon_1: lyd_node_opaq__bindgen_ty_1,
    pub child: *mut lyd_node,
    pub name: ly_opaq_name,
    pub value: *const ::std::os::raw::c_char,
    pub hints: u32,
    pub format: LY_VALUE_FORMAT::Type,
    pub val_prefix_data: *mut ::std::os::raw::c_void,
    pub attr: *mut lyd_attr,
    pub ctx: *const ly_ctx,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union lyd_node_opaq__bindgen_ty_1 {
    pub node: lyd_node,
    pub __bindgen_anon_1: lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_node_opaq__bindgen_ty_1__bindgen_ty_1 {
    pub hash: u32,
    pub flags: u32,
    pub schema: *const lysc_node,
    pub parent: *mut lyd_node_inner,
    pub next: *mut lyd_node,
    pub prev: *mut lyd_node,
    pub meta: *mut lyd_meta,
    pub priv_: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_opaq__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
    >() - 56usize];
    ["Alignment of lyd_node_opaq__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<lyd_node_opaq__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    ["Offset of field: lyd_node_opaq__bindgen_ty_1__bindgen_ty_1::hash"][::std::mem::offset_of!(
        lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
        hash
    )
        - 0usize];
    ["Offset of field: lyd_node_opaq__bindgen_ty_1__bindgen_ty_1::flags"][::std::mem::offset_of!(
        lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
        flags
    )
        - 4usize];
    ["Offset of field: lyd_node_opaq__bindgen_ty_1__bindgen_ty_1::schema"][::std::mem::offset_of!(
        lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
        schema
    )
        - 8usize];
    ["Offset of field: lyd_node_opaq__bindgen_ty_1__bindgen_ty_1::parent"][::std::mem::offset_of!(
        lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
        parent
    )
        - 16usize];
    ["Offset of field: lyd_node_opaq__bindgen_ty_1__bindgen_ty_1::next"][::std::mem::offset_of!(
        lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
        next
    )
        - 24usize];
    ["Offset of field: lyd_node_opaq__bindgen_ty_1__bindgen_ty_1::prev"][::std::mem::offset_of!(
        lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
        prev
    )
        - 32usize];
    ["Offset of field: lyd_node_opaq__bindgen_ty_1__bindgen_ty_1::meta"][::std::mem::offset_of!(
        lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
        meta
    )
        - 40usize];
    ["Offset of field: lyd_node_opaq__bindgen_ty_1__bindgen_ty_1::priv_"][::std::mem::offset_of!(
        lyd_node_opaq__bindgen_ty_1__bindgen_ty_1,
        priv_
    )
        - 48usize];
};
impl Default for lyd_node_opaq__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_opaq__bindgen_ty_1"]
        [::std::mem::size_of::<lyd_node_opaq__bindgen_ty_1>() - 56usize];
    ["Alignment of lyd_node_opaq__bindgen_ty_1"]
        [::std::mem::align_of::<lyd_node_opaq__bindgen_ty_1>() - 8usize];
    ["Offset of field: lyd_node_opaq__bindgen_ty_1::node"]
        [::std::mem::offset_of!(lyd_node_opaq__bindgen_ty_1, node) - 0usize];
};
impl Default for lyd_node_opaq__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_node_opaq"]
        [::std::mem::size_of::<lyd_node_opaq>() - 128usize];
    ["Alignment of lyd_node_opaq"]
        [::std::mem::align_of::<lyd_node_opaq>() - 8usize];
    ["Offset of field: lyd_node_opaq::child"]
        [::std::mem::offset_of!(lyd_node_opaq, child) - 56usize];
    ["Offset of field: lyd_node_opaq::name"]
        [::std::mem::offset_of!(lyd_node_opaq, name) - 64usize];
    ["Offset of field: lyd_node_opaq::value"]
        [::std::mem::offset_of!(lyd_node_opaq, value) - 88usize];
    ["Offset of field: lyd_node_opaq::hints"]
        [::std::mem::offset_of!(lyd_node_opaq, hints) - 96usize];
    ["Offset of field: lyd_node_opaq::format"]
        [::std::mem::offset_of!(lyd_node_opaq, format) - 100usize];
    ["Offset of field: lyd_node_opaq::val_prefix_data"]
        [::std::mem::offset_of!(lyd_node_opaq, val_prefix_data) - 104usize];
    ["Offset of field: lyd_node_opaq::attr"]
        [::std::mem::offset_of!(lyd_node_opaq, attr) - 112usize];
    ["Offset of field: lyd_node_opaq::ctx"]
        [::std::mem::offset_of!(lyd_node_opaq, ctx) - 120usize];
};
impl Default for lyd_node_opaq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyd_leafref_links_rec {
    pub node: *const lyd_node_term,
    pub leafref_nodes: *mut *const lyd_node_term,
    pub target_nodes: *mut *const lyd_node_term,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_leafref_links_rec"]
        [::std::mem::size_of::<lyd_leafref_links_rec>() - 24usize];
    ["Alignment of lyd_leafref_links_rec"]
        [::std::mem::align_of::<lyd_leafref_links_rec>() - 8usize];
    ["Offset of field: lyd_leafref_links_rec::node"]
        [::std::mem::offset_of!(lyd_leafref_links_rec, node) - 0usize];
    ["Offset of field: lyd_leafref_links_rec::leafref_nodes"]
        [::std::mem::offset_of!(lyd_leafref_links_rec, leafref_nodes) - 8usize];
    ["Offset of field: lyd_leafref_links_rec::target_nodes"]
        [::std::mem::offset_of!(lyd_leafref_links_rec, target_nodes) - 16usize];
};
impl Default for lyd_leafref_links_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn lyd_child_no_keys(node: *const lyd_node) -> *mut lyd_node;
}
unsafe extern "C" {
    pub fn lyd_owner_module(node: *const lyd_node) -> *const lys_module;
}
unsafe extern "C" {
    pub fn lyd_node_module(node: *const lyd_node) -> *const lys_module;
}
unsafe extern "C" {
    pub fn lyd_is_default(node: *const lyd_node) -> ly_bool;
}
unsafe extern "C" {
    pub fn lyd_list_pos(instance: *const lyd_node) -> u32;
}
unsafe extern "C" {
    pub fn lyd_first_sibling(node: *const lyd_node) -> *mut lyd_node;
}
unsafe extern "C" {
    pub fn lyd_lyb_data_length(
        data: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lyd_parse_opaq_error(node: *const lyd_node) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_value_get_canonical(
        ctx: *const ly_ctx,
        value: *const lyd_value,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lyd_any_value_str(
        any: *const lyd_node,
        value_str: *mut *mut ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_any_copy_value(
        trg: *mut lyd_node,
        value: *const lyd_any_value,
        value_type: LYD_ANYDATA_VALUETYPE::Type,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_node_schema(node: *const lyd_node) -> *const lysc_node;
}
unsafe extern "C" {
    pub fn lyd_meta_is_internal(meta: *const lyd_meta) -> ly_bool;
}
unsafe extern "C" {
    pub fn lyd_new_inner(
        parent: *mut lyd_node,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
        output: ly_bool,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_ext_inner(
        ext: *const lysc_ext_instance,
        name: *const ::std::os::raw::c_char,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_list(
        parent: *mut lyd_node,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
        options: u32,
        node: *mut *mut lyd_node,
        ...
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_ext_list(
        ext: *const lysc_ext_instance,
        name: *const ::std::os::raw::c_char,
        options: u32,
        node: *mut *mut lyd_node,
        ...
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_list2(
        parent: *mut lyd_node,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
        keys: *const ::std::os::raw::c_char,
        options: u32,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_list3(
        parent: *mut lyd_node,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
        key_values: *mut *const ::std::os::raw::c_char,
        value_lengths: *mut u32,
        options: u32,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_term(
        parent: *mut lyd_node,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        options: u32,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_term_bin(
        parent: *mut lyd_node,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_len: usize,
        options: u32,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_ext_term(
        ext: *const lysc_ext_instance,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_len: usize,
        options: u32,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_any(
        parent: *mut lyd_node,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_type: LYD_ANYDATA_VALUETYPE::Type,
        options: u32,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_ext_any(
        ext: *const lysc_ext_instance,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_type: LYD_ANYDATA_VALUETYPE::Type,
        options: u32,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_meta(
        ctx: *const ly_ctx,
        parent: *mut lyd_node,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
        val_str: *const ::std::os::raw::c_char,
        options: u32,
        meta: *mut *mut lyd_meta,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_meta2(
        ctx: *const ly_ctx,
        parent: *mut lyd_node,
        options: u32,
        attr: *const lyd_attr,
        meta: *mut *mut lyd_meta,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_opaq(
        parent: *mut lyd_node,
        ctx: *const ly_ctx,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        module_name: *const ::std::os::raw::c_char,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_opaq2(
        parent: *mut lyd_node,
        ctx: *const ly_ctx,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
        module_ns: *const ::std::os::raw::c_char,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_attr(
        parent: *mut lyd_node,
        module_name: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        attr: *mut *mut lyd_attr,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_attr2(
        parent: *mut lyd_node,
        module_ns: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        attr: *mut *mut lyd_attr,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_path(
        parent: *mut lyd_node,
        ctx: *const ly_ctx,
        path: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        options: u32,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_path2(
        parent: *mut lyd_node,
        ctx: *const ly_ctx,
        path: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        value_len: usize,
        value_type: LYD_ANYDATA_VALUETYPE::Type,
        options: u32,
        new_parent: *mut *mut lyd_node,
        new_node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_ext_path(
        parent: *mut lyd_node,
        ext: *const lysc_ext_instance,
        path: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        options: u32,
        node: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_implicit_tree(
        tree: *mut lyd_node,
        implicit_options: u32,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_implicit_all(
        tree: *mut *mut lyd_node,
        ctx: *const ly_ctx,
        implicit_options: u32,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_new_implicit_module(
        tree: *mut *mut lyd_node,
        module: *const lys_module,
        implicit_options: u32,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_change_term(
        term: *mut lyd_node,
        val_str: *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_change_term_bin(
        term: *mut lyd_node,
        value: *const ::std::os::raw::c_void,
        value_len: usize,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_change_term_canon(
        term: *mut lyd_node,
        val_str: *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_change_meta(
        meta: *mut lyd_meta,
        val_str: *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_insert_child(
        parent: *mut lyd_node,
        node: *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_insert_sibling(
        sibling: *mut lyd_node,
        node: *mut lyd_node,
        first: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_insert_before(
        sibling: *mut lyd_node,
        node: *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_insert_after(
        sibling: *mut lyd_node,
        node: *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_unlink_siblings(node: *mut lyd_node) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_unlink_tree(node: *mut lyd_node) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_free_all(node: *mut lyd_node);
}
unsafe extern "C" {
    pub fn lyd_free_siblings(node: *mut lyd_node);
}
unsafe extern "C" {
    pub fn lyd_free_tree(node: *mut lyd_node);
}
unsafe extern "C" {
    pub fn lyd_free_meta_single(meta: *mut lyd_meta);
}
unsafe extern "C" {
    pub fn lyd_free_meta_siblings(meta: *mut lyd_meta);
}
unsafe extern "C" {
    pub fn lyd_free_attr_single(ctx: *const ly_ctx, attr: *mut lyd_attr);
}
unsafe extern "C" {
    pub fn lyd_free_attr_siblings(ctx: *const ly_ctx, attr: *mut lyd_attr);
}
unsafe extern "C" {
    pub fn lyd_value_validate(
        ctx: *const ly_ctx,
        schema: *const lysc_node,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
        ctx_node: *const lyd_node,
        realtype: *mut *const lysc_type,
        canonical: *mut *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_value_compare(
        node: *const lyd_node_term,
        value: *const ::std::os::raw::c_char,
        value_len: usize,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_compare_single(
        node1: *const lyd_node,
        node2: *const lyd_node,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_compare_siblings(
        node1: *const lyd_node,
        node2: *const lyd_node,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_compare_meta(
        meta1: *const lyd_meta,
        meta2: *const lyd_meta,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_dup_single(
        node: *const lyd_node,
        parent: *mut lyd_node_inner,
        options: u32,
        dup: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_dup_single_to_ctx(
        node: *const lyd_node,
        trg_ctx: *const ly_ctx,
        parent: *mut lyd_node_inner,
        options: u32,
        dup: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_dup_siblings(
        node: *const lyd_node,
        parent: *mut lyd_node_inner,
        options: u32,
        dup: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_dup_siblings_to_ctx(
        node: *const lyd_node,
        trg_ctx: *const ly_ctx,
        parent: *mut lyd_node_inner,
        options: u32,
        dup: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_dup_meta_single(
        meta: *const lyd_meta,
        parent: *mut lyd_node,
        dup: *mut *mut lyd_meta,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_merge_tree(
        target: *mut *mut lyd_node,
        source: *const lyd_node,
        options: u16,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_merge_siblings(
        target: *mut *mut lyd_node,
        source: *const lyd_node,
        options: u16,
    ) -> LY_ERR::Type;
}
pub type lyd_merge_cb = ::std::option::Option<
    unsafe extern "C" fn(
        trg_node: *mut lyd_node,
        src_node: *const lyd_node,
        cb_data: *mut ::std::os::raw::c_void,
    ) -> LY_ERR::Type,
>;
unsafe extern "C" {
    pub fn lyd_merge_module(
        target: *mut *mut lyd_node,
        source: *const lyd_node,
        mod_: *const lys_module,
        merge_cb: lyd_merge_cb,
        cb_data: *mut ::std::os::raw::c_void,
        options: u16,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_diff_tree(
        first: *const lyd_node,
        second: *const lyd_node,
        options: u16,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_diff_siblings(
        first: *const lyd_node,
        second: *const lyd_node,
        options: u16,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
pub type lyd_diff_cb = ::std::option::Option<
    unsafe extern "C" fn(
        diff_node: *const lyd_node,
        data_node: *mut lyd_node,
        cb_data: *mut ::std::os::raw::c_void,
    ) -> LY_ERR::Type,
>;
unsafe extern "C" {
    pub fn lyd_diff_apply_module(
        data: *mut *mut lyd_node,
        diff: *const lyd_node,
        mod_: *const lys_module,
        diff_cb: lyd_diff_cb,
        cb_data: *mut ::std::os::raw::c_void,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_diff_apply_all(
        data: *mut *mut lyd_node,
        diff: *const lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_diff_merge_module(
        diff: *mut *mut lyd_node,
        src_diff: *const lyd_node,
        mod_: *const lys_module,
        diff_cb: lyd_diff_cb,
        cb_data: *mut ::std::os::raw::c_void,
        options: u16,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_diff_merge_tree(
        diff_first: *mut *mut lyd_node,
        diff_parent: *mut lyd_node,
        src_sibling: *const lyd_node,
        diff_cb: lyd_diff_cb,
        cb_data: *mut ::std::os::raw::c_void,
        options: u16,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_diff_merge_all(
        diff: *mut *mut lyd_node,
        src_diff: *const lyd_node,
        options: u16,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_diff_reverse_all(
        src_diff: *const lyd_node,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
pub mod LYD_PATH_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYD_PATH_STD: Type = 0;
    pub const LYD_PATH_STD_NO_LAST_PRED: Type = 1;
}
unsafe extern "C" {
    pub fn lyd_path(
        node: *const lyd_node,
        pathtype: LYD_PATH_TYPE::Type,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lyd_find_meta(
        first: *const lyd_meta,
        module: *const lys_module,
        name: *const ::std::os::raw::c_char,
    ) -> *mut lyd_meta;
}
unsafe extern "C" {
    pub fn lyd_find_sibling_first(
        siblings: *const lyd_node,
        target: *const lyd_node,
        match_: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_find_sibling_val(
        siblings: *const lyd_node,
        schema: *const lysc_node,
        key_or_value: *const ::std::os::raw::c_char,
        val_len: usize,
        match_: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_find_sibling_dup_inst_set(
        siblings: *const lyd_node,
        target: *const lyd_node,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_find_sibling_opaq_next(
        first: *const lyd_node,
        name: *const ::std::os::raw::c_char,
        match_: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyxp_vars_set(
        vars: *mut *mut lyxp_var,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyxp_vars_free(vars: *mut lyxp_var);
}
unsafe extern "C" {
    pub fn lyd_find_xpath(
        ctx_node: *const lyd_node,
        xpath: *const ::std::os::raw::c_char,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_find_xpath2(
        ctx_node: *const lyd_node,
        xpath: *const ::std::os::raw::c_char,
        vars: *const lyxp_var,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_find_xpath3(
        ctx_node: *const lyd_node,
        tree: *const lyd_node,
        xpath: *const ::std::os::raw::c_char,
        format: LY_VALUE_FORMAT::Type,
        prefix_data: *mut ::std::os::raw::c_void,
        vars: *const lyxp_var,
        set: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_eval_xpath(
        ctx_node: *const lyd_node,
        xpath: *const ::std::os::raw::c_char,
        result: *mut ly_bool,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_eval_xpath2(
        ctx_node: *const lyd_node,
        xpath: *const ::std::os::raw::c_char,
        vars: *const lyxp_var,
        result: *mut ly_bool,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_eval_xpath3(
        ctx_node: *const lyd_node,
        cur_mod: *const lys_module,
        xpath: *const ::std::os::raw::c_char,
        format: LY_VALUE_FORMAT::Type,
        prefix_data: *mut ::std::os::raw::c_void,
        vars: *const lyxp_var,
        result: *mut ly_bool,
    ) -> LY_ERR::Type;
}
pub mod LY_XPATH_TYPE {
    pub type Type = ::std::os::raw::c_uint;
    pub const LY_XPATH_NODE_SET: Type = 0;
    pub const LY_XPATH_STRING: Type = 1;
    pub const LY_XPATH_NUMBER: Type = 2;
    pub const LY_XPATH_BOOLEAN: Type = 3;
}
unsafe extern "C" {
    pub fn lyd_eval_xpath4(
        ctx_node: *const lyd_node,
        tree: *const lyd_node,
        cur_mod: *const lys_module,
        xpath: *const ::std::os::raw::c_char,
        format: LY_VALUE_FORMAT::Type,
        prefix_data: *mut ::std::os::raw::c_void,
        vars: *const lyxp_var,
        ret_type: *mut LY_XPATH_TYPE::Type,
        node_set: *mut *mut ly_set,
        string: *mut *mut ::std::os::raw::c_char,
        number: *mut u128,
        boolean: *mut ly_bool,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_trim_xpath(
        tree: *mut *mut lyd_node,
        xpath: *const ::std::os::raw::c_char,
        vars: *const lyxp_var,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_find_path(
        ctx_node: *const lyd_node,
        path: *const ::std::os::raw::c_char,
        output: ly_bool,
        match_: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_find_target(
        path: *const ly_path,
        tree: *const lyd_node,
        match_: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_time_tz_offset() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ly_time_tz_offset_at(time: time_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ly_time_str2time(
        value: *const ::std::os::raw::c_char,
        time: *mut time_t,
        fractions_s: *mut *mut ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_time_time2str(
        time: time_t,
        fractions_s: *const ::std::os::raw::c_char,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_time_str2ts(
        value: *const ::std::os::raw::c_char,
        ts: *mut timespec,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_time_ts2str(
        ts: *const timespec,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_leafref_get_links(
        node: *const lyd_node_term,
        record: *mut *const lyd_leafref_links_rec,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_leafref_link_node_tree(tree: *const lyd_node) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_pattern_match(
        ctx: *const ly_ctx,
        pattern: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
        str_len: u32,
        pcode: *mut *mut pcre2_code_8,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_pattern_compile(
        ctx: *const ly_ctx,
        pattern: *const ::std::os::raw::c_char,
        pcode: *mut *mut pcre2_code_8,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_new(
        search_dir: *const ::std::os::raw::c_char,
        options: u16,
        new_ctx: *mut *mut ly_ctx,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_new_ylpath(
        search_dir: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        format: LYD_FORMAT::Type,
        options: ::std::os::raw::c_int,
        ctx: *mut *mut ly_ctx,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_new_ylmem(
        search_dir: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        format: LYD_FORMAT::Type,
        options: ::std::os::raw::c_int,
        ctx: *mut *mut ly_ctx,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_new_yldata(
        search_dir: *const ::std::os::raw::c_char,
        tree: *const lyd_node,
        options: ::std::os::raw::c_int,
        ctx: *mut *mut ly_ctx,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_compile(ctx: *mut ly_ctx) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_set_searchdir(
        ctx: *mut ly_ctx,
        search_dir: *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_unset_searchdir(
        ctx: *mut ly_ctx,
        value: *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_unset_searchdir_last(
        ctx: *mut ly_ctx,
        count: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_get_searchdirs(
        ctx: *const ly_ctx,
    ) -> *const *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ly_ctx_get_options(ctx: *const ly_ctx) -> u16;
}
unsafe extern "C" {
    pub fn ly_ctx_set_options(ctx: *mut ly_ctx, option: u16) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_unset_options(ctx: *mut ly_ctx, option: u16) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_get_change_count(ctx: *const ly_ctx) -> u16;
}
unsafe extern "C" {
    pub fn ly_ctx_get_modules_hash(ctx: *const ly_ctx) -> u32;
}
pub type ly_module_imp_data_free_clb = ::std::option::Option<
    unsafe extern "C" fn(
        module_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type ly_module_imp_clb = ::std::option::Option<
    unsafe extern "C" fn(
        mod_name: *const ::std::os::raw::c_char,
        mod_rev: *const ::std::os::raw::c_char,
        submod_name: *const ::std::os::raw::c_char,
        submod_rev: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
        format: *mut LYS_INFORMAT::Type,
        module_data: *mut *const ::std::os::raw::c_char,
        free_module_data: *mut ly_module_imp_data_free_clb,
    ) -> LY_ERR::Type,
>;
unsafe extern "C" {
    pub fn ly_ctx_get_module_imp_clb(
        ctx: *const ly_ctx,
        user_data: *mut *mut ::std::os::raw::c_void,
    ) -> ly_module_imp_clb;
}
unsafe extern "C" {
    pub fn ly_ctx_set_module_imp_clb(
        ctx: *mut ly_ctx,
        clb: ly_module_imp_clb,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type ly_ext_data_clb = ::std::option::Option<
    unsafe extern "C" fn(
        ext: *const lysc_ext_instance,
        user_data: *mut ::std::os::raw::c_void,
        ext_data: *mut *mut ::std::os::raw::c_void,
        ext_data_free: *mut ly_bool,
    ) -> LY_ERR::Type,
>;
unsafe extern "C" {
    pub fn ly_ctx_set_ext_data_clb(
        ctx: *mut ly_ctx,
        clb: ly_ext_data_clb,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ly_ext_data_clb;
}
unsafe extern "C" {
    pub fn ly_ctx_get_module(
        ctx: *const ly_ctx,
        name: *const ::std::os::raw::c_char,
        revision: *const ::std::os::raw::c_char,
    ) -> *mut lys_module;
}
unsafe extern "C" {
    pub fn ly_ctx_get_module_latest(
        ctx: *const ly_ctx,
        name: *const ::std::os::raw::c_char,
    ) -> *mut lys_module;
}
unsafe extern "C" {
    pub fn ly_ctx_get_module_implemented(
        ctx: *const ly_ctx,
        name: *const ::std::os::raw::c_char,
    ) -> *mut lys_module;
}
unsafe extern "C" {
    pub fn ly_ctx_get_module_iter(
        ctx: *const ly_ctx,
        index: *mut u32,
    ) -> *mut lys_module;
}
unsafe extern "C" {
    pub fn ly_ctx_get_module_ns(
        ctx: *const ly_ctx,
        ns: *const ::std::os::raw::c_char,
        revision: *const ::std::os::raw::c_char,
    ) -> *mut lys_module;
}
unsafe extern "C" {
    pub fn ly_ctx_get_module_latest_ns(
        ctx: *const ly_ctx,
        ns: *const ::std::os::raw::c_char,
    ) -> *mut lys_module;
}
unsafe extern "C" {
    pub fn ly_ctx_get_module_implemented_ns(
        ctx: *const ly_ctx,
        ns: *const ::std::os::raw::c_char,
    ) -> *mut lys_module;
}
unsafe extern "C" {
    pub fn ly_ctx_get_submodule(
        ctx: *const ly_ctx,
        submodule: *const ::std::os::raw::c_char,
        revision: *const ::std::os::raw::c_char,
    ) -> *const lysp_submodule;
}
unsafe extern "C" {
    pub fn ly_ctx_get_submodule_latest(
        ctx: *const ly_ctx,
        submodule: *const ::std::os::raw::c_char,
    ) -> *const lysp_submodule;
}
unsafe extern "C" {
    pub fn ly_ctx_get_submodule2(
        module: *const lys_module,
        submodule: *const ::std::os::raw::c_char,
        revision: *const ::std::os::raw::c_char,
    ) -> *const lysp_submodule;
}
unsafe extern "C" {
    pub fn ly_ctx_get_submodule2_latest(
        module: *const lys_module,
        submodule: *const ::std::os::raw::c_char,
    ) -> *const lysp_submodule;
}
unsafe extern "C" {
    pub fn ly_ctx_internal_modules_count(ctx: *const ly_ctx) -> u32;
}
unsafe extern "C" {
    pub fn ly_ctx_load_module(
        ctx: *mut ly_ctx,
        name: *const ::std::os::raw::c_char,
        revision: *const ::std::os::raw::c_char,
        features: *mut *const ::std::os::raw::c_char,
    ) -> *mut lys_module;
}
unsafe extern "C" {
    pub fn ly_ctx_get_yanglib_data(
        ctx: *const ly_ctx,
        root: *mut *mut lyd_node,
        content_id_format: *const ::std::os::raw::c_char,
        ...
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_ctx_destroy(ctx: *mut ly_ctx);
}
unsafe extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(
        __s: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlen(
        __s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strnlen(
        __string: *const ::std::os::raw::c_char,
        __maxlen: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strerror(
        __errnum: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
unsafe extern "C" {
    pub fn bzero(
        __s: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    );
}
unsafe extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strsignal(
        __sig: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lydict_insert(
        ctx: *const ly_ctx,
        value: *const ::std::os::raw::c_char,
        len: usize,
        str_p: *mut *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lydict_insert_zc(
        ctx: *const ly_ctx,
        value: *mut ::std::os::raw::c_char,
        str_p: *mut *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lydict_remove(
        ctx: *const ly_ctx,
        value: *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lydict_dup(
        ctx: *const ly_ctx,
        value: *const ::std::os::raw::c_char,
        str_p: *mut *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type;
}
pub mod LY_IN_TYPE {
    pub type Type = ::std::os::raw::c_int;
    pub const LY_IN_ERROR: Type = -1;
    pub const LY_IN_FD: Type = 0;
    pub const LY_IN_FILE: Type = 1;
    pub const LY_IN_FILEPATH: Type = 2;
    pub const LY_IN_MEMORY: Type = 3;
}
unsafe extern "C" {
    pub fn ly_in_type(in_: *const ly_in) -> LY_IN_TYPE::Type;
}
unsafe extern "C" {
    pub fn ly_in_reset(in_: *mut ly_in) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_in_new_fd(
        fd: ::std::os::raw::c_int,
        in_: *mut *mut ly_in,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_in_fd(
        in_: *mut ly_in,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ly_in_new_file(f: *mut FILE, in_: *mut *mut ly_in) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_in_file(in_: *mut ly_in, f: *mut FILE) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ly_in_new_memory(
        str_: *const ::std::os::raw::c_char,
        in_: *mut *mut ly_in,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_in_memory(
        in_: *mut ly_in,
        str_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ly_in_new_filepath(
        filepath: *const ::std::os::raw::c_char,
        len: usize,
        in_: *mut *mut ly_in,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_in_filepath(
        in_: *mut ly_in,
        filepath: *const ::std::os::raw::c_char,
        len: usize,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ly_in_parsed(in_: *const ly_in) -> usize;
}
unsafe extern "C" {
    pub fn ly_in_free(in_: *mut ly_in, destroy: ly_bool);
}
unsafe extern "C" {
    pub fn ly_in_read(
        in_: *mut ly_in,
        buf: *mut ::std::os::raw::c_void,
        count: usize,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_in_skip(in_: *mut ly_in, count: usize) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_parse_data(
        ctx: *const ly_ctx,
        parent: *mut lyd_node,
        in_: *mut ly_in,
        format: LYD_FORMAT::Type,
        parse_options: u32,
        validate_options: u32,
        tree: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_parse_data_mem(
        ctx: *const ly_ctx,
        data: *const ::std::os::raw::c_char,
        format: LYD_FORMAT::Type,
        parse_options: u32,
        validate_options: u32,
        tree: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_parse_data_fd(
        ctx: *const ly_ctx,
        fd: ::std::os::raw::c_int,
        format: LYD_FORMAT::Type,
        parse_options: u32,
        validate_options: u32,
        tree: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_parse_data_path(
        ctx: *const ly_ctx,
        path: *const ::std::os::raw::c_char,
        format: LYD_FORMAT::Type,
        parse_options: u32,
        validate_options: u32,
        tree: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_parse_ext_data(
        ext: *const lysc_ext_instance,
        parent: *mut lyd_node,
        in_: *mut ly_in,
        format: LYD_FORMAT::Type,
        parse_options: u32,
        validate_options: u32,
        tree: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
pub mod lyd_type {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYD_TYPE_DATA_YANG: Type = 0;
    pub const LYD_TYPE_RPC_YANG: Type = 1;
    pub const LYD_TYPE_NOTIF_YANG: Type = 2;
    pub const LYD_TYPE_REPLY_YANG: Type = 3;
    pub const LYD_TYPE_RPC_NETCONF: Type = 4;
    pub const LYD_TYPE_NOTIF_NETCONF: Type = 5;
    pub const LYD_TYPE_REPLY_NETCONF: Type = 6;
    pub const LYD_TYPE_RPC_RESTCONF: Type = 7;
    pub const LYD_TYPE_NOTIF_RESTCONF: Type = 8;
    pub const LYD_TYPE_REPLY_RESTCONF: Type = 9;
}
unsafe extern "C" {
    pub fn lyd_parse_op(
        ctx: *const ly_ctx,
        parent: *mut lyd_node,
        in_: *mut ly_in,
        format: LYD_FORMAT::Type,
        data_type: lyd_type::Type,
        tree: *mut *mut lyd_node,
        op: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_parse_ext_op(
        ext: *const lysc_ext_instance,
        parent: *mut lyd_node,
        in_: *mut ly_in,
        format: LYD_FORMAT::Type,
        data_type: lyd_type::Type,
        tree: *mut *mut lyd_node,
        op: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_validate_all(
        tree: *mut *mut lyd_node,
        ctx: *const ly_ctx,
        val_opts: u32,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_validate_module(
        tree: *mut *mut lyd_node,
        module: *const lys_module,
        val_opts: u32,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_validate_module_final(
        tree: *mut lyd_node,
        module: *const lys_module,
        val_opts: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_validate_op(
        op_tree: *mut lyd_node,
        dep_tree: *const lyd_node,
        data_type: lyd_type::Type,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyplg_type_record {
    _unused: [u8; 0],
}
pub mod LYPLG {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYPLG_TYPE: Type = 0;
    pub const LYPLG_EXTENSION: Type = 1;
}
unsafe extern "C" {
    pub fn lyplg_add(pathname: *const ::std::os::raw::c_char) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_add_extension_plugin(
        ctx: *mut ly_ctx,
        version: u32,
        recs: *const lyplg_ext_record,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_add_type_plugin(
        ctx: *mut ly_ctx,
        version: u32,
        recs: *const lyplg_type_record,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyspr_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyspr_tree_ctx {
    _unused: [u8; 0],
}
pub mod ly_stmt {
    pub type Type = ::std::os::raw::c_uint;
    pub const LY_STMT_NONE: Type = 0;
    pub const LY_STMT_NOTIFICATION: Type = 1;
    pub const LY_STMT_INPUT: Type = 2;
    pub const LY_STMT_OUTPUT: Type = 4;
    pub const LY_STMT_ACTION: Type = 8;
    pub const LY_STMT_RPC: Type = 16;
    pub const LY_STMT_ANYDATA: Type = 32;
    pub const LY_STMT_ANYXML: Type = 64;
    pub const LY_STMT_AUGMENT: Type = 128;
    pub const LY_STMT_CASE: Type = 256;
    pub const LY_STMT_CHOICE: Type = 512;
    pub const LY_STMT_CONTAINER: Type = 1024;
    pub const LY_STMT_GROUPING: Type = 2048;
    pub const LY_STMT_LEAF: Type = 4096;
    pub const LY_STMT_LEAF_LIST: Type = 8192;
    pub const LY_STMT_LIST: Type = 16384;
    pub const LY_STMT_USES: Type = 32768;
    pub const LY_STMT_ARGUMENT: Type = 65536;
    pub const LY_STMT_BASE: Type = 131072;
    pub const LY_STMT_BELONGS_TO: Type = 196608;
    pub const LY_STMT_BIT: Type = 262144;
    pub const LY_STMT_CONFIG: Type = 327680;
    pub const LY_STMT_CONTACT: Type = 393216;
    pub const LY_STMT_DEFAULT: Type = 458752;
    pub const LY_STMT_DESCRIPTION: Type = 524288;
    pub const LY_STMT_DEVIATE: Type = 589824;
    pub const LY_STMT_DEVIATION: Type = 655360;
    pub const LY_STMT_ENUM: Type = 720896;
    pub const LY_STMT_ERROR_APP_TAG: Type = 786432;
    pub const LY_STMT_ERROR_MESSAGE: Type = 851968;
    pub const LY_STMT_EXTENSION: Type = 917504;
    pub const LY_STMT_EXTENSION_INSTANCE: Type = 983040;
    pub const LY_STMT_FEATURE: Type = 1048576;
    pub const LY_STMT_FRACTION_DIGITS: Type = 1114112;
    pub const LY_STMT_IDENTITY: Type = 1179648;
    pub const LY_STMT_IF_FEATURE: Type = 1245184;
    pub const LY_STMT_IMPORT: Type = 1310720;
    pub const LY_STMT_INCLUDE: Type = 1376256;
    pub const LY_STMT_KEY: Type = 1441792;
    pub const LY_STMT_LENGTH: Type = 1507328;
    pub const LY_STMT_MANDATORY: Type = 1572864;
    pub const LY_STMT_MAX_ELEMENTS: Type = 1638400;
    pub const LY_STMT_MIN_ELEMENTS: Type = 1703936;
    pub const LY_STMT_MODIFIER: Type = 1769472;
    pub const LY_STMT_MODULE: Type = 1835008;
    pub const LY_STMT_MUST: Type = 1900544;
    pub const LY_STMT_NAMESPACE: Type = 1966080;
    pub const LY_STMT_ORDERED_BY: Type = 2031616;
    pub const LY_STMT_ORGANIZATION: Type = 2097152;
    pub const LY_STMT_PATH: Type = 2162688;
    pub const LY_STMT_PATTERN: Type = 2228224;
    pub const LY_STMT_POSITION: Type = 2293760;
    pub const LY_STMT_PREFIX: Type = 2359296;
    pub const LY_STMT_PRESENCE: Type = 2424832;
    pub const LY_STMT_RANGE: Type = 2490368;
    pub const LY_STMT_REFERENCE: Type = 2555904;
    pub const LY_STMT_REFINE: Type = 2621440;
    pub const LY_STMT_REQUIRE_INSTANCE: Type = 2686976;
    pub const LY_STMT_REVISION: Type = 2752512;
    pub const LY_STMT_REVISION_DATE: Type = 2818048;
    pub const LY_STMT_STATUS: Type = 2883584;
    pub const LY_STMT_SUBMODULE: Type = 2949120;
    pub const LY_STMT_TYPE: Type = 3014656;
    pub const LY_STMT_TYPEDEF: Type = 3080192;
    pub const LY_STMT_UNIQUE: Type = 3145728;
    pub const LY_STMT_UNITS: Type = 3211264;
    pub const LY_STMT_VALUE: Type = 3276800;
    pub const LY_STMT_WHEN: Type = 3342336;
    pub const LY_STMT_YANG_VERSION: Type = 3407872;
    pub const LY_STMT_YIN_ELEMENT: Type = 3473408;
    pub const LY_STMT_SYNTAX_SEMICOLON: Type = 3473409;
    pub const LY_STMT_SYNTAX_LEFT_BRACE: Type = 3473410;
    pub const LY_STMT_SYNTAX_RIGHT_BRACE: Type = 3473411;
    pub const LY_STMT_ARG_TEXT: Type = 3473412;
    pub const LY_STMT_ARG_VALUE: Type = 3473413;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_stmt {
    pub stmt: *const ::std::os::raw::c_char,
    pub arg: *const ::std::os::raw::c_char,
    pub format: LY_VALUE_FORMAT::Type,
    pub prefix_data: *mut ::std::os::raw::c_void,
    pub next: *mut lysp_stmt,
    pub child: *mut lysp_stmt,
    pub flags: u16,
    pub kw: ly_stmt::Type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_stmt"][::std::mem::size_of::<lysp_stmt>() - 56usize];
    ["Alignment of lysp_stmt"][::std::mem::align_of::<lysp_stmt>() - 8usize];
    ["Offset of field: lysp_stmt::stmt"]
        [::std::mem::offset_of!(lysp_stmt, stmt) - 0usize];
    ["Offset of field: lysp_stmt::arg"]
        [::std::mem::offset_of!(lysp_stmt, arg) - 8usize];
    ["Offset of field: lysp_stmt::format"]
        [::std::mem::offset_of!(lysp_stmt, format) - 16usize];
    ["Offset of field: lysp_stmt::prefix_data"]
        [::std::mem::offset_of!(lysp_stmt, prefix_data) - 24usize];
    ["Offset of field: lysp_stmt::next"]
        [::std::mem::offset_of!(lysp_stmt, next) - 32usize];
    ["Offset of field: lysp_stmt::child"]
        [::std::mem::offset_of!(lysp_stmt, child) - 40usize];
    ["Offset of field: lysp_stmt::flags"]
        [::std::mem::offset_of!(lysp_stmt, flags) - 48usize];
    ["Offset of field: lysp_stmt::kw"]
        [::std::mem::offset_of!(lysp_stmt, kw) - 52usize];
};
impl Default for lysp_stmt {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_ext_substmt {
    pub stmt: ly_stmt::Type,
    pub storage_p: *mut *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_ext_substmt"]
        [::std::mem::size_of::<lysp_ext_substmt>() - 16usize];
    ["Alignment of lysp_ext_substmt"]
        [::std::mem::align_of::<lysp_ext_substmt>() - 8usize];
    ["Offset of field: lysp_ext_substmt::stmt"]
        [::std::mem::offset_of!(lysp_ext_substmt, stmt) - 0usize];
    ["Offset of field: lysp_ext_substmt::storage_p"]
        [::std::mem::offset_of!(lysp_ext_substmt, storage_p) - 8usize];
};
impl Default for lysp_ext_substmt {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysp_ext_instance {
    pub name: *const ::std::os::raw::c_char,
    pub argument: *const ::std::os::raw::c_char,
    pub format: LY_VALUE_FORMAT::Type,
    pub prefix_data: *mut ::std::os::raw::c_void,
    pub def: *mut lysp_ext,
    pub parent: *mut ::std::os::raw::c_void,
    pub parent_stmt: ly_stmt::Type,
    pub parent_stmt_index: u64,
    pub flags: u16,
    pub record: *const lyplg_ext_record,
    pub substmts: *mut lysp_ext_substmt,
    pub parsed: *mut ::std::os::raw::c_void,
    pub child: *mut lysp_stmt,
    pub exts: *mut lysp_ext_instance,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysp_ext_instance"]
        [::std::mem::size_of::<lysp_ext_instance>() - 112usize];
    ["Alignment of lysp_ext_instance"]
        [::std::mem::align_of::<lysp_ext_instance>() - 8usize];
    ["Offset of field: lysp_ext_instance::name"]
        [::std::mem::offset_of!(lysp_ext_instance, name) - 0usize];
    ["Offset of field: lysp_ext_instance::argument"]
        [::std::mem::offset_of!(lysp_ext_instance, argument) - 8usize];
    ["Offset of field: lysp_ext_instance::format"]
        [::std::mem::offset_of!(lysp_ext_instance, format) - 16usize];
    ["Offset of field: lysp_ext_instance::prefix_data"]
        [::std::mem::offset_of!(lysp_ext_instance, prefix_data) - 24usize];
    ["Offset of field: lysp_ext_instance::def"]
        [::std::mem::offset_of!(lysp_ext_instance, def) - 32usize];
    ["Offset of field: lysp_ext_instance::parent"]
        [::std::mem::offset_of!(lysp_ext_instance, parent) - 40usize];
    ["Offset of field: lysp_ext_instance::parent_stmt"]
        [::std::mem::offset_of!(lysp_ext_instance, parent_stmt) - 48usize];
    ["Offset of field: lysp_ext_instance::parent_stmt_index"][::std::mem::offset_of!(
        lysp_ext_instance,
        parent_stmt_index
    ) - 56usize];
    ["Offset of field: lysp_ext_instance::flags"]
        [::std::mem::offset_of!(lysp_ext_instance, flags) - 64usize];
    ["Offset of field: lysp_ext_instance::record"]
        [::std::mem::offset_of!(lysp_ext_instance, record) - 72usize];
    ["Offset of field: lysp_ext_instance::substmts"]
        [::std::mem::offset_of!(lysp_ext_instance, substmts) - 80usize];
    ["Offset of field: lysp_ext_instance::parsed"]
        [::std::mem::offset_of!(lysp_ext_instance, parsed) - 88usize];
    ["Offset of field: lysp_ext_instance::child"]
        [::std::mem::offset_of!(lysp_ext_instance, child) - 96usize];
    ["Offset of field: lysp_ext_instance::exts"]
        [::std::mem::offset_of!(lysp_ext_instance, exts) - 104usize];
};
impl Default for lysp_ext_instance {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_ext_substmt {
    pub stmt: ly_stmt::Type,
    pub storage_p: *mut *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_ext_substmt"]
        [::std::mem::size_of::<lysc_ext_substmt>() - 16usize];
    ["Alignment of lysc_ext_substmt"]
        [::std::mem::align_of::<lysc_ext_substmt>() - 8usize];
    ["Offset of field: lysc_ext_substmt::stmt"]
        [::std::mem::offset_of!(lysc_ext_substmt, stmt) - 0usize];
    ["Offset of field: lysc_ext_substmt::storage_p"]
        [::std::mem::offset_of!(lysc_ext_substmt, storage_p) - 8usize];
};
impl Default for lysc_ext_substmt {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lysc_ext_instance {
    pub def: *mut lysc_ext,
    pub argument: *const ::std::os::raw::c_char,
    pub module: *mut lys_module,
    pub exts: *mut lysc_ext_instance,
    pub parent: *mut ::std::os::raw::c_void,
    pub parent_stmt: ly_stmt::Type,
    pub parent_stmt_index: u64,
    pub substmts: *mut lysc_ext_substmt,
    pub compiled: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lysc_ext_instance"]
        [::std::mem::size_of::<lysc_ext_instance>() - 72usize];
    ["Alignment of lysc_ext_instance"]
        [::std::mem::align_of::<lysc_ext_instance>() - 8usize];
    ["Offset of field: lysc_ext_instance::def"]
        [::std::mem::offset_of!(lysc_ext_instance, def) - 0usize];
    ["Offset of field: lysc_ext_instance::argument"]
        [::std::mem::offset_of!(lysc_ext_instance, argument) - 8usize];
    ["Offset of field: lysc_ext_instance::module"]
        [::std::mem::offset_of!(lysc_ext_instance, module) - 16usize];
    ["Offset of field: lysc_ext_instance::exts"]
        [::std::mem::offset_of!(lysc_ext_instance, exts) - 24usize];
    ["Offset of field: lysc_ext_instance::parent"]
        [::std::mem::offset_of!(lysc_ext_instance, parent) - 32usize];
    ["Offset of field: lysc_ext_instance::parent_stmt"]
        [::std::mem::offset_of!(lysc_ext_instance, parent_stmt) - 40usize];
    ["Offset of field: lysc_ext_instance::parent_stmt_index"][::std::mem::offset_of!(
        lysc_ext_instance,
        parent_stmt_index
    ) - 48usize];
    ["Offset of field: lysc_ext_instance::substmts"]
        [::std::mem::offset_of!(lysc_ext_instance, substmts) - 56usize];
    ["Offset of field: lysc_ext_instance::compiled"]
        [::std::mem::offset_of!(lysc_ext_instance, compiled) - 64usize];
};
impl Default for lysc_ext_instance {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type lyplg_ext_parse_clb = ::std::option::Option<
    unsafe extern "C" fn(
        pctx: *mut lysp_ctx,
        ext: *mut lysp_ext_instance,
    ) -> LY_ERR::Type,
>;
unsafe extern "C" {
    pub fn lyplg_ext_parse_log(
        pctx: *const lysp_ctx,
        ext: *const lysp_ext_instance,
        level: LY_LOG_LEVEL::Type,
        err: LY_ERR::Type,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn lyplg_ext_parse_get_cur_pmod(
        pctx: *const lysp_ctx,
    ) -> *const lysp_module;
}
unsafe extern "C" {
    pub fn lyplg_ext_parse_extension_instance(
        pctx: *mut lysp_ctx,
        ext: *mut lysp_ext_instance,
    ) -> LY_ERR::Type;
}
pub type lyplg_ext_compile_clb = ::std::option::Option<
    unsafe extern "C" fn(
        cctx: *mut lysc_ctx,
        extp: *const lysp_ext_instance,
        ext: *mut lysc_ext_instance,
    ) -> LY_ERR::Type,
>;
unsafe extern "C" {
    pub fn lyplg_ext_compile_log(
        cctx: *const lysc_ctx,
        ext: *const lysc_ext_instance,
        level: LY_LOG_LEVEL::Type,
        err: LY_ERR::Type,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn lyplg_ext_compile_log_path(
        path: *const ::std::os::raw::c_char,
        ext: *const lysc_ext_instance,
        level: LY_LOG_LEVEL::Type,
        err: LY_ERR::Type,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
unsafe extern "C" {
    pub fn lyplg_ext_compile_log_err(
        eitem: *const ly_err_item,
        ext: *const lysc_ext_instance,
    );
}
unsafe extern "C" {
    pub fn lyplg_ext_compile_get_ctx(ctx: *const lysc_ctx) -> *mut ly_ctx;
}
unsafe extern "C" {
    pub fn lyplg_ext_compile_get_options(ctx: *const lysc_ctx) -> *mut u32;
}
unsafe extern "C" {
    pub fn lyplg_ext_compile_get_cur_mod(
        ctx: *const lysc_ctx,
    ) -> *const lys_module;
}
unsafe extern "C" {
    pub fn lyplg_ext_compile_get_pmod(ctx: *const lysc_ctx)
        -> *mut lysp_module;
}
unsafe extern "C" {
    pub fn lyplg_ext_compile_extension_instance(
        ctx: *mut lysc_ctx,
        extp: *const lysp_ext_instance,
        ext: *mut lysc_ext_instance,
    ) -> LY_ERR::Type;
}
pub type lyplg_ext_sprinter_info_clb = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut lyspr_ctx,
        ext: *mut lysc_ext_instance,
        flag: *mut ly_bool,
    ) -> LY_ERR::Type,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ly_out {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn lyplg_ext_print_get_out(ctx: *const lyspr_ctx) -> *mut *mut ly_out;
}
unsafe extern "C" {
    pub fn lyplg_ext_print_get_options(ctx: *const lyspr_ctx) -> *mut u32;
}
unsafe extern "C" {
    pub fn lyplg_ext_print_get_level(ctx: *const lyspr_ctx) -> *mut u16;
}
unsafe extern "C" {
    pub fn lyplg_ext_print_info_extension_instance(
        ctx: *mut lyspr_ctx,
        ext: *const lysc_ext_instance,
        flag: *mut ly_bool,
    );
}
pub type lyplg_ext_sprinter_ctree_clb = ::std::option::Option<
    unsafe extern "C" fn(
        ext: *mut lysc_ext_instance,
        ctx: *const lyspr_tree_ctx,
        flags: *mut *const ::std::os::raw::c_char,
        add_opts: *mut *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type,
>;
pub type lyplg_ext_sprinter_ctree_override_clb = ::std::option::Option<
    unsafe extern "C" fn(
        node: *const lysc_node,
        plugin_priv: *const ::std::os::raw::c_void,
        skip: *mut ly_bool,
        flags: *mut *const ::std::os::raw::c_char,
        add_opts: *mut *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type,
>;
unsafe extern "C" {
    pub fn lyplg_ext_sprinter_ctree_add_ext_nodes(
        ctx: *const lyspr_tree_ctx,
        ext: *mut lysc_ext_instance,
        clb: lyplg_ext_sprinter_ctree_override_clb,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_ext_sprinter_ctree_add_nodes(
        ctx: *const lyspr_tree_ctx,
        nodes: *mut lysc_node,
        clb: lyplg_ext_sprinter_ctree_override_clb,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_ext_sprinter_tree_set_priv(
        ctx: *const lyspr_tree_ctx,
        plugin_priv: *mut ::std::os::raw::c_void,
        free_clb: ::std::option::Option<
            unsafe extern "C" fn(plugin_priv: *mut ::std::os::raw::c_void),
        >,
    ) -> LY_ERR::Type;
}
pub type lyplg_ext_sprinter_ptree_clb = ::std::option::Option<
    unsafe extern "C" fn(
        ext: *mut lysp_ext_instance,
        ctx: *const lyspr_tree_ctx,
        flags: *mut *const ::std::os::raw::c_char,
        add_opts: *mut *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type,
>;
pub type lyplg_ext_sprinter_ptree_override_clb = ::std::option::Option<
    unsafe extern "C" fn(
        node: *const lysp_node,
        plugin_priv: *const ::std::os::raw::c_void,
        skip: *mut ly_bool,
        flags: *mut *const ::std::os::raw::c_char,
        add_opts: *mut *const ::std::os::raw::c_char,
    ) -> LY_ERR::Type,
>;
unsafe extern "C" {
    pub fn lyplg_ext_sprinter_ptree_add_ext_nodes(
        ctx: *const lyspr_tree_ctx,
        ext: *mut lysp_ext_instance,
        clb: lyplg_ext_sprinter_ptree_override_clb,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_ext_sprinter_ptree_add_nodes(
        ctx: *const lyspr_tree_ctx,
        nodes: *mut lysp_node,
        clb: lyplg_ext_sprinter_ptree_override_clb,
    ) -> LY_ERR::Type;
}
pub type lyplg_ext_data_node_clb = ::std::option::Option<
    unsafe extern "C" fn(
        ext: *mut lysc_ext_instance,
        node: *mut lyd_node,
        validate_options: u32,
    ) -> LY_ERR::Type,
>;
pub type lyplg_ext_data_snode_clb = ::std::option::Option<
    unsafe extern "C" fn(
        ext: *mut lysc_ext_instance,
        parent: *const lyd_node,
        sparent: *const lysc_node,
        prefix: *const ::std::os::raw::c_char,
        prefix_len: usize,
        format: LY_VALUE_FORMAT::Type,
        prefix_data: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        name_len: usize,
        snode: *mut *const lysc_node,
    ) -> LY_ERR::Type,
>;
pub type lyplg_ext_data_validate_clb = ::std::option::Option<
    unsafe extern "C" fn(
        ext: *mut lysc_ext_instance,
        sibling: *mut lyd_node,
        dep_tree: *const lyd_node,
        data_type: lyd_type::Type,
        val_opts: u32,
        diff: *mut *mut lyd_node,
    ) -> LY_ERR::Type,
>;
pub type lyplg_ext_parse_free_clb = ::std::option::Option<
    unsafe extern "C" fn(ctx: *const ly_ctx, ext: *mut lysp_ext_instance),
>;
unsafe extern "C" {
    pub fn lyplg_ext_pfree_instance_substatements(
        ctx: *const ly_ctx,
        substmts: *mut lysp_ext_substmt,
    );
}
pub type lyplg_ext_compile_free_clb = ::std::option::Option<
    unsafe extern "C" fn(ctx: *const ly_ctx, ext: *mut lysc_ext_instance),
>;
unsafe extern "C" {
    pub fn lyplg_ext_cfree_instance_substatements(
        ctx: *const ly_ctx,
        substmts: *mut lysc_ext_substmt,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyplg_ext {
    pub id: *const ::std::os::raw::c_char,
    pub parse: lyplg_ext_parse_clb,
    pub compile: lyplg_ext_compile_clb,
    pub printer_info: lyplg_ext_sprinter_info_clb,
    pub printer_ctree: lyplg_ext_sprinter_ctree_clb,
    pub printer_ptree: lyplg_ext_sprinter_ptree_clb,
    pub node: lyplg_ext_data_node_clb,
    pub snode: lyplg_ext_data_snode_clb,
    pub validate: lyplg_ext_data_validate_clb,
    pub pfree: lyplg_ext_parse_free_clb,
    pub cfree: lyplg_ext_compile_free_clb,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyplg_ext"][::std::mem::size_of::<lyplg_ext>() - 88usize];
    ["Alignment of lyplg_ext"][::std::mem::align_of::<lyplg_ext>() - 8usize];
    ["Offset of field: lyplg_ext::id"]
        [::std::mem::offset_of!(lyplg_ext, id) - 0usize];
    ["Offset of field: lyplg_ext::parse"]
        [::std::mem::offset_of!(lyplg_ext, parse) - 8usize];
    ["Offset of field: lyplg_ext::compile"]
        [::std::mem::offset_of!(lyplg_ext, compile) - 16usize];
    ["Offset of field: lyplg_ext::printer_info"]
        [::std::mem::offset_of!(lyplg_ext, printer_info) - 24usize];
    ["Offset of field: lyplg_ext::printer_ctree"]
        [::std::mem::offset_of!(lyplg_ext, printer_ctree) - 32usize];
    ["Offset of field: lyplg_ext::printer_ptree"]
        [::std::mem::offset_of!(lyplg_ext, printer_ptree) - 40usize];
    ["Offset of field: lyplg_ext::node"]
        [::std::mem::offset_of!(lyplg_ext, node) - 48usize];
    ["Offset of field: lyplg_ext::snode"]
        [::std::mem::offset_of!(lyplg_ext, snode) - 56usize];
    ["Offset of field: lyplg_ext::validate"]
        [::std::mem::offset_of!(lyplg_ext, validate) - 64usize];
    ["Offset of field: lyplg_ext::pfree"]
        [::std::mem::offset_of!(lyplg_ext, pfree) - 72usize];
    ["Offset of field: lyplg_ext::cfree"]
        [::std::mem::offset_of!(lyplg_ext, cfree) - 80usize];
};
impl Default for lyplg_ext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lyplg_ext_record {
    pub module: *const ::std::os::raw::c_char,
    pub revision: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub plugin: lyplg_ext,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyplg_ext_record"]
        [::std::mem::size_of::<lyplg_ext_record>() - 112usize];
    ["Alignment of lyplg_ext_record"]
        [::std::mem::align_of::<lyplg_ext_record>() - 8usize];
    ["Offset of field: lyplg_ext_record::module"]
        [::std::mem::offset_of!(lyplg_ext_record, module) - 0usize];
    ["Offset of field: lyplg_ext_record::revision"]
        [::std::mem::offset_of!(lyplg_ext_record, revision) - 8usize];
    ["Offset of field: lyplg_ext_record::name"]
        [::std::mem::offset_of!(lyplg_ext_record, name) - 16usize];
    ["Offset of field: lyplg_ext_record::plugin"]
        [::std::mem::offset_of!(lyplg_ext_record, plugin) - 24usize];
};
impl Default for lyplg_ext_record {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn lyplg_ext_stmt2str(
        stmt: ly_stmt::Type,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn lyplg_ext_nodetype2stmt(nodetype: u16) -> ly_stmt::Type;
}
unsafe extern "C" {
    pub fn lyplg_ext_get_storage(
        ext: *const lysc_ext_instance,
        stmt: ::std::os::raw::c_int,
        storage_size: u32,
        storage: *mut *const ::std::os::raw::c_void,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_ext_parsed_get_storage(
        ext: *const lysc_ext_instance,
        stmt: ::std::os::raw::c_int,
        storage_size: u32,
        storage: *mut *const ::std::os::raw::c_void,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_ext_get_data(
        ctx: *const ly_ctx,
        ext: *const lysc_ext_instance,
        ext_data: *mut *mut ::std::os::raw::c_void,
        ext_data_free: *mut ly_bool,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_ext_insert(
        parent: *mut lyd_node,
        first: *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_ext_schema_mount_get_parent_ref(
        ext: *const lysc_ext_instance,
        refs: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyplg_ext_schema_mount_create_context(
        ext: *const lysc_ext_instance,
        ctx: *mut *mut ly_ctx,
    ) -> LY_ERR::Type;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lyd_meta {
    pub parent: *mut lyd_node,
    pub next: *mut lyd_meta,
    pub annotation: *mut lysc_ext_instance,
    pub name: *const ::std::os::raw::c_char,
    pub value: lyd_value,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lyd_meta"][::std::mem::size_of::<lyd_meta>() - 72usize];
    ["Alignment of lyd_meta"][::std::mem::align_of::<lyd_meta>() - 8usize];
    ["Offset of field: lyd_meta::parent"]
        [::std::mem::offset_of!(lyd_meta, parent) - 0usize];
    ["Offset of field: lyd_meta::next"]
        [::std::mem::offset_of!(lyd_meta, next) - 8usize];
    ["Offset of field: lyd_meta::annotation"]
        [::std::mem::offset_of!(lyd_meta, annotation) - 16usize];
    ["Offset of field: lyd_meta::name"]
        [::std::mem::offset_of!(lyd_meta, name) - 24usize];
    ["Offset of field: lyd_meta::value"]
        [::std::mem::offset_of!(lyd_meta, value) - 32usize];
};
impl Default for lyd_meta {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub mod LY_OUT_TYPE {
    pub type Type = ::std::os::raw::c_int;
    pub const LY_OUT_ERROR: Type = -1;
    pub const LY_OUT_FD: Type = 0;
    pub const LY_OUT_FDSTREAM: Type = 1;
    pub const LY_OUT_FILE: Type = 2;
    pub const LY_OUT_FILEPATH: Type = 3;
    pub const LY_OUT_MEMORY: Type = 4;
    pub const LY_OUT_CALLBACK: Type = 5;
}
unsafe extern "C" {
    pub fn ly_out_type(out: *const ly_out) -> LY_OUT_TYPE::Type;
}
unsafe extern "C" {
    pub fn ly_out_reset(out: *mut ly_out) -> LY_ERR::Type;
}
pub type ly_write_clb = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        buf: *const ::std::os::raw::c_void,
        count: usize,
    ) -> isize,
>;
unsafe extern "C" {
    pub fn ly_out_new_clb(
        writeclb: ly_write_clb,
        user_data: *mut ::std::os::raw::c_void,
        out: *mut *mut ly_out,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_out_clb(out: *mut ly_out, writeclb: ly_write_clb)
        -> ly_write_clb;
}
unsafe extern "C" {
    pub fn ly_out_clb_arg(
        out: *mut ly_out,
        arg: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn ly_out_new_fd(
        fd: ::std::os::raw::c_int,
        out: *mut *mut ly_out,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_out_fd(
        out: *mut ly_out,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ly_out_new_file(f: *mut FILE, out: *mut *mut ly_out)
        -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_out_file(out: *mut ly_out, f: *mut FILE) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ly_out_new_memory(
        strp: *mut *mut ::std::os::raw::c_char,
        size: usize,
        out: *mut *mut ly_out,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_out_memory(
        out: *mut ly_out,
        strp: *mut *mut ::std::os::raw::c_char,
        size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ly_out_new_filepath(
        filepath: *const ::std::os::raw::c_char,
        out: *mut *mut ly_out,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_out_filepath(
        out: *mut ly_out,
        filepath: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ly_print(
        out: *mut ly_out,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_print_flush(out: *mut ly_out);
}
unsafe extern "C" {
    pub fn ly_write(
        out: *mut ly_out,
        buf: *const ::std::os::raw::c_char,
        len: usize,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_out_printed(out: *const ly_out) -> usize;
}
unsafe extern "C" {
    pub fn ly_out_free(
        out: *mut ly_out,
        clb_arg_destructor: ::std::option::Option<
            unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void),
        >,
        destroy: ly_bool,
    );
}
pub mod ly_path_pred_type {
    pub type Type = ::std::os::raw::c_uint;
    pub const LY_PATH_PREDTYPE_POSITION: Type = 0;
    pub const LY_PATH_PREDTYPE_LIST: Type = 1;
    pub const LY_PATH_PREDTYPE_LEAFLIST: Type = 2;
    pub const LY_PATH_PREDTYPE_LIST_VAR: Type = 3;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ly_path_predicate {
    pub type_: ly_path_pred_type::Type,
    pub __bindgen_anon_1: ly_path_predicate__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ly_path_predicate__bindgen_ty_1 {
    pub position: u64,
    pub __bindgen_anon_1: ly_path_predicate__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ly_path_predicate__bindgen_ty_1__bindgen_ty_1 {
    pub key: *const lysc_node,
    pub __bindgen_anon_1:
        ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub value: lyd_value,
    pub variable: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >() - 40usize];
    [
        "Alignment of ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1",
    ][::std::mem::align_of::<
        ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    [
        "Offset of field: ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::value",
    ][::std::mem::offset_of!(
        ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        value
    ) - 0usize];
    [
        "Offset of field: ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::variable",
    ][::std::mem::offset_of!(
        ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        variable
    ) - 0usize];
};
impl Default for ly_path_predicate__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_path_predicate__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ly_path_predicate__bindgen_ty_1__bindgen_ty_1>(
        ) - 48usize];
    ["Alignment of ly_path_predicate__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ly_path_predicate__bindgen_ty_1__bindgen_ty_1>(
        ) - 8usize];
    ["Offset of field: ly_path_predicate__bindgen_ty_1__bindgen_ty_1::key"][::std::mem::offset_of!(
        ly_path_predicate__bindgen_ty_1__bindgen_ty_1,
        key
    )
        - 0usize];
};
impl Default for ly_path_predicate__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_path_predicate__bindgen_ty_1"]
        [::std::mem::size_of::<ly_path_predicate__bindgen_ty_1>() - 48usize];
    ["Alignment of ly_path_predicate__bindgen_ty_1"]
        [::std::mem::align_of::<ly_path_predicate__bindgen_ty_1>() - 8usize];
    ["Offset of field: ly_path_predicate__bindgen_ty_1::position"][::std::mem::offset_of!(
        ly_path_predicate__bindgen_ty_1,
        position
    ) - 0usize];
};
impl Default for ly_path_predicate__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_path_predicate"]
        [::std::mem::size_of::<ly_path_predicate>() - 56usize];
    ["Alignment of ly_path_predicate"]
        [::std::mem::align_of::<ly_path_predicate>() - 8usize];
    ["Offset of field: ly_path_predicate::type_"]
        [::std::mem::offset_of!(ly_path_predicate, type_) - 0usize];
};
impl Default for ly_path_predicate {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ly_path {
    pub node: *const lysc_node,
    pub ext: *const lysc_ext_instance,
    pub predicates: *mut ly_path_predicate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_path"][::std::mem::size_of::<ly_path>() - 24usize];
    ["Alignment of ly_path"][::std::mem::align_of::<ly_path>() - 8usize];
    ["Offset of field: ly_path::node"]
        [::std::mem::offset_of!(ly_path, node) - 0usize];
    ["Offset of field: ly_path::ext"]
        [::std::mem::offset_of!(ly_path, ext) - 8usize];
    ["Offset of field: ly_path::predicates"]
        [::std::mem::offset_of!(ly_path, predicates) - 16usize];
};
impl Default for ly_path {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn ly_path_parse(
        ctx: *const ly_ctx,
        ctx_node: *const lysc_node,
        str_path: *const ::std::os::raw::c_char,
        path_len: usize,
        lref: ly_bool,
        begin: u16,
        prefix: u16,
        pred: u16,
        expr: *mut *mut lyxp_expr,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_path_parse_predicate(
        ctx: *const ly_ctx,
        cur_node: *const lysc_node,
        str_path: *const ::std::os::raw::c_char,
        path_len: usize,
        prefix: u16,
        pred: u16,
        expr: *mut *mut lyxp_expr,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_path_compile(
        ctx: *const ly_ctx,
        cur_mod: *const lys_module,
        ctx_node: *const lysc_node,
        top_ext: *const lysc_ext_instance,
        expr: *const lyxp_expr,
        oper: u16,
        target: u16,
        limit_access_tree: ly_bool,
        format: LY_VALUE_FORMAT::Type,
        prefix_data: *mut ::std::os::raw::c_void,
        path: *mut *mut ly_path,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_path_compile_leafref(
        ctx: *const ly_ctx,
        ctx_node: *const lysc_node,
        top_ext: *const lysc_ext_instance,
        expr: *const lyxp_expr,
        oper: u16,
        target: u16,
        format: LY_VALUE_FORMAT::Type,
        prefix_data: *mut ::std::os::raw::c_void,
        path: *mut *mut ly_path,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_path_compile_predicate(
        ctx: *const ly_ctx,
        cur_node: *const lysc_node,
        cur_mod: *const lys_module,
        ctx_node: *const lysc_node,
        expr: *const lyxp_expr,
        tok_idx: *mut u32,
        format: LY_VALUE_FORMAT::Type,
        prefix_data: *mut ::std::os::raw::c_void,
        predicates: *mut *mut ly_path_predicate,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_path_eval_partial(
        path: *const ly_path,
        start: *const lyd_node,
        vars: *const lyxp_var,
        with_opaq: ly_bool,
        path_idx: *mut u64,
        match_: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_path_eval(
        path: *const ly_path,
        start: *const lyd_node,
        vars: *const lyxp_var,
        match_: *mut *mut lyd_node,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_path_dup(
        ctx: *const ly_ctx,
        path: *const ly_path,
        dup: *mut *mut ly_path,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_path_predicates_free(
        ctx: *const ly_ctx,
        predicates: *mut ly_path_predicate,
    );
}
unsafe extern "C" {
    pub fn ly_path_free(path: *mut ly_path);
}
unsafe extern "C" {
    pub fn lyd_print_all(
        out: *mut ly_out,
        root: *const lyd_node,
        format: LYD_FORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_print_tree(
        out: *mut ly_out,
        root: *const lyd_node,
        format: LYD_FORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_print_mem(
        strp: *mut *mut ::std::os::raw::c_char,
        root: *const lyd_node,
        format: LYD_FORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_print_fd(
        fd: ::std::os::raw::c_int,
        root: *const lyd_node,
        format: LYD_FORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_print_file(
        f: *mut FILE,
        root: *const lyd_node,
        format: LYD_FORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_print_path(
        path: *const ::std::os::raw::c_char,
        root: *const lyd_node,
        format: LYD_FORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_print_clb(
        writeclb: ly_write_clb,
        user_data: *mut ::std::os::raw::c_void,
        root: *const lyd_node,
        format: LYD_FORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lyd_node_should_print(
        node: *const lyd_node,
        options: u32,
    ) -> ly_bool;
}
unsafe extern "C" {
    pub fn lyd_metadata_should_print(meta: *const lyd_meta) -> ly_bool;
}
pub mod LYS_OUTFORMAT {
    pub type Type = ::std::os::raw::c_uint;
    pub const LYS_OUT_UNKNOWN: Type = 0;
    pub const LYS_OUT_YANG: Type = 1;
    pub const LYS_OUT_YANG_COMPILED: Type = 2;
    pub const LYS_OUT_YIN: Type = 3;
    pub const LYS_OUT_TREE: Type = 4;
}
unsafe extern "C" {
    pub fn lys_print_module(
        out: *mut ly_out,
        module: *const lys_module,
        format: LYS_OUTFORMAT::Type,
        line_length: usize,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_print_submodule(
        out: *mut ly_out,
        submodule: *const lysp_submodule,
        format: LYS_OUTFORMAT::Type,
        line_length: usize,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_print_mem(
        strp: *mut *mut ::std::os::raw::c_char,
        module: *const lys_module,
        format: LYS_OUTFORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_print_fd(
        fd: ::std::os::raw::c_int,
        module: *const lys_module,
        format: LYS_OUTFORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_print_file(
        f: *mut FILE,
        module: *const lys_module,
        format: LYS_OUTFORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_print_path(
        path: *const ::std::os::raw::c_char,
        module: *const lys_module,
        format: LYS_OUTFORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_print_clb(
        writeclb: ly_write_clb,
        user_data: *mut ::std::os::raw::c_void,
        module: *const lys_module,
        format: LYS_OUTFORMAT::Type,
        options: u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn lys_print_node(
        out: *mut ly_out,
        node: *const lysc_node,
        format: LYS_OUTFORMAT::Type,
        line_length: usize,
        options: u32,
    ) -> LY_ERR::Type;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ly_set {
    pub size: u32,
    pub count: u32,
    pub __bindgen_anon_1: ly_set__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ly_set__bindgen_ty_1 {
    pub dnodes: *mut *mut lyd_node,
    pub snodes: *mut *mut lysc_node,
    pub objs: *mut *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_set__bindgen_ty_1"]
        [::std::mem::size_of::<ly_set__bindgen_ty_1>() - 8usize];
    ["Alignment of ly_set__bindgen_ty_1"]
        [::std::mem::align_of::<ly_set__bindgen_ty_1>() - 8usize];
    ["Offset of field: ly_set__bindgen_ty_1::dnodes"]
        [::std::mem::offset_of!(ly_set__bindgen_ty_1, dnodes) - 0usize];
    ["Offset of field: ly_set__bindgen_ty_1::snodes"]
        [::std::mem::offset_of!(ly_set__bindgen_ty_1, snodes) - 0usize];
    ["Offset of field: ly_set__bindgen_ty_1::objs"]
        [::std::mem::offset_of!(ly_set__bindgen_ty_1, objs) - 0usize];
};
impl Default for ly_set__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ly_set"][::std::mem::size_of::<ly_set>() - 16usize];
    ["Alignment of ly_set"][::std::mem::align_of::<ly_set>() - 8usize];
    ["Offset of field: ly_set::size"]
        [::std::mem::offset_of!(ly_set, size) - 0usize];
    ["Offset of field: ly_set::count"]
        [::std::mem::offset_of!(ly_set, count) - 4usize];
};
impl Default for ly_set {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "C" {
    pub fn ly_set_new(set_p: *mut *mut ly_set) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_set_dup(
        set: *const ly_set,
        duplicator: ::std::option::Option<
            unsafe extern "C" fn(
                obj: *const ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        newset_p: *mut *mut ly_set,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_set_add(
        set: *mut ly_set,
        object: *const ::std::os::raw::c_void,
        list: ly_bool,
        index_p: *mut u32,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_set_merge(
        trg: *mut ly_set,
        src: *const ly_set,
        list: ly_bool,
        duplicator: ::std::option::Option<
            unsafe extern "C" fn(
                obj: *const ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_set_contains(
        set: *const ly_set,
        object: *const ::std::os::raw::c_void,
        index_p: *mut u32,
    ) -> ly_bool;
}
unsafe extern "C" {
    pub fn ly_set_clean(
        set: *mut ly_set,
        destructor: ::std::option::Option<
            unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void),
        >,
    );
}
unsafe extern "C" {
    pub fn ly_set_rm(
        set: *mut ly_set,
        object: *mut ::std::os::raw::c_void,
        destructor: ::std::option::Option<
            unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void),
        >,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_set_rm_index(
        set: *mut ly_set,
        index: u32,
        destructor: ::std::option::Option<
            unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void),
        >,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_set_rm_index_ordered(
        set: *mut ly_set,
        index: u32,
        destructor: ::std::option::Option<
            unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void),
        >,
    ) -> LY_ERR::Type;
}
unsafe extern "C" {
    pub fn ly_set_free(
        set: *mut ly_set,
        destructor: ::std::option::Option<
            unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void),
        >,
    );
}
unsafe extern "C" {
    pub fn ly_set_erase(
        set: *mut ly_set,
        destructor: ::std::option::Option<
            unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void),
        >,
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"]
        [::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lyplg_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ly_ht {
    pub _address: u8,
}
